package com.business.zee;

import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.html5.LocalStorage;
import org.openqa.selenium.html5.SessionStorage;
import org.openqa.selenium.html5.WebStorage;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.Augmenter;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Reporter;
import org.testng.asserts.SoftAssert;
import com.driverInstance.CommandBase;
import com.emailReport.GmailInbox;
import com.extent.ExtentReporter;
import com.jayway.restassured.response.Response;
import com.metadata.ResponseInstance;
import com.metadata.getResponseUpNextRail;
import com.metadata.responseWatchlist;
import com.propertyfilereader.PropertyFileReader;
import com.utility.LoggingUtils;
import com.utility.Utilities;
import com.zee5.PWAPages.*;
import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidElement;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import java.net.URL;

public class Zee5PWASanityWEBBusinessLogic extends Utilities {

	public Zee5PWASanityWEBBusinessLogic(String Application) throws InterruptedException {
		new CommandBase(Application);
		init();
	}

	private int timeout;

	/** Retry Count */
	private int retryCount;

	ExtentReporter extent = new ExtentReporter();

	private SoftAssert softAssert = new SoftAssert();

	/** The Constant logger. */
	// final static Logger logger = Logger.getLogger("rootLogger");
	static LoggingUtils logger = new LoggingUtils();

	/** The Android driver. */
	public AndroidDriver<AndroidElement> androidDriver;

	/** The Android driver. */
	public IOSDriver<WebElement> iOSDriver;

	Set<String> hash_Set = new HashSet<String>();

	@SuppressWarnings("unused")
	private String LacationBasedLanguge;

	List<String> LocationLanguage = new ArrayList<String>();

	List<String> DefaultLanguage = new ArrayList<String>();

	List<String> SelectedCONTENTLanguageInWelcomscreen = new ArrayList<String>();

	List<String> SelectedCONTENTLanguageInHamburgerMenu = new ArrayList<String>();

	/**
	 * ================================Fetching URL from
	 * pwaSanityWeb.xml==================================
	 * 
	 */

	String URL = getParameterFromXML("url");

	String BROWSER = getParameterFromXML("browserType");

	String NonSubUsername = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("NonsubscribedUserName");
	String NonSubPassword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("NonsubscribedPassword");
	String SubUsername = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("SubscribedUserName");
	String SubPassword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("SubscribedPassword");

	String ExpiredUserName = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("ExpiredUserName");
	String ExpiredUserPassword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("ExpiredUserPassword");
	String audioTrackContent = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("audioTrackContent");

	Response resp;
	String PresentTitle;
	String AdValue = "AdnotPlayed";
	String contentTitle;

	ArrayList<String> MastheadTitleApi = new ArrayList<String>();

	public static boolean relaunchFlag = false;
	public static boolean appliTools = false;

	public static boolean PopUp = false;

	public int getTimeout() {
		return timeout;
	}

	public void setTimeout(int timeout) {
		this.timeout = timeout;
	}

	public int getRetryCount() {
		return retryCount;
	}

	public void setRetryCount(int retryCount) {
		this.retryCount = retryCount;
	}

	/**
	 * Initiate Property File.
	 *
	 * @param byLocator the by locator
	 */

//	public void scroll1() {
//		JavascriptExecutor js = (JavascriptExecutor) getWebDriver();
//		WebElement Element = getWebDriver().findElement(By.xpath("//h2[.='Trending on ZEE5']"));
//		js.executeScript("arguments[0].scrollIntoView();", Element);
//	}

	public void init() {

		PropertyFileReader handler = new PropertyFileReader("properties/Execution.properties");
		setTimeout(Integer.parseInt(handler.getproperty("TIMEOUT")));
		setRetryCount(Integer.parseInt(handler.getproperty("RETRY_COUNT")));
		logger.info(
				"Loaded the following properties" + " TimeOut :" + getTimeout() + " RetryCount :" + getRetryCount());
	}

	@SuppressWarnings("static-access")
	public void ZeeWEBPWALogin(String LoginMethod) throws Exception {
		String userType = getParameterFromXML("userType");
		switch (userType) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			//dismissDisplayContentLanguagePopUp();
			//click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			click(PWAHomePage.objNotNow, "Notification popup");
			waitTime(3000);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User");
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
			//click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			click(PWAHomePage.objNotNow, "Notification popup");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, Username, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, Password, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User");
			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");
			//click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			click(PWAHomePage.objNotNow, "Notification popup");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, SubscribedUsername, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, SubscribedPassword, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			break;

		case "ClubUser":
			extent.HeaderChildNode("Login as Subscribed User");
			String clubUserName = getParameterFromXML("ClubUserName");
			String clubPassword = getParameterFromXML("ClubPassword");
			//click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			click(PWAHomePage.objNotNow, "Notification popup");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, clubUserName, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, clubPassword, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			break;
		}
		selectLanguages();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn,"Hamburger menu");
		extent.version = getText(By.xpath(".//*[@class='versionText']"));
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
	}

	/**
	 * Function to Enter DOB and Gender in SIGNUP Page.
	 */
	public void regestrationfromSocialMedia() throws Exception {
		extent.HeaderChildNode("Regestration Screen");
		click(PWASignupPage.objDayPickerTab, "Day Tab");
		verifyElementPresentAndClick(PWASignupPage.objDayPickerTabValue, "Day option");
		verifyElementPresentAndClick(PWASignupPage.objMonthPickerTab, "Month Tab");
		verifyElementPresentAndClick(PWASignupPage.objMonthPickerTabValue, "Month option");
		verifyElementPresentAndClick(PWASignupPage.objYearPickerTab, "year Tab");
		verifyElementPresentAndClick(PWASignupPage.objYearPickerTabValue, "year option");
		verifyElementPresentAndClick(PWASignupPage.objGenderMaleBtn, "Gender tab");
		verifyElementPresentAndClick(PWALoginPage.objSignUpBtn, "signUp button");
		waitTime(10000);
		verifyElementPresent(PWAHomePage.objZeeLogo, "Zee logo");
		logger.info("User Logged in Successfully");
		extent.extentLogger("Logged in", "User Logged in Successfully");
	}

	public void WEBPWAValidatingSubscriptionAndTransaction(String userType) throws Exception {
		if ((userType.equals("Guest") || (userType.equals("NonSubscribedUser")))) {
			extent.HeaderChildNode("Validation of Get Premium CTA on Carousel");
			List<WebElement> ele = getWebDriver().findElements(PWAHomePage.objGetPremiumWeb);
			System.out.println(ele.size());
			if (ele.size() == 0) {
				System.out.println("Get Premium CTA on Carousel is not displayed");
				logger.info("Get Premium CTA on Carousel is not displayed");
				extent.extentLogger("<b>" + "Get Premium CTA on Carousel is not displayed..",
						"Get Premium CTA on Carousel is not displayed.");
			} else {
				System.out.println("Get Premium CTA on Carousel is displayed");
				logger.info("Get Premium CTA on Carousel is displayed");
				extent.extentLogger("<b>" + "Get Premium CTA on Carousel is displayed..",
						"Get Premium CTA on Carousel is displayed.");
				for (int i = 1; i < ele.size(); i++) {
					verifyElementExist1(ele.get(i), "Get Premium CTA on Carousel");
				}
			}
			if (userType.equals("Guest")) {
				extent.HeaderChildNode("Validating BuySubscription and HaveAPrepaidCode under MyPlans");
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Button");
				if (checkElementDisplayed(PWAHamburgerMenuPage.objPlans, "My Plans")) {
					checkElementDisplayed(PWAHamburgerMenuPage.objBuySubscription, "Buy Subscription");
					checkElementDisplayed(PWAHamburgerMenuPage.objHaveAPrepaidCode, "Have a Prepaid Code");
				}
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objHomeInOpenMenuTab, "Home");
			}
		}
	}

	/**
	 * Method to wait for the element and click on it once displayed. The method
	 * will wait for the element to be located for a maximum of given seconds. The
	 * method terminates immediately once the element is located
	 */

	public void waitForElementAndClick(By locator, int seconds, String message) throws InterruptedException {
		main: for (int time = 0; time <= seconds; time++) {
			try {
				getWebDriver().findElement(locator).click();
				logger.info("Clicked element " + message);
				extent.extentLogger("clickedElement", "Clicked element " + message);
				break main;
			} catch (Exception e) {
				Thread.sleep(1000);
				if (time == seconds) {
					logger.error("Failed to click element " + message);
					extent.extentLoggerFail("failedClickElement", "Failed to click element " + message);
				}
			}
		}
	}

//	public void WEBPWAValidatingSubscribeLinks(String userType) throws Exception {
//		extent.HeaderChildNode(" Validating Subscription Link");
//		Thread.sleep(10000);
//		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
//		waitTime(2000);
//		type(PWASearchPage.objSearchEditBox, "Bhinna", "Search Field");
//		waitTime(3000);
//		click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
//		waitTime(10000);
//		if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Close in Register Pop Up")) {
//			click(PWASearchPage.objCloseRegisterDialog, "Close in Register Pop Up");
//			logger.info("clicked on popup close button");
//			extent.extentLogger("clicked on popup close button", "clicked on popup close button");
//		} else {
//			logger.info("Register Popup not displayed");
//			extent.extentLogger("Register Popup not displayed", "Register Popup not displayed");
//		}
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//			checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
//		}
//		Thread.sleep(5000);
//		try {
//			waitForElementDisplayed(PWAHamburgerMenuPage.objGetPremiumCTAbelowPlayer, 30);
//
//			// Validating GET PREMIUM CTA BUTTON below Player
//			extent.HeaderChildNode("Validating Get Premium CTA below the player");
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumCTAbelowPlayer,
//					"GET PREMIUM CTA BELOW PLAYER ") == true) {
//				click(PWAHamburgerMenuPage.objGetPremiumCTAbelowPlayer, "GET PREMIUM CTA BELOW PLAYER");
//
//				Thread.sleep(3000);
//				extent.HeaderChildNode("Validating Get Premium Popup");
//				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
//				}
//
//			} else {
//				extent.HeaderChildNode("Validating Get Premium Popup");
//				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
//				}
//
//			}
//		} catch (Exception e) {
//			System.out.println("GetPremiumCTAbelowPlayer is not displayed");
//		}
//		waitTime(2000);
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//		}
//		click(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
//		waitTime(5000);
//		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
//			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
//		}
//
//		if(userType.equals("Guest") || userType.equals("NonSubscribedUser"))
//		{
//			extent.HeaderChildNode("Validating Player In-line Subscribe link");
//			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
//			waitTime(2000);
//			type(PWASearchPage.objSearchEditBox, "Londonalli Lambodara", "Search Field");
//			waitTime(3000);
//			click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
//			waitTime(10000);
//
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//			}
//
//			checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Player In-line Subscribe link");
//
//			waitTime(2000);
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//			}
//			click(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
//			waitTime(5000);
//
//			if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
//				click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
//			}
//			
//		}
//
//	}

	public void WEBPWAValidatingSubscribeLinks(String userType) throws Exception {
		extent.HeaderChildNode(" Validating Subscription Link");
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("Validating Player In-line Subscribe link");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2000);
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieNoTrailer2");
			mandatoryRegistrationPopUp(userType);
			type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
			waitTime(3000);
//			click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
			JSClick(PWASearchPage.objPremiumSearchResult(keyword), "Premium content");
			waitTime(10000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}

			if (checkElementDisplayed(PWAPlayerPage.objSubscribeNowLink, "Player In-line Subscribe link")) {
				System.out.println("Player In-Line Subscribe link is displayed");
				extent.extentLogger("Player In-Line Subscribe link is displayed",
						"Player In-Line Subscribe link is displayed");
			} else {
				System.out.println("Player In-Line Subscribe link is not displayed");
				extent.extentLoggerFail("Player In-Line Subscribe link is not displayed",
						"Player In-Line Subscribe link is not displayed");
			}

			waitTime(2000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "ZeeLogo");
			waitTime(5000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objWouldYouLikeWatchMorePopup,
					"WOULD YOU LIKE WATCH MORE POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objWouldYouLikeWatchMoreCloseButton,
						"POP-UP CLOSE BUTTON");
			}
		}
	}

	/**
	 * Function to enter url
	 */
	public void enterURLInWEBBrowser(String browser, String url) {
		extent.HeaderChildNode("Enter Browser URL");
		if (browser.equalsIgnoreCase("chrome")) {
			try {
				getWebDriver().get(url);
				extent.extentLogger("enteredURL", "Entered " + url + " in " + browser + " browser");
				logger.info("Entered " + url + " in " + browser + " browser");
			} catch (Exception e) {
				extent.extentLogger("failToEnterURL", "Failed to enter " + url + " in " + browser + " browser");
			}
		}
	}

	public void verifyUIofHomePage() throws Exception {
		extent.HeaderChildNode("Validation of UI of Homepage");
		waitTime(5000);
		String tab = getText(PWAHomePage.objActiveTab);
		System.out.println(tab);
		extent.HeaderChildNode("Validating user is landing on Homepage by default");
		if (tab.equalsIgnoreCase("Home")) {
			logger.info("Navigated to Home page");
			extent.extentLogger("Home Page", "Navigated to Home page");
		} else {
			logger.info("Not navigated to Home page");
			extent.extentLogger("Home Page", "Not navigated to Home page");
		}
		extent.HeaderChildNode("Validating Zee Logo on Homepage");
		verifyElementPresent(PWAHomePage.objZeeLogo, "Zee Logo");
		extent.HeaderChildNode("Validating Search button on Homepage");
		verifyElementPresent(PWAHomePage.objSearchBtn, "Search button");
		extent.HeaderChildNode("Validating Language Selection option on Homepage");
		checkElementDisplayed(PWAHomePage.objLanguageBtn, "Language Selection Button");
		extent.HeaderChildNode("Validating Subscribe button on Homepage");
		checkElementDisplayed(PWAHomePage.objSubscribeBtn, "Subscribe button");
		extent.HeaderChildNode("Validating Hamburger menu on Homepage");
		verifyElementPresent(PWAHomePage.objHamburgerMenu, "Hamburger menu");
		extent.HeaderChildNode("Validating Login button on Homepage");
		checkElementDisplayed(PWALoginPage.objWebLoginBtn, "Login button");
		extent.HeaderChildNode("Validating Sign Up for free button on Homepage");
		checkElementDisplayed(PWALoginPage.objSignUpBtnWEB, "Sign Up for free");
	}

	public void verifyLiveTvAndChannelGuideScreen() throws Exception {
		extent.HeaderChildNode("Validation of UI of Live Tv and Channel Guide");
		waitTime(15000);
		System.out.println(getText(PWAHomePage.objActiveTab));
		// validateDisplayLanguagePopup();
		partialScroll();
		waitTime(2000);
		if (checkElementDisplayed(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab")) {
			click(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab");
		} else if (checkElementDisplayed(PWAHomePage.objMoreMenuIcon, "More Menu Icon") == true) {
			verifyElementPresentAndClick(PWAHomePage.objMoreMenuIcon, "More Menu Icon");
			waitTime(5000);
			verifyElementPresent(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
			click(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
		} else {
			click(PWALiveTVPage.objLiveTVMenu, "Live TV Tab");
		}

		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		String channelTitle;
		channelTitle = getWebDriver().findElement(PWALiveTVPage.objLiveChannelCardTitle).getText();
		System.out.println(channelTitle);
		extent.HeaderChildNode(
				"Validating that user is navigated to respective Live Channel consumption screen post tapping on Live Channel Card");
		verifyElementPresentAndClick(PWALiveTVPage.objLiveChannelCardProgressBar, "Live Channel Card");
		waitTime(5000);
		if (checkElementDisplayed(PWALiveTVPage.objGoHomeLink, "GO HOME ") == true) {
			BackButton(1);
			Thread.sleep(5000);
			channelTitle = getWebDriver().findElement(PWALiveTVPage.objLiveChannelCardTitle1).getText();
			System.out.println(channelTitle);
			verifyElementPresentAndClick(PWALiveTVPage.objLiveChannelCard1, "Live Channel Card");
		}
		String playerPageChannelTitle = getWebDriver().findElement(PWALiveTVPage.objLiveChannelConsumptionPageTitle)
				.getText();
		System.out.println(playerPageChannelTitle);
		if (channelTitle.equalsIgnoreCase(playerPageChannelTitle)) {
			softAssert.assertEquals(channelTitle.equalsIgnoreCase(playerPageChannelTitle), false,
					"Navigated to respective Live Channel Consumption screen");
			logger.info("Navigated to respective Live Channel Consumption screen");
			extent.extentLogger("Live Channel Page", "Navigated to respective Live Channel Consumption screen");
		} else {
			softAssert.assertEquals(true, true, "Not navigated to respective Live Channel Consumption screen");
			softAssert.assertAll();
			logger.info("Not navigated to respective Live Channel Consumption screen");
			extent.extentLogger("Live Channel Page", "Not navigated to respective Live Channel Consumption screen");
		}
		waitTime(2000);
		BackButton(1);
		waitTime(5000);
		extent.HeaderChildNode("Validating Live Tv Language Filter Option");
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTvFilterOption, "Live TV Language Filter");
		verifyElementPresentAndClick(PWALiveTVPage.objHindiFiltrOptn, "Language Filter");
		String selectedLanguage = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
		System.out.println(selectedLanguage);
		verifyElementPresentAndClick(PWALiveTVPage.objResetBtn, "Reset Button");
		String selectedLang2 = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
		System.out.println(selectedLang2);
		verifyElementPresentAndClick(PWALiveTVPage.objApplyBtn, "Apply Button");
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideToggle, "Channel Guide Toggle");
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTVToggleInactive, "Live TV Toggle");
		extent.HeaderChildNode("Validating UI of Channel Guide Screen");
		click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide Toggle");
		checkElementDisplayed(PWALiveTVPage.objChannelDayStrip, "Channel/Day Strip");
		JSClick(PWALiveTVPage.objChannelDayStrip, "Channel/Day Strip");
		JSClick(PWALiveTVPage.objUpcomingLiveProgramDate, "Upcoming Live Program Date");
		extent.HeaderChildNode("Validating Channel Guide Sort Option");
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideSortOption, "Sort Option");
		verifyElementPresent(PWALiveTVPage.objSortByPopularity, "Sort By Popularity Option");
		verifyElementPresent(PWALiveTVPage.objSortByAZ, "Sort by A-Z Option");
		extent.HeaderChildNode("Validating Channel Guide Filter Option");
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideFilterOption, "Filter Option");
		verifyElementPresentAndClick(PWALiveTVPage.objHindiFiltrOptn, "Language Filter");
		String selectedLang = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
		System.out.println(selectedLang);
		verifyElementPresentAndClick(PWALiveTVPage.objResetBtn, "Reset Button");
		String selectedLang1 = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
		System.out.println(selectedLang1);
		verifyElementPresentAndClick(PWALiveTVPage.objApplyBtn, "Apply Button");
		waitTime(10000);
		extent.HeaderChildNode("Validating share functionality for Upcoming Live Program");
//		verifyElementPresentAndClick(PWALiveTVPage.objUpcomingLiveProgram, "Upcoming Live Program");
		verifyElementPresent(PWALiveTVPage.objUpcomingLiveProgram, "Upcoming Live Program");
		waitTime(3000);
		JSClick(PWALiveTVPage.objUpcomingLiveProgram, "Upcoming Live Program");
		waitTime(10000);
		verifyElementPresentAndClick(PWALiveTVPage.objUpcomingLiveProgramShareBtn, "Share button");
		waitTime(3000);
		verifyElementPresentAndClick(PWALiveTVPage.objFacebookShareBtn, "Share to Facebook");
		waitTime(3000);
		verifyAlert();
		switchToWindow(2);
		if (!checkElementDisplayed(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook")) {
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookEmailField, "Facebook Email field");
			getWebDriver().findElement(PWALiveTVPage.objFacebookEmailField).sendKeys("helloigs6@gmail.com");
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookPasswordField, "Facebook Password field");
			getWebDriver().findElement(PWALiveTVPage.objFacebookPasswordField).sendKeys("hello@12345");
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookLoginBtn, "Facebook Login button");
			waitTime(4000);
		}
		verifyElementPresentAndClick(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook");
		waitTime(7000);
		acceptAlert();
		waitTime(3000);
		switchToParentWindow();
		waitTime(3000);
		if (checkElementDisplayed(PWALiveTVPage.objUpcomingLiveProgramCloseBtn, "Popup Close Button")) {
			verifyElementPresentAndClick(PWALiveTVPage.objUpcomingLiveProgramCloseBtn, "Popup Close Button");
		}
		waitTime(3000);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
	}

	// ---------------------------------------------------------------

	// Sushma

	public void searchResultScreen(String title) throws Exception {

		searchEpisode("Anika tries to be careful");
		searchMovie("Gooli");
		searchShow("The toy box");
		searchActive();
		extent.HeaderChildNode("Validating that user is able to enter keys in search box.");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		extent.HeaderChildNode(
				"Validating that search result screen is displayed once user enters 3rd character in the search box.");
		String enteredValue = getAttributValue("value", PWASearchPage.objSearchEditBox);
		if (enteredValue.length() >= 3) {
			if (checkElementDisplayed(PWASearchPage.objSearchResultScreen, "Search result screen")) {
				logger.info("Search result screen is displayed once user enters 3rd character in the search box.");
				extent.extentLogger("Search result screen",
						"Search result screen is displayed once user enters 3rd character in the search box.");
			} else {
				logger.info("Search result screen is not displayed");
				extent.extentLogger("Search result screen",
						"Search result screen is not displayed when user enters less than 3 characters in the search box.");
			}
		} else {
			logger.info(
					"Search result screen is not displayed when user enters less than 3 characters in the search box.");
		}
		waitTime(10000);

		extent.HeaderChildNode("Validating that related search results are available under each tabs");

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Shows"), "Shows Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Episodes"), "Episodes Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Movies"), "Movies Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("News"), "News Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Music"), "Music Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Videos"), "Videos Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
	}

	public void searchEpisode(String title) throws Exception {
		HeaderChildNode("Validating that search result displayed when user search for episode");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		if (!checkElementDisplayed(PWASearchPage.objVoiceSearchButton, "Mic")) {
			logger.info("Voice search icon is not present while search result is present");
			extent.extentLogger("Mic", "Voice search icon is not present while search result is present");
		}
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Episodes"), "Episodes Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		clearField(PWASearchPage.objSearchEditBox, "Search field");
	}

	public void searchShow(String title) throws Exception {
		HeaderChildNode("Validating that search result displayed when user search for show");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Shows"), "Shows Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		clearField(PWASearchPage.objSearchEditBox, "Search field");
	}

	public void searchMovie(String title) throws Exception {
		HeaderChildNode("Validating that search result displayed when user search for Movie");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Movies"), "Movies Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		clearField(PWASearchPage.objSearchEditBox, "Search field");
	}

	public void searchActive() throws Exception {
		HeaderChildNode("Validating Search result displayed when user search for Active Program");
		Back(1);
		waitTime(5000);
		// partialScroll();
		waitTime(2000);
		if (checkElementDisplayed(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab")) {
			click(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab");
		} else if (checkElementDisplayed(PWAHomePage.objMoreMenuIcon, "More Menu Icon") == true) {
			verifyElementPresentAndClick(PWAHomePage.objMoreMenuIcon, "More Menu Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
		} else {
			click(PWALiveTVPage.objLiveTVMenu, "Live TV Tab");
		}
		waitforLiveTabToLoad();
		checkElementDisplayed(PWALiveTVPage.objCardTitle, "Active program");
		String ActiveProgram = getText(PWALiveTVPage.objCardTitle);
		logger.info("Active program fetched from Live TV : " + ActiveProgram);
		extent.extentLogger("Result", "Active program fetched from Live TV : " + ActiveProgram);
		click(PWAHomePage.objZeelogo1, "Home page");
		waitTime(3000);
		click(PWAHomePage.objSearchBtn, "Search");
		type(PWASearchPage.objSearchEditBox, ActiveProgram, "Edit field");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		if (checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result")) {
			logger.info("Active program Search result is present in all tab");
			extent.extentLogger("Result", "Active program Search result is present in all tab");
		} else {
			logger.error("Active program Search result is not present in all tab");
			extent.extentLoggerFail("Result", "Active program Search result is not present in all tab");
		}
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("News"), "News Tab");
		if (checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result")) {
			logger.info("Search result is present in news tab");
			extent.extentLogger("Result", "Search result is present in news tab");
		} else {
			logger.info("Search result is not present in news tab");
			extent.extentLogger("Result", "Search result is not present in news tab");
		}
		clearField(PWASearchPage.objSearchEditBox, "Search field");
	}

	public void landingOnSearchScreen() throws Exception {
		extent.HeaderChildNode("Validating that user lands on search landing screen");

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		if (checkElementDisplayed(PWASearchPage.objSearchEditBox, "Search EditBox")) {
			logger.info("User landed on Search landing screen post tapping on search icon");
			extent.extentLogger("Search landingscreen",
					"User landed on Search landing screen post tapping on search icon");
		}

		extent.HeaderChildNode("Validating that voice search icon is displayed on Search box ( Microphone icon)");

		checkElementDisplayed(PWASearchPage.objVoiceSearchButton, "Voice Search icon");
	}

	public void liveTv(String title) throws Exception {
		extent.HeaderChildNode(
				"Validating that Live TV card is displayed when user searches by any On Going Live TV content name");
		waitTime(3000);

		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		waitTime(10000);
		if (checkElementDisplayed(PWALiveTVPage.objLivelogo, "Live logo")) {
			logger.info("Live Tv card is displayed");
			extent.extentLogger("Live Tv card", "Live Tv card is displayed");
		} else {
			logger.info("Live Tv card is not displayed");
			extent.extentLogger("Live Tv card", "Live Tv card is not displayed");
		}
		waitTime(3000);
		click(PWALiveTVPage.objLivelogo, "Live logo");
		waitTime(10000);
		Back(1);
		waitTime(5000);
		extent.HeaderChildNode("Validating that the Recent Searches overlay is available on Search landing screen");
		checkElementDisplayed(PWASearchPage.objRecentSearchesOverlay, "Recent Searches overlay");
	}

	public void navigationToConsumptionScreenThroughTrendingSearches(String userType) throws Exception {

		extent.HeaderChildNode("Navigation to Consumption Screen through Trending Searches");
		waitTime(3000);
		mandatoryRegistrationPopUp(userType);
		if (verifyElementPresent(PWASearchPage.objTrendingSearchesTray, "Trending Searches tray")) {

			checkElementDisplayed(PWASearchPage.objFirstAssetThumbnailTrendingSearch,
					"First asset thumbnail of Trending searches tray");

			checkElementDisplayed(PWASearchPage.objFirstAssetTitleTrendingSearch,
					"First asset title of Trending searches tray");

			if (checkElementDisplayed(PWAPlayerPage.objCloseBtnLoginPopup, "Login Pop-up")) {
				click(PWAPlayerPage.objCloseBtnLoginPopup, "Login Pop-up");
			}

			String searchScreenTitle = getElementPropertyToString("innerText",
					PWASearchPage.objFirstAssetTitleTrendingSearch, "FirstAssetTitleTrending Search");
			System.out.println(searchScreenTitle);
			click(PWASearchPage.objFirstAssetThumbnailTrendingSearch,
					"First asset thumbnail of Trending searches tray");
			waitTime(6000);
			waitTime(6000);

			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Register popup")) {
				waitTime(2000);
				click(PWAPlayerPage.objCloseRegisterDialog, "Register popup close icon");
			}

			if (checkElementDisplayed(CompleteYourProfilePopUp.objCompleteYourProfileTxt,
					"Complete Your Profile pop up")) {
				click(CompleteYourProfilePopUp.objCloseBtn, "Complete your profile popup Close Button");

			}

			if (checkElementDisplayed(PWAPlayerPage.subscribePopUp, "Subscription popup")) {
				waitTime(3000);
				click(PWAPlayerPage.ObjSubscriptionpopupCloseIcon, "Subscription popup close icon");
			}

			if (checkElementDisplayed(PWASearchPage.objShowTitleInConsumptionPage, "Show title In Consumption")) {
				String ConsumptionScreenShowTitle = getText(PWASearchPage.objShowTitleInConsumptionPage);
				waitTime(3000);
				System.out.println(searchScreenTitle + " " + ConsumptionScreenShowTitle);
				if (searchScreenTitle.contains(ConsumptionScreenShowTitle)) {
					logger.info("user is navigated to respective consumption screen");
					extent.extentLogger("Consumption Screen", "user is navigated to respective consumption screen");
				} else {
					logger.info("user is not navigated to respective consumption screen");
					extent.extentLogger("Consumption Screen", "user is navigated to respective consumption screen");
				}
			} else {
				String showtitle = getText(PWASearchPage.objShowTitle(searchScreenTitle));
				waitTime(3000);

				if (searchScreenTitle.contains(showtitle)) {
					logger.info("user is navigated to respective consumption screen");
					extent.extentLogger("Consumption Screen", "user is navigated to respective consumption screen");
				} else {
					logger.info("user is not navigated to respective consumption screen");
					extent.extentLogger("Consumption Screen", "user is navigated to respective consumption screen");
				}
			}
		} else {
			logger.info("Trending searched tray is not displayed");
			extent.extentLogger("Search Screen", "Trending searched tray is not displayed");
		}
		Back(1);
	}

	public String fetchLiveContent() throws Exception {
		extent.HeaderChildNode("Fetching the Live Content name from Live Tab");

		getWebDriver().get(URL);
		waitTime(5000);
		partialScroll();
		waitTime(2000);
		if (checkElementDisplayed(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab")) {
			click(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab");
		} else if (checkElementDisplayed(PWAHomePage.objMoreMenuIcon, "More Menu Icon") == true) {
			verifyElementPresentAndClick(PWAHomePage.objMoreMenuIcon, "More Menu Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
		} else {
			click(PWALiveTVPage.objLiveTVMenu, "Live TV Tab");
		}

		waitTime(15000);
		String liveTVContentName = getText(PWALiveTVPage.objCardTitle);
		System.out.println(liveTVContentName);

		return liveTVContentName;

	}

	/**
	 * Function to Onboarding scenarios to their respective Test scenario.
	 */
	public void OnboardingScenario(String userType) throws Exception {
		switch (userType) {
		case "Guest":
			extent.HeaderChildNode("Guest user ");
			launchCheck(userType);
			navigationToMyPlanFromHome("NewRegister");
			navigationToMyPlanFromHome("Logged in");
			playerInLineLoginCheck();
			navigationToCTAInPlayerFromSearch(userType);
			if (checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
				extent.extentLogger("Not Logged in", "User is not logged in");
				logger.info("User is not logged in");
				noLogoutOption();
				forgotPassword();
				waitTime(5000);
				getWebDriver().get(URL);
				waitTime(8000);
				if (!checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
					logout();
				}
				waitTime(4000);
				// SANITY
				phoneNumberRegistration();
				// emailRegistration();
				facebookLogin();
//				twitterLogin();
				forgotPasswordEmail();
				forgotPasswordMobileNumber();
			}
			break;
		case "NonSubscribedUser":
			extent.HeaderChildNode("Non-Subscribed user ");
			waitTime(3000);
			launchCheck(userType);
			myaccountOptionsVerification();
			NavigateToMyProfilePage();
			verificationsInMyProfilePage();
			editProfileFuncionality();
			subscribeCTAFuncionality();
			changePasswordFuncionality();
			break;
		case "SubscribedUser":
			extent.HeaderChildNode("Subscribed user ");
			waitTime(3000);
			launchCheck(userType);
			myaccountOptionsVerification();
			NavigateToMyProfilePage();
			verificationsInMyProfilePage();
			editProfileFuncionality();
			myPlanVerification();
			changePasswordFuncionality();
		}
	}

	/**
	 * Function To check the SignIn page from MyPlans screen.
	 */
	public void navigationToMyPlanFromHome(String UserType) throws Exception {
		extent.HeaderChildNode(
				"Validating user navigated to signin screen from my plans screen through logged in and NewRegister email id");
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Get Premium button");
		waitTime(3000);
		if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
			logger.info("User is navigated to Subscription page");
			extent.extentLogger("Subscription page", "User is navigated to Subscription page");
			if (UserType == "Logged in") {
				navigationToSignInFromMyplans("Logged in");
			}
			if (UserType == "NewRegister") {
				navigationToSignInFromMyplans("NewRegister");
			}
		} else {
			logger.info("User is not navigated to Subscription page");
			extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
		}
	}

	public void playerInLineLoginCheck() throws Exception {
		extent.HeaderChildNode("Login page check from Player Inline popup");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieNoTrailer2");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(6000);
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		click(PWASearchPage.objPremiumSearchResult(keyword), "Premium content");
		waitTime(12000);
		if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
			click(PWAPremiumPage.objClosePremiumPopup, "close button");
		}
		verifyElementPresent(PWASubscriptionPages.objLoginLinkInPlayer, "Login link");
		JSClick(PWASubscriptionPages.objLoginLinkInPlayer, "Login link");
		waitTime(8000);
		if (checkElementDisplayed(PWALoginPage.objEmailField, "Login")) {
			logger.info("User is redirected to login page");
			extent.extentLogger("Login", "User is redirected to login page");
		}
		Back(1);
		waitTime(8000);
		if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
			click(PWAPremiumPage.objClosePremiumPopup, "close button");
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
	}

	public void gmailLogin() throws Exception {
		extent.HeaderChildNode("Login through Gmail");
		// verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger
		// menu");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login button");
		System.out.println(getWebDriver().getCurrentUrl());
		System.out.println(getWebDriver().getWindowHandles());
		checkElementDisplayed(PWALoginPage.objGoogleIcon, "Google Icon");
		Actions act = new Actions(getWebDriver());
		act.click(getWebDriver().findElement(By.id("gbtn"))).build().perform();
		waitTime(1000);
		act.click(getWebDriver().findElement(By.id("gbtn"))).build().perform();
		waitTime(10000);
		System.out.println(getDriver().getWindowHandles());
		getDriver().switchTo().window("CDwindow-2");
		waitTime(4000);
		if (checkElementDisplayed(PWALoginPage.objGmailEmailField, " Email Field")) {
			type(PWALoginPage.objGmailEmailField, "newzee5igs@gmail.com", "Emial Field");
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objGmailNextButton, "clicked on next button");
			waitTime(3000);
			verifyElementPresent(PWALoginPage.objGmailPasswordField, " Password Field");
			type(PWALoginPage.objGmailPasswordField, "User@123", "Password Field");
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objGmailNextButton, "clicked on next button");
			waitTime(7000);
			getDriver().switchTo().window("CDwindow-0");
			String url = getDriver().getCurrentUrl();
			System.out.println(url);
			if (url.contains("https://accounts.google.com")) {
				getDriver().switchTo().window("CDwindow-0");
				logger.info("Google verification page displayed");
				extent.extentLogger("Otp", "Google verification page displayed");
				Back(1);
			} else {
				getDriver().switchTo().window("CDwindow-0");
				if (checkElementDisplayed(PWALoginPage.objLoginTxt, "Login text")) {
					logger.info("Google verification page displayed");
					extent.extentLogger("Login", "Google verification page displayed");
					Back(1);
					verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
						click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Close button");
						logout();
					}
				} else {
					verifyElementPresent(PWAHomePage.objZeeLogo, "Zee logo");
					verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
						click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Close button");
						logout();
					}

				}
			}
		}
	}

	/**
	 * Function To check That user is logged in succesfully and Login,SignUP ption
	 * is not displayed for Logged in user.
	 */
	public void verificationOfLoggedIn() throws Exception {
		extent.HeaderChildNode("Verification of Logged in");
		System.out.println("verificationOfLoggedIn");
		waitTime(3000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon")) {
			logger.info("User is logged in successfully");
			extent.extentLogger("Profile icon", "User is logged in successfully");
		}
		if (!(checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login"))) {
			logger.info("Login button is not displayed");
			extent.extentLogger("Login Button", "Login button is not displayed for logged in user");
		}
		if (!(checkElementDisplayed(PWALoginPage.objSignUpBtnWEB, "SignUp"))) {
			logger.info("Sign Up button is not displayed");
			extent.extentLogger("Sign Up Button", "SignUp button is not displayed for logged in user");
		}
	}

	/**
	 * Generic function Verification Of Options displayed in MyAccount.
	 */
	public void myaccountOptionsVerification() throws Exception {
		extent.HeaderChildNode("My account options verification");
		System.out.println("myaccountOptionsVerification");
		waitTime(7000);

		verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
		JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");

		waitTime(7000);
		// verifications
		NavigationsToMySubsccription();
		NavigationsToMyWatchlist();
		NavigationsToMyReminders();
		NavigationsToMyTransactions();

	}

	/**
	 * Function for Navigation to MyWatchlist .
	 */
	public void NavigationsToMyWatchlist() throws Exception {
		extent.HeaderChildNode("My Watchlist in Profile Page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My watchlist");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My watchlist");
		waitTime(4000);
		// verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My
		// Watchlist"), "My Watchlist page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Watchlist page");
		JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * Function for Navigation to MyReminders .
	 */
	public void NavigationsToMyReminders() throws Exception {
		extent.HeaderChildNode("My Reminders in Profile Page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Reminders"), "My Reminders");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Reminders"), "My Reminders");
		waitTime(4000);
		// verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My
		// Reminders"), "My Reminders page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Remainders page");
		JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * Function for Navigation to My Subscription.
	 */
	public void NavigationsToMySubsccription() throws Exception {
		extent.HeaderChildNode("My subscriptions in Profile Page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
		waitTime(4000);
		// verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My
		// Subscription"), "My Subscription page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Subscription page");
		JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * Function for Navigation to MyTransaction.
	 */
	public void NavigationsToMyTransactions() throws Exception {
		extent.HeaderChildNode("My Transactions in Profile Page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
		waitTime(4000);
		// verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My
		// Transactions"), "My Transactions page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Transaction page");
		JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * Function for Navigation to MyProfilePage.
	 */
	public void NavigateToMyProfilePage() throws Exception {
		extent.HeaderChildNode("Navigate To MyProfile Page");
		System.out.println("NavigateToMyProfilePage");
		verifyElementPresent(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon");
		JSClick(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
		JSClick(PWAHamburgerMenuPage.objProfileTextWEB, "profile");
	}

	/**
	 * Function To Verifing the options present in MyProfilePage.
	 */
	public void verificationsInMyProfilePage() throws Exception {
		extent.HeaderChildNode("verifications In MyProfile Page");
		System.out.println("verificationsInMyProfilePage");
		verifyElementPresent(PWAHamburgerMenuPage.objProfilePageNameTxtWEB, "User name");
		verifyElementPresent(PWAHamburgerMenuPage.objProfilePageUserIdTxt, "User id");
		verifyElementPresent(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		verifyElementPresent(PWAHamburgerMenuPage.objChangePasswordBtn, "Change password button");
	}

	/**
	 * Function To check the Functionality of EditProfile option .
	 */

	public void editProfileFuncionality() throws Exception {
		extent.HeaderChildNode("Edit Profile Funcionality");
		System.out.println("editProfileFuncionality");
		waitTime(6000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileTextWEB, "edit profile page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objEditProfileFirstName, "First name column");
		clearField(PWAHamburgerMenuPage.objEditProfileFirstName, "email field");
		type(PWAHamburgerMenuPage.objEditProfileFirstName, "Zee5", "Editprofile first name");
		String firstName = findElement(PWAHamburgerMenuPage.objEditProfileFirstName).getAttribute("value");
		System.out.println(firstName);
		if (firstName.contains("Zee5")) {
			logger.info("User can edit in Edit profile screen");
			extent.extentLogger("Edit", "User can edit in Edit profile screen");
		} else {
			logger.info("User edit functionality in Edit profile screen failed");
			extent.extentLoggerFail("Edit", "User edit functionality in Edit profile screen failed");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "save changes");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "go back button");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
	}

	/**
	 * Function To check the Funcionality of SubscribeCTA option.
	 */
	public void subscribeCTAFuncionality() throws Exception {
		extent.HeaderChildNode("subscribe CTA Funcionality");
		System.out.println("subscribeCTAFuncionality");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscritionBtn, "Subscribe cta")) {
			verifyElementPresent(PWALoginPage.objsubscription, "subscriptions page");
			// BackButton(1);
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
		} else {
			logger.info("Subscribe Cta is not displayed");
			extent.extentLoggerFail("CTA", "Subscribe Cta is not displayed");
		}
	}

	/**
	 * Function To check the Functionality of ChangePassword option.
	 */
	public void changePasswordFuncionality() throws Exception {
		extent.HeaderChildNode("change Password Funcionality");
		System.out.println("changePasswordFuncionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objChangePasswordBtn, "change password button");
		verifyElementPresent(PWAHamburgerMenuPage.objChangePasswordTextWEB, "change password page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objChangeOldPassword, "password field");
		type(PWAHamburgerMenuPage.objChangeOldPassword, "User@123", "Current password field");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objNewPassword, "new password field");
		type(PWAHamburgerMenuPage.objNewPassword, "igszee5", "new password field");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objNewPassword, "confirm password field");
		type(PWAHamburgerMenuPage.objConfirmNewPassword, "igszee5", "Current confirm field");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objUpdatePasswordBtnHighlighted, "Update password button");
		waitTime(2000);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		waitTime(5000);
	}

	/**
	 * Generic function to Logout.
	 */
	public void logout() throws Exception {
		verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
		JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		// click(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("Logout"), "Logout option");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("Logout"), "Logout option");
		waitTime(5000);
		if (verifyElementPresent(PWALoginPage.objLoginBtnWEB, "Logout")) {
			logger.info("User successfuly logged out");
			extent.extentLogger("Log out", "User successfuly logged out");
		}
		click(PWAHomePage.objZeeLogo, "Home page");
	}

	/**
	 * Function To check the Funcionality of MyPlan option.
	 */
	public void myPlanVerification() throws Exception {
		extent.HeaderChildNode("My Plan Verification");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objMyplanText, "My plan")) {
			verifyElementPresent(PWAHamburgerMenuPage.objMyActivePlan, "My active plan");
			verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
		} else {
			logger.info("My plan is not displayed");
			extent.extentLoggerFail("My plan", "My plan is not displayed");
		}

	}

//	/**
//	 * Function To check the SignIn page from MyPlans screen.
//	 */
//	public void navigationToMyPlanFromHome() throws Exception {
//		extent.HeaderChildNode("Validating user navigated to signin screen from my plans screen");
//		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
//		waitTime(3000);
//		if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "subscription page")) {
//			logger.info("User is navigated to Subscription page");
//			extent.extentLogger("Subscription page", "User is navigated to Subscription page");
//			navigationToSignInFromMyplans();
//		}
//
//		else {
//			logger.info("User is not navigated to Subscription page");
//			extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
//
//		}
//	}

	/**
	 * Function To check the SignIn page from MyPlans screen.
	 */
	public void navigationToSignInFromMyplans(String Usertype) throws Exception {
		// Swipe("UP", 1);
		scrollDownWEB();
		if (checkElementDisplayed(PWASubscriptionPages.objadhocPopupArea, "Adoric Popup")) {
			click(PWASubscriptionPages.objadhocPopupSignUpBtn, "Adoric Popup SignUP Button");
			waitTime(4000);
			verifyElementPresent(PWASubscriptionPages.objadhocPopupRegestrationScreen, "Sign up page");
			waitTime(3000);
			Back(1);
			scrollDownWEB();
			verifyElementPresentAndClick(PWASubscriptionPages.objSelectedSubscriptionPlanAmount, "Subscription plan");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			waitTime(3000);
			verifyElementPresent(PWALoginPage.objEmailField, "Sign in page");
			if (Usertype == "Logged in") {
				type(PWALoginPage.objEmailField, "zee5latest@gmail.com", "Email");
				click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Continue button");
				waitTime(3000);
				checkElementDisplayed(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");
				type(PWASubscriptionPages.objPasswordField, "User@123", "Password");
				click(PWASubscriptionPages.objProceedButtonInPassword, "Continue button");
				waitTime(3000);
				if (checkElementDisplayed(PWASubscriptionPages.objAccountDetailInSubscription, "Account details")) {
					logger.info("Verified subscribe flow for logged in user");
					extent.extentLogger("Verification", "Verified subscribe flow for logged in user");
				}
			}
			if (Usertype == "NewRegister") {
				type(PWALoginPage.objEmailField, RandomStringGenerator(5) + "@gmail.com", "Email");
				click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Continue button");
				waitTime(3000);
				checkElementDisplayed(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");
				type(PWASubscriptionPages.objPasswordField, "User@123", "Password");
				click(PWASubscriptionPages.objProceedButtonInPassword, "Continue button");
				waitTime(10000);
				if (checkElementDisplayed(PWASubscriptionPages.objAccountDetailInSubscription, "Account details")) {
					logger.info("Verified subscribe flow for logged in user");
					extent.extentLogger("Verification", "Verified subscribe flow for logged in user");
				}
			}
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee logo");
			if (verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Home page")) {
				logger.info("User is navigated to Home page");
				extent.extentLogger("Home page", "User is navigated to Home page");
				logout();
			}
		} else {
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objSelectedSubscriptionPlanAmount, "Subscription plan");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			waitTime(3000);
			verifyElementPresent(PWALoginPage.objEmailField, "Sign in page");
			if (Usertype == "Logged in") {
				type(PWALoginPage.objEmailField, "zee5latest@gmail.com", "Email");
				click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Continue button");
				waitTime(3000);
				checkElementDisplayed(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");
				type(PWASubscriptionPages.objPasswordField, "User@123", "Password");
				click(PWASubscriptionPages.objProceedButtonInPassword, "Continue button");
				waitTime(4000);
				if (checkElementDisplayed(PWASubscriptionPages.objAccountDetailInSubscription, "Account details")) {
					logger.info("Verified subscribe flow for logged in user");
					extent.extentLogger("Verification", "Verified subscribe flow for logged in user");
				}
			}
			if (Usertype == "NewRegister") {
				type(PWALoginPage.objEmailField, RandomStringGenerator(5) + "@gmail.com", "Email");
				click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Continue button");
				waitTime(3000);
				checkElementDisplayed(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");
				type(PWASubscriptionPages.objPasswordField, "User@123", "Password");
				click(PWASubscriptionPages.objProceedButtonInPassword, "Continue button");
				waitTime(10000);
				if (checkElementDisplayed(PWASubscriptionPages.objAccountDetailInSubscription, "Account details")) {
					logger.info("Verified subscribe flow for New Register user");
					extent.extentLogger("Verification", "Verified subscribe flow for New Register user");
				}
			}
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee logo");
			if (verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Home page")) {
				logger.info("User is navigated to Home page");
				extent.extentLogger("Home page", "User is navigated to Home page");
				logout();
				waitTime(4000);
			}
		}
	}

	public void NavigationsToMySubscription() throws Exception {
		extent.HeaderChildNode("My Subscription");
		click(PWAHamburgerMenuPage.objDownArrow("My Account"), "Expander button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreItemBtn("My Subscription"), "My Subscriptions");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Subscription"), "My Subscription page");
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger button");
	}

	/**
	 * Function To check the SignIn page from CTA in playerscreen and Verification
	 * of SubscribePopUP.
	 */
	public void navigationToCTAInPlayerFromSearch(String userType) throws Exception {
		extent.HeaderChildNode("Validating user navigated to signin from Get Premium CTA in player");
		if (checkElementDisplayed(PWAHomePage.objLanguageChangeContentPopup(), "Language change content PopUp")) {
			click(PWAHomePage.objLanguageChangeContentPopupCloseicon(), "Language change content PopUp close icon");
		}
		waitTime(2000);
		checkElementDisplayed(PWAHomePage.objSearchBtn, "Search button");
		click(PWAHomePage.objSearchBtn, "Search button");
//		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie2");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(3000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
		waitTime(10000);
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//		}
//		waitTime(3000);
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//		}
		verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumCTAInPlater, "Get Premium CTA in player");
		waitTime(5000);
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//		}
		waitTime(3000);
		navigationToSignInFromCTAInPlayer();
//		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
	}

	/**
	 * Function To check the SignIn page from CTA in playerscreen and Verification
	 * of SubscribePopUP.
	 */
	public void navigationToSignInFromCTAInPlayer() throws Exception {
		extent.HeaderChildNode("Validating Subscription page post tapping Get Premium CTA in player");
//		verifyElementPresent(PWASubscriptionPages.objSubscribepopup, "Subscribe popup");
//		verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupPlan, "Subscribe plan");
//		verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupPlan, "Subscribe popup plan");
//		verifyElementPresent(PWASubscriptionPages.objGetPremiumPopipProceed, "Proceed button in Subscribe popup");
//		click(PWASubscriptionPages.objGetPremiumPopipProceed, "Proceed button in Subscribe popup");
		verifyElementPresentAndClick(PWASubscriptionPages.objSelectedSubscriptionPlanAmount, "Subscription plan");
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
		waitTime(4000);
		verifyElementPresent(PWALoginPage.objEmailField, "Sign in page");
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
		if (verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Home page")) {
			logger.info("User is navigated to Home page");
			extent.extentLogger("Home page", "User is navigated to Home page");
		}
	}

	/**
	 * Function To check the Funcionality of ForgotPassword option.
	 */
	public void forgotPassword() throws Exception {
		extent.HeaderChildNode("Forgot password functionality");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtnWEB, "Login button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALoginPage.objForgotPasswordTxt, "Forgot password");
		waitTime(3000);
		type(PWALoginPage.objEmailField, "Zee5latest@gmail.com", "Email field");
		// click(PWALoginPage.objForgotPasswordTxt, "forgot password Text");
		click(PWALoginPage.objForgotPasswordLinkButtonWEB, "Reset password button");
		waitTime(60000);
		String url = GmailInbox.readEmail("ZEE5 account password reset request");
		if (!url.isEmpty()) {
			getWebDriver().get(url);
			waitTime(5000);
			checkElementDisplayed(PWALoginPage.objForgotNextPageTextWEB, "Reset password page");
			type(PWALoginPage.objForgotNextPagePwsswordFielfd, "User@123", "Password");
			waitTime(5000);
			type(PWALoginPage.objForgotNextPageConfirmPasswordField, "User@123", "Confirm password");
			click(PWALoginPage.objForgotNextPageResetPaswwordButtonWEB, "Reset password");
			if (checkElementDisplayed(PWAPlayerPage.objfasterPopUp, "We are 3x faster(adhoc) popup")) {
				click(PWAPlayerPage.objfasterclosePopUp, "faster Pop up close button");
			}
			waitTime(10000);
			if (checkElementDisplayed(PWALoginPage.objLoginPageLoginBtn, "LoginButton")) {
				if (checkElementDisplayed(PWALoginPage.objEmailField, "Login page")) {
					type(PWALoginPage.objEmailField, "Zee5latest@gmail.com", "Login");
					type(PWALoginPage.objPasswordField, "User@123", "Password");
					waitTime(5000);
					click(PWALoginPage.objLoginPageLoginBtn, "LoginButton");
					waitTime(7000);
				}
				if (checkElementDisplayed(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon")) {
					logger.info("User is successfully changed password and logged in");
					extent.extentLogger("Logged in", "User is successfully changed password and logged in");
				} else {
					logger.info("User is not logged in");
					extentLoggerWarning("Logged in", "User is not logged in");
				}
			} else {
				logger.info("Reset password link expired");
				extent.extentLoggerWarning("Reset link", "Reset password link expired");
			}
		} else {
			logger.info("User is not received the mail or the mail content is read");
			extent.extentLoggerWarning("Logged in", "User is not received the mail or the mail content is read");
			logger.info("User is not logged in");
			extent.extentLoggerWarning("Logged in", "User is not logged in");
		}
	}

	/**
	 * Function To check That Logout Option is not displayed in Hamburger menu.
	 */
	public void noLogoutOption() throws Exception {
		extent.HeaderChildNode("Checking no Logout option displayed for guest user");

		if ((checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login"))) {
			logger.info("Logout option is not displayed for guest user");
			extent.extentLogger("Logout option", "Logout option is not displayed");
		}
	}

	// vinay

	// -------------------------------------------------------------------------------------------------

	// SATISH

	/**
	 * PWA Subscription Suite
	 */
	public void zeePWASubscriptionSuite(String userType) throws Exception {
		HeaderChildNode("PWA Subscription Scenarios Validation Suite");

		if (userType.equals("SubscribedUser")) {
			System.out.println();
		} else {

			zeePWASubscriptionScenariosValidation(userType, getPlatform());
			zeePWASubscriptionFlowFromHomePageHeaderSubscribeButton(userType, getPlatform());
		}
	}

	/**
	 * Guest User Subscription Flow
	 */
	public void zeePWAGuestUserSubscriptionFlow() throws Exception {
//		HeaderChildNode("PWA Subscription Flow");
		zeePWASelectPackPageValidation();
		zeePWAAccountInfoPageValidation();
		zeePWAPaymentPageValidation();
	}

	public void SubscriptionPopupScenarios(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			zeePWAVerifyNavigationToSubscriptionFlowFromSubscriptionPopupFullscreenPlayer(userType);
			zeePWAVerifySubscriptionPopupAfterTrailerPlaybackIsComplete(userType);
		}
	}

	/**
	 * Non-Subscribed User Subscription Flow
	 */
	public void zeePWANonSubscribedUserSubscriptionFlow() throws Exception {
//		HeaderChildNode("PWA Subscription Flow");
		zeePWASelectPackPageValidation();
		zeePWAPaymentPageValidation();
	}

	/**
	 * Subscription Scenarios Validation
	 */
	public void zeePWASubscriptionScenariosValidation(String userType, String platform) throws Exception {
//		HeaderChildNode("PWA Subscription Scenarios Validation");
//		if(userType.equalsIgnoreCase("Non-Subscribed")) {
//			ZeePWALogin("E-mail", userType);
//		}

		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		// Scenario no. 89
		HeaderChildNode("Navigate to Subscription Flow From Home Page Header Subcribe Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");

		waitTime(2000);
		zeeSubscriptionPageValidationAndNavigateToHomePage();

		// Scenario no. 86
		HeaderChildNode("Navigate to Subscription Flow on playing BeforeTV content");
		waitTime(2000);
		navigateToAnyScreenOnWeb("TV Shows");
		scrollToElement(PWAHomePage.objFirstContentCardOfTray("Before"));
		if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"),
				"First Content Card Of Before TV Tray")) {
			click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
			waitForElement(PWASubscriptionPages.objsubscribebtnonplayer, 40, "subscribe button on player");
			click(PWASubscriptionPages.objsubscribebtnonplayer, "subscribe button on player");
			zeeVerifyGetPremiumPopup(userType);
			waitTime(2000);
			if (userType.equalsIgnoreCase("Guest")) {
				zeeAccountInfoPageValidationAndNavigateToHomePage();
			} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				zeePaymentPageValidationAndNavigateToHomePage();
			}
		} else {
			logger.info("Clicked on " + "Get Premium CTA On MastHead Carousel");
			extent.extentLoggerFail("Scrolling till BeforeTV Rail", "BeforeTV Rail does not exist");
		}

		// Scenario no. 90,98
		HeaderChildNode("Navigate to Subscription Flow from Home Page Get Premium CTA On Carousel");
		waitTime(2000);

		if (platform.equalsIgnoreCase("Android")) {

			verifyElementPresent(PWAHomePage.objGetPremiumWeb, "Get Premium CTA on Carousel");
			clickDirectly(PWAHomePage.objGetPremiumWeb, "Get Premium CTA on Carousel");
		} else if (platform.equalsIgnoreCase("Web")) {

//			Actions action = new Actions(getWebDriver());
//			action.moveToElement(findElement(PWAHomePage.objMastheadCarouselCurrentContent)).build().perform();

			for (int i = 0; i < 5; i++) {
				try {
					waitTime(5000);
//					JSClick(PWAHomePage.objGetPremiumWeb, "CTA Button");
					JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
					executor.executeScript("arguments[0].click();", findElement(PWAHomePage.objGetPremiumWeb));
					logger.info("Clicked on " + "Get Premium CTA On MastHead Carousel");
					extent.extentLogger("clickedElement", "Clicked on " + "Get Premium CTA On MastHead Carousel");
					break;
				} catch (Exception e) {
					Thread.sleep(1000);
					logger.error(e);
				}
			}
		}

		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page");
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
		// Scenario no. 98
		zeePWAPromoCodeValidationInSelectPackPage(platform);
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");

		if (userType.equalsIgnoreCase("Guest")) {
			// Scenario no. 96
			HeaderChildNode(
					"Navigate to Subscription Flow From 'Buy Subscription/Plan' option under My plans in hamburger menu");
			waitTime(10000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Button");
			waitTime(2000);
//			validateDisplayLanguagePopup();
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Button");
//			waitTime(2000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objWebBuySubscriptionOption,
					"Buy Subscribe Option in Hamburger Menu");
			zeeSubscriptionPageValidationAndNavigateToHomePage();

			// Scenario no. 97
			HeaderChildNode(
					"Navigate to Subscription Flow From 'Have a Prepaid code' option under My plans in hamburger menu");
			waitTime(2000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Button");
			waitTime(2000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHaveAPrepaidCode,
					"Have A Prepaid Code? Option in Hamburger Menu");
			waitTime(2000);
			zeeSubscriptionPageValidationAndNavigateToHomePage();
		}

		// Scenario no. 91,92,94
//		HeaderChildNode("Navigate to Subscription Flow From Adoric Popup/Get Premium popup On Playing Premium Content");
//		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
//				.getParameter("premiumMovieNoTrailer2");
//		zeeSearchForContentAndClickOnFirstResult(keyword);
//		waitTime(2000);
//		click(PWASubscriptionPages.objsubscribebtnonplayer, "subscribe button on player");
//		zeeVerifyGetPremiumPopup(userType);
//		waitTime(2000);
//		if (userType.equalsIgnoreCase("Guest")) {
//			zeeAccountInfoPageValidationAndNavigateToHomePage();
//		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
//			zeePaymentPageValidationAndNavigateToHomePage();
//		}

		// Scenario no. 93
		HeaderChildNode("Navigate to Subscription Flow From Player In-line Subscribe link on Player");
		String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieNoTrailer2");
		zeeSearchForContentAndClickOnFirstResult(keyword1);
		waitTime(2000);
//		checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title");
//		waitTime(2000);
//		verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Popup Close Button");
//		waitTime(2000);
		verifyElementPresentAndClick(PWAPlayerPage.objSubscribeNowLink, "In-Line Subscribe Link on Player");
		zeeVerifyGetPremiumPopup(userType);
		waitTime(2000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeeAccountInfoPageValidationAndNavigateToHomePage();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePaymentPageValidationAndNavigateToHomePage();
		}

		// Scenario no. 95
		HeaderChildNode(
				"Navigate to Subscription Flow From Subscription Get premium CTA below the player at consumption screen");
		zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
		waitTime(2000);
		waitForElementAndClick(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, 30,
				"Get Premium Link below the Player");
		waitTime(2000);
		zeeVerifyGetPremiumPopup(userType);
		waitTime(2000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeeAccountInfoPageValidationAndNavigateToHomePage();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePaymentPageValidationAndNavigateToHomePage();
		}
	}


	/**
	 * Search For Content And Click On First Result
	 */
	public void zeeSearchForContentAndClickOnFirstResult(String contentName) throws Exception {
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		type(PWASearchPage.objSearchEditBox, contentName + "\n", "Search bar");
		waitTime(5000);
		waitForElementDisplayed(PWASearchPage.objFirstSearchedAssetTitle, 20);
		waitTime(5000);
		String FirstSearchedAssetTitle = findElement(PWASearchPage.objFirstSearchedAssetTitle).getText();
		click(PWASearchPage.objFirstSearchedAssetTitle, "First Searched Asset Title: " + FirstSearchedAssetTitle);
	}

	/**
	 * PWA Subscription Page Validation
	 */
	public void zeeSubscriptionPageValidationAndNavigateToHomePage() throws Exception {
		HeaderChildNode("PWA Subscription Page Validation and Navigate to Home Page");

		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page");
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
	}

	/**
	 * PWA Account Info Page Validation
	 */
	public void zeeAccountInfoPageValidationAndNavigateToHomePage() throws Exception {
		HeaderChildNode("PWA Account Info Page Validation and Navigate to Home Page");

		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");

	}

	/**
	 * PWA Payment Page Validation
	 */
	public void zeePaymentPageValidationAndNavigateToHomePage() throws Exception {
		HeaderChildNode("PWA Payment Page Validation and Navigate to Home Page");
		
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");

	}

	/**
	 * Verify Get Premium Popup
	 */

	public void zeeVerifyGetPremiumPopup(String userType) throws Exception {
			HeaderChildNode("Verify Subscription Page");
			//waitTime(2000);
			//checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title");
			waitTime(2000);
			verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
			waitTime(2000);
			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount1, "499 Plan");
			waitTime(2000);
			verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Continue Button");
		}

	/**
	 * Subscription Flow From Home Page Header Subscribe Button Line No 89
	 */
	public void zeePWASubscriptionFlowFromHomePageHeaderSubscribeButton(String userType, String platform)
			throws Exception {
		HeaderChildNode("PWA Subscription Flow From Home Page Header Subcribe Button");

		// Scenario no. 89
		waitTime(5000);
		click(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
//		driver.findElement(PWAHomePage.objSubscribeButton).click();			
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAGuestUserSubscriptionFlow();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWANonSubscribedUserSubscriptionFlow();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From Home Page Get Premium CTA on Carousel Line No 90
	 */
	public void zeePWASubscriptionFlowFromHomePageGetPremiumCTAOnCarousel(String userType, String platform)
			throws Exception {
		HeaderChildNode("PWA Subscription Flow From Home Page Get Premium CTA On Carousel");

		// Scenario no. 90
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objGetPremium, "Get Premium CTA on Carousel");
		clickDirectly(PWAHomePage.objGetPremium, "Get Premium CTA on Carousel");
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAGuestUserSubscriptionFlow();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWANonSubscribedUserSubscriptionFlow();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From Adoric Popup Line No 91 Subscription Flow From
	 * Subcribe Button On Playing Premium Content Line No 92 Subscription Flow From
	 * Subscribe popup on playing Before TV content Line No 94
	 */
	public void zeePWASubscriptionFlowFromGetPremiumPopupOnPlayingPremiumContent(String userType, String platform)
			throws Exception {
		HeaderChildNode("PWA Subscription Flow From Adoric Popup/Get Premium popup On Playing Premium Content");

		// Scenario no. 91,92,94
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieNoTrailer2");
		zeeSearchForContentAndClickOnFirstResult(keyword);
		zeeVerifyGetPremiumPopup();
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAAccountInfoPageValidation();
			zeePWAPaymentPageValidation();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWAPaymentPageValidation();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From Player In-line Subscribe link Line No 93
	 */
	public void zeePWASubscriptionFlowFromPlayerInlineSubscribelink(String userType, String platform) throws Exception {
		HeaderChildNode("PWA Subscription Flow From Player In-line Subscribe link on Player");

		// Scenario no. 93
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieNoTrailer2");
		zeeSearchForContentAndClickOnFirstResult(keyword);
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title");
		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Popup Close Button");
		waitTime(5000);
		verifyElementPresentAndClick(PWAPlayerPage.objSubscribeNowLink, "In-Line Subscribe Link on Player");
		zeeVerifyGetPremiumPopup();
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAAccountInfoPageValidation();
			zeePWAPaymentPageValidation();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWAPaymentPageValidation();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From Subscription Get premium CTA below the player at
	 * consumption screen Line No 95
	 */
	public void zeePWASubscriptionFlowFromSubscriptionGetPremiumCTABelowPlayer(String userType, String platform)
			throws Exception {
		HeaderChildNode(
				"PWA Subscription Flow From Subscription Get premium CTA below the player at consumption screen");

		// Scenario no. 95
		zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
		waitTime(5000);
		verifyElementPresentAndClick(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen,
				"Get Premium Link below the Player");
		zeeVerifyGetPremiumPopup();
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAAccountInfoPageValidation();
			zeePWAPaymentPageValidation();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWAPaymentPageValidation();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From "Buy subscription" option under My plans in hamburger
	 * menu Line No 96
	 */
	public void zeePWASubscriptionFlowFromBuySubscriptionOptionUnderMyPlansInHamburgerMenu(String userType,
			String platform) throws Exception {
		HeaderChildNode("PWA Subscription Flow From Buy subscription option under My plans in hamburger menu");

		// Scenario no. 96
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Button");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objBuySubscriptionOption,
				"Buy Subscribe Option in Hamburger Menu");
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAGuestUserSubscriptionFlow();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWANonSubscribedUserSubscriptionFlow();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From " Have a Prepaid code" option under My plans in
	 * hamburger menu - Line No 97 Subscription Flow using promo codes to verify if
	 * the user is getting discounted price on plans are not - Line No 98
	 */
	public void zeePWASubscriptionFlowFromHaveAPrepaidCodeOptionUnderMyPlansInHamburgerMenu(String userType,
			String platform) throws Exception {
		HeaderChildNode("PWA Subscription Flow From 'Have a Prepaid code' option under My plans in hamburger menu");

		// Scenario no. 97
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Button");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHaveAPrepaidCode,
				"Have A Prepaid Code? Option in Hamburger Menu");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
		// Scenario no. 98
		zeePWAPromoCodeValidationInSelectPackPage(platform);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAGuestUserSubscriptionFlow();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWANonSubscribedUserSubscriptionFlow();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Promo code Validation in Select Pack Page Subscription Flow using promo codes
	 * to verify if the user is getting discounted price on plans are not - Line No
	 * 98
	 */
	public void zeePWAPromoCodeValidationInSelectPackPage(String platform) throws Exception {
		HeaderChildNode("Scenario: Promo code Validation in Select Pack Page");

		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "'Have A Code?' field");
		waitTime(3000);
		if (platform.equalsIgnoreCase("Android")) {
			type(PWASubscriptionPages.objHaveACode, "GET10" + "\n", "'Have A Code?' field");
		} else if (platform.equalsIgnoreCase("Web")) {
			type(PWASubscriptionPages.objHaveACodetoenter, "Get10", "'Have A Code?' field");
		}

		// driver.findElement(PWASubscriptionPages.objHaveACode).sendKeys("ZEE5PTM20");
		// hideKeyboard();
		waitTime(5000);
		click(PWASubscriptionPages.objApplyBtn, "Apply Button");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objAppliedSuccessfullyMessage, "Applied Successfully Message");
		String successMessage = getText(PWASubscriptionPages.objAppliedSuccessfullyMessage);
		logger.info(successMessage);
		extent.extentLogger("Success Message", successMessage + " is displayed");
	}

	/**
	 * Select Pack Page Validation
	 */
	public void zeePWASelectPackPageValidation() throws Exception {
		HeaderChildNode("Select Pack Page Validation");
		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
		waitTime(3000);
//		String selectedPackCategory = findElement(PWASubscriptionPages.objPackCategoryTabSelected).getText();
//		System.out.println("Selected Pack Category is: " + selectedPackCategory);
		waitTime(3000);
		String defaultSelectedPlan = findElement(PWASubscriptionPages.objDefaultSelectedPack).getText();
		System.out.println("Plan Selected By Default is: " + defaultSelectedPlan);
		waitTime(3000);
		//verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount1, " pack is selected");
//		ScrollToElement(PWASubscriptionPages.objContinueBtn, "Continue");
//		waitTime(3000);
//		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
//		waitTime(5000);
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "continue Button");
	//	verifyElementPresentAndClick(PWASubscriptionPages.objcontinuebtn2, "continue Button");
	}

	/**
	 * Account Info Page Validation Validate that selected pack information is
	 * displayed on left side. - Line No. 103 Validate that guest user is able to
	 * sign in/sign up from account info screen - Line No. 104
	 */
	public void zeePWAAccountInfoPageValidation() throws Exception {
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
		waitTime(3000);
		HeaderChildNode("Validate that guest user is able to sign in/sign up from account info screen");
		waitTime(3000);
		type(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com", "Email Id");
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password");
		waitTime(3000);
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		waitTime(3000);
		type(PWASubscriptionPages.objPasswordFieldHidden, "igs@12345", "Password Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
		waitTime(3000);
	}

	/**
	 * Selected Pack Display Validation Validate that selected pack information is
	 * displayed on left side. - Line No. 103
	 */
	public void zeePWASelectedPackDisplayValidation() throws Exception {
		HeaderChildNode("Validate that selected pack information is displayed on top.");

		// Scenario no. 103
		// verifyElementPresent(PWASubscriptionPages.objSelectedPackText, "Selected Pack Text");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectedPackName, "Selected Pack Name");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectedPackDuration, "Selected Pack Duration");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectedPackDescription, "Selected Pack Description");
		waitTime(3000);
	}

	/**
	 * Payment Page Validation Validate that user is navigated to Payment options
	 * screen post successful sign in/sign up - Line No. 105
	 */
	// manas
	public void zeePWAPaymentPageValidation() throws Exception {
		HeaderChildNode("Validate that user is navigated to Payment options screen post successful sign in/sign up");

		// Scenario no. 103
		checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
		zeePWASelectedPackDisplayValidation();
		checkElementDisplayed(PWASubscriptionPages.objAccountInfoDetails, "Account Info Details in Payments Section");

		waitTime(5000);
		WebElement iframeElement = null;
		if (getPlatform().equalsIgnoreCase("Android")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
			Thread.sleep(5000);
			Thread.sleep(5000);
			Thread.sleep(5000);
			getWebDriver().switchTo().frame(iframeElement);
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
			Thread.sleep(5000);
			Thread.sleep(5000);
			Thread.sleep(5000);
			getWebDriver().switchTo().frame(iframeElement);
		}

		verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
		JSClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,
				"Enter Credit/Debit Card Details");
		verifyElementPresent(PWASubscriptionPages.objCardNumber, "Enter Card Number Field");
		verifyElementPresent(PWASubscriptionPages.objExpiry, "Expiry Field");
		verifyElementPresent(PWASubscriptionPages.objCVV, "CVV Field");
		waitTime(5000);
		if (getPlatform().equals("Android")) {
			extent.HeaderChildNode("Validating the payment gateway using Paytm");
			getWebDriver().switchTo().frame(iframeElement);
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
			getWebDriver().switchTo().defaultContent();
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			extent.HeaderChildNode("Validating the payment gateway using Wallet");
			verifyElementPresent(PWASubscriptionPages.objWallets, "Wallets");
			JSClick(PWASubscriptionPages.objWallets, "Wallets");
			getWebDriver().switchTo().defaultContent();
		}

		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void navigateBackFromPayTmWalletAndLogout(String platform, String userType) throws Exception {
//		HeaderChildNode("Navigate Back from PayTm Wallet and Logout");

		waitTime(5000);
		Back(1);
		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		if (userType.equalsIgnoreCase("Guest")) {
			logout();
		}

	}

	public void ScrollToElement(By Locator, String validationText) throws Exception {

		for (int i = 1; i <= 10; i++) {
			if (verifyElementPresent(Locator, validationText) == true) {
				logger.info("Scrolled till element " + validationText);
				extent.extentLogger("Scroll to element", "Scrolled till element " + validationText);
				break;
			}
			waitTime(2000);
			swipeALittle("up", 1);
		}
	}

	public boolean scrollToElement(By element) throws Exception {
		for (int i = 1; i <= 50; i++) {
			partialScroll2();
			if (verifyElementDisplayed(element)) {
				return true;
			}
		}
		return false;
	}

	public static void partialScroll2() {
		JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
		jse.executeScript("window.scrollBy(0,500)", "");
	}

	public void swipeALittle(String dire, int count) throws Exception {

		if (dire.equalsIgnoreCase("UP")) {

			for (int j = 0; j < count; j++) {
				Dimension size = getDriver().manage().window().getSize();
				int starty = (int) (size.height * 0.40);
				int endy = (int) (size.height * 0.39);
				int startx = size.width / 2;
				// getDriver().swipe(startx, starty, startx, endy, 3000);
				touchAction.press(PointOption.point(startx, starty))
						.waitAction(WaitOptions.waitOptions(Duration.ofMillis(10000)))
						.moveTo(PointOption.point(startx, endy)).release().perform();

				logger.info("Swiping screen in " + " " + dire + " direction" + " " + (j + 1) + " times");
				extent.extentLogger("SwipeUp",
						"Swiping screen in " + " " + dire + " direction" + " " + (j + 1) + " times");

			}
		}
	}

	public void dragFromToForDuration(double durationSecond) {
		Dimension size = getDriver().manage().window().getSize();
		int starty = (int) (size.height * 0.40);
		int endy = (int) (size.height * 0.39);
		int startx = size.width / 2;

		Map<String, Object> params = new HashMap<>();
		params.put("duration", 5);
		params.put("fromX", startx);
		params.put("fromY", starty);
		params.put("toX", startx);
		params.put("toY", endy);
		getDriver().executeScript("mobile: dragFromToForDuration", params);

	}

	public void validateDisplayLanguagePopup() throws Exception {

		if (waitForElement(PWAHomePage.objDisplayLanguagePopupTitle, 20, "Display Language Popup")) {

			verifyElementPresentAndClick(PWAHomePage.objDisplayLanguagePopupOption("English"),
					"English option in Display Language popup");
			verifyElementPresentAndClick(PWAHomePage.objDisplayLanguageContinueButton,
					"Continue Button in Display Language popup");

			verifyElementPresent(PWAHomePage.objContentLanguagePopupSelectedOption("English"),
					"English option in Content Language popup");
			verifyElementPresent(PWAHomePage.objContentLanguagePopupSelectedOption("Kannada"),
					"Kannada option in Content Language popup");
			verifyElementPresentAndClick(PWAHomePage.objContentLanguagePopupUnSelectedOption("Hindi"),
					"Hindi option in Content Language popup");
			verifyElementPresentAndClick(PWAHomePage.objDisplayLanguageContinueButton,
					"Continue Button in Content Language popup");
		}

	}

	// ----------------------------------------------------------------------------------------

	// VINAY

	public void ValidatingPlayer(String userType) throws Exception {
		PlayerIconVaidationsWeb();
		playerControlOperations();
		AudioValidation();
		PlayerQuality();
		ShareFunctionality();
		WatchTrailer();
		AddToWatchListGuestUser(userType);
		// WatchCredit(userType);
		upnext(userType);
	}

	public void AddToWatchListLoggedInUser() throws Exception {
		extent.HeaderChildNode("Add to Watch List");
		// Click on Watchlist
		click(PWAPlayerPage.watchListBtn, "WatchList icon");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		// Verify the Toast message is displayed
		// verifyElementPresent(PWAAddToWatchListPage.objtoastMessage, "Added to
		// WatchList");
		// Click on My account
		click(PWAHamburgerMenuPage.objProfileIconWEB, "Profile");
		// Click on Watchlist
		click(PWAAddToWatchListPage.objMyWatchList, "Watch list");
		// Click on Movies tab
		click(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
		// Verify added Item is present in Watchlist
		checkElementDisplayed(PWAAddToWatchListPage.objContentsInWatchList, "Content in Watchlist");
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove watchlist");
		waitTime(3000);
		BackButton(1);
		waitTime(5000);
	}

	/*
	 * Function to validate the Player icons
	 */
	public void PlayerIconVaidationsWeb() throws Exception {
		String userType = getParameterFromXML("userType");
		System.out.println("PlayerIconVaidationsWeb");
		navigateToAnyScreenOnWeb("Home");
		extent.HeaderChildNode("Validating Player icons on Player");
		String movie = "Koi... Mil Gaya";
		JSClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, movie, "Search Field");
		JSClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		JSClick(PWASearchPage.objSpecificSearch(movie), "Searched content");
		mandatoryRegistrationPopUp(userType);
		waitTime(10000);
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Why Register Popup") == true) {
				click(PWAPlayerPage.objCloseBtn, "Close Register Popup");
			}
		}
		if(userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			waitForPlayerAdToComplete1("Video Player");
		}
		
//		if (verifyElementPresent(PWAPlayerPage.audioBtn, "Audio Button")) {
//			Actions actions = new Actions(getWebDriver());
//			WebElement player = getWebDriver().findElement(PWAPlayerPage.audioBtn);
//			actions.moveToElement(player).perform();
//			Thread.sleep(5000);
//			WebElement content = getWebDriver().findElement(PWAPlayerPage.objContentTitle);
//			actions.moveToElement(content).perform();
//			Thread.sleep(3000);
//		}
		
		Actions actions = new Actions(getWebDriver());
		WebElement ele = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
		actions.moveToElement(ele).perform();
//		verifyElementPresentAndClick(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
		verifyElementPresent(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon");
		actions.moveToElement(ele).perform();
//		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		verifyElementPresent(PWAPlayerPage.playBtn, "Play icon");
		actions.moveToElement(ele).perform();
//		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		verifyElementPresent(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon");
		actions.moveToElement(ele).perform();
//		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		verifyElementPresent(PWAPlayerPage.progressBar, "Progress bar");
		actions.moveToElement(ele).perform();
//		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		verifyElementPresent(PWAPlayerPage.audioBtn, "Audio icon");
		actions.moveToElement(ele).perform();
//		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total duration time");
		actions.moveToElement(ele).perform();
//		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
		actions.moveToElement(ele).perform();
//		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize window icon");
		actions.moveToElement(ele).perform();
//		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total time");
		actions.moveToElement(ele).perform();
//		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
		verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
		JSClick(PWAPlayerPage.objBestQualityOption, "Best quality");
		verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
		verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
		String SelectedOption = getText(PWAPlayerPage.objPlayerSelectedQuality);
		if (SelectedOption.contains("Best")) {
			logger.info("Best option is selected");
			extent.extentLogger("Quality", "Best option is selected");
		}
		JSClick(PWAPlayerPage.objBetterQualityOption, "Better quality");
		verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
		verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
		String SelectedOption2 = getText(PWAPlayerPage.objPlayerSelectedQuality);

		if (SelectedOption2.contains("Better")) {
			logger.info("Better option is selected");
			extent.extentLogger("Quality", "Better option is selected");
		}
		verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
		HeaderChildNode("Player controls validation in Full screen mode");
		verifyElementPresentAndClick(PWAPlayerPage.maximizeBtn, "Maximize window icon");
		verifyElementPresent(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon");
		verifyElementPresent(PWAPlayerPage.playBtn, "Play icon");
		verifyElementPresent(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon");
		verifyElementPresent(PWAPlayerPage.progressBar, "Progress bar");
		verifyElementPresent(PWAPlayerPage.audioBtn, "Audio icon");
		verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total duration time");
		verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
		verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total time");
		verifyElementPresentAndClick(PWAPlayerPage.minimizeBtn, "Minimize button");
		audioTrackSelection();
	}

	/*
	 * Validating Rewind, Farword 10 seconds icon
	 */
	public void playerControlOperations() throws Exception {
		System.out.println("playerControlOperations");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
			verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupCloseButton, "POP-UP CLOSE BUTTON");
		}
		extent.HeaderChildNode("Validating rewind 10 seconds, farword 10 seconds and Audio icons");

		waitTime(10000);
//		click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
		JSClick(PWAPlayerPage.pauseBtn, "Pause icon");
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		System.out.println("time fetched before rewind: " + currentDuration);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
			verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupCloseButton, "POP-UP CLOSE BUTTON");
		}
		String[] time = currentDuration.split(":");
		int timeDuration = Integer.parseInt(time[1]);
		System.out.println("seconds lapsed before rewind: " + timeDuration);
		int rewindTime = timeDuration - 10;
		// To tap on the player
//		click(PWAPlayerPage.objPlaybackVideoOverlay, "player");
		// Verify Playback is rewinded 10 Seconds back
		// click on pause button
		click(PWAPlayerPage.rewind10SecBtn, "Rewind 10 seconds");
		// Get the current time duration after clicking the rewind button
		click(PWAPlayerPage.objPlaybackVideoOverlay, "player");
		String currentDurationAfter10Sec = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		System.out.println("time fetched after rewind: " + currentDurationAfter10Sec);
		String[] time2 = currentDurationAfter10Sec.split(":");
		int timeDuration2 = Integer.parseInt(time2[1]);
		System.out.println("seconds lapsed after rewind: " + timeDuration2);
		if (rewindTime <= timeDuration2) {
			softAssert.assertEquals(rewindTime <= timeDuration2, true, "Rewinded video playback 10 seconds");
			extent.extentLogger("Verify rewind button", "Playback is rewinded 10 seconds");
			logger.info("Rewinded 10 seconds is passed");
		} else {
			softAssert.assertEquals(rewindTime <= timeDuration2, false, " Can not Rewind video playback 10 seconds");
			softAssert.assertAll();
			extent.extentLoggerFail("Verify rewind button", "Playback can not be rewind 10 seconds");
			logger.info("Rewind 10 sec is failed");
		}

		// Verify Farword 10 seconds icon
//		click(PWAPlayerPage.objPlaybackVideoOverlay, "player");
		pausePlayer();
		String currentDurationF = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		System.out.println("time fetched before Farword : " + currentDuration);
		String[] timeF = currentDurationF.split(":");
		System.out.println(timeF);
		int timeDurationF = Integer.parseInt(timeF[1]);
		System.out.println("seconds lapsed before farword: " + timeDurationF);
		int farwordTimeF = timeDurationF + 10;
		// Verify Playback is farworded 10 Seconds back
		click(PWAPlayerPage.forward10SecBtn, "Farword 10 seconds");
		// Get the current time duration after clicking the rewind button
		// click(PWAPlayerPage.objPlaybackVideoOverlay, "player");
		String currentDurationAfter10SecF = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		System.out.println("time fetched after rewind: " + currentDurationAfter10Sec);
		String[] time2F = currentDurationAfter10SecF.split(":");
		int timeDuration2F = Integer.parseInt(time2F[1]);
		System.out.println("seconds lapsed after Farword: " + timeDuration2F);
		if (farwordTimeF >= timeDuration2F) {
			softAssert.assertEquals(farwordTimeF >= timeDuration2F, true, "Farworded video playback 10 seconds");
			extent.extentLogger("Verify rewind button", "Playback is Farword 10 seconds");
			logger.info("Farword 10 seconds is passed");
		} else {
			softAssert.assertEquals(farwordTimeF >= timeDuration2F, false,
					" Can not Farword video playback 10 seconds");
			softAssert.assertAll();
			extent.extentLoggerFail("Verify rewind button", "Playback can not be Farword 10 seconds");
			logger.info("Farword 10 sec is failed");

		}
	}
	/*
	 * Validate the Audio functionality
	 */

	public void AudioValidation() throws Exception {
		System.out.println("AudioValidation");
		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "player");
		String Audio = getElementPropertyToString("aria-label", PWAPlayerPage.audioBtn, "Audio button");
		if (Audio.contains("Mute")) {
			softAssert.assertEquals(Audio.contains("Mute"), true, "Playbac is Audible");
			extent.extentLogger("Veridy Playback is audible", "Playback is Audible");
			logger.info("Playback is audible");
		} else {
			softAssert.assertEquals(Audio.contains("Mute"), false, "Video is not audible");
			softAssert.assertAll();
			extent.extentLogger("Veridy Playback is audible", "Playback is not Audible");
			logger.info("Playback is not audible");
		}
		// Verify Audio is muted
		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "player");
		click(PWAPlayerPage.audioBtn, "Audio button");
		String muteAudio = getElementPropertyToString("aria-label", PWAPlayerPage.audioBtn, "Audio button");
		if (muteAudio.contains("Unmute")) {
			softAssert.assertEquals(muteAudio.contains("Unmute"), true, "Playbac is Muted");
			extent.extentLogger("Veridy Playback is audible", "Playback is Muted");
			logger.info("Playback is Muted");
		} else {
			softAssert.assertEquals(muteAudio.contains("Unmute"), false, "Video is not muted");
			softAssert.assertAll();
			extent.extentLogger("Veridy Playback is audible", "Playback is not Muted");
			logger.info("Playback is not Muted");
		}

	}

	/*
	 * Player Quality validation
	 */

	public void PlayerQuality() throws Exception {
		System.out.println("PlayerQuality");

		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
			verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupCloseButton, "POP-UP CLOSE BUTTON");
		}

		extent.HeaderChildNode("Validating Player Quality");

		// click on player
//		click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
		// Click on Setting
		click(PWAPlayerPage.settingsBtn, "Setting icon");
		// Click on Quality
		click(PWAPlayerPage.qualityBtn, "Quality option");
		// Verify the Quality
		for (int i = 1; i <= getWebDriver().findElements(PWAQualitySettingsPage.objAllQualities).size(); i++) {

			// click on the first quality
			click(PWAQualitySettingsPage.objIndividualQuality(i), "Quality");
			// click on player
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			// Click on Setting
			click(PWAPlayerPage.settingsBtn, "Setting icon");
			// Click on Quality
			click(PWAPlayerPage.qualityBtn, "Quality option");
			if (findElement(PWAQualitySettingsPage.objSelectedQuality(i)).getAttribute("class").contains("tickMark")) {
				String selectedQuality = getWebDriver().findElement(PWAQualitySettingsPage.objIndividualQuality(i))
						.getText();
				System.out.println(selectedQuality);
				// Click on Player
				click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
				// Click on Setting
				click(PWAPlayerPage.settingsBtn, "Setting icon");
				String qualitySelected = getWebDriver().findElement(PWAQualitySettingsPage.objQualityText).getText();
				if (selectedQuality.equals(qualitySelected)) {
					softAssert.assertEquals(selectedQuality, qualitySelected);
					extent.extentLogger("Verify Quality", "The selected Quality is applied");
					logger.info("The Selected quality is " + selectedQuality);
				} else {
					softAssert.assertAll();
					softAssert.assertEquals(selectedQuality, qualitySelected);
					extent.extentLogger("Verify Quality", "The selected Quality is failed");
					logger.info("Quality select is failed");
				}
			}
		}
	}

	/*
	 * Validating share functionality
	 */
	public void ShareFunctionality() throws Exception {

		System.out.println("ShareFunctionality");
		extent.HeaderChildNode("Share functionality Validation");
		// Verify Share option
		verifyElementPresent(PWAPlayerPage.shareBtn, "Share option");
		// Click on the Share option
		// click(PWAPlayerPage.shareBtn, "Share option");
		WebShareFunctionality();
		// Verify the Share options are visible
		// verifyElementPresent(PWAPlayerSharePage.objShareViaText,"Share Via Popup");
		// Navigate back to playback page
		// Back(1);
	}

	/*
	 * Function to validate the Web Share functionality
	 */
	public void WebShareFunctionality() throws Exception {
		// click on share Option
		click(PWAPlayerPage.shareBtn, "Share Option");
		// Verify Facebook share option
		Thread.sleep(2000);
		verifyElementPresent(PWAPlayerPage.facebookShareBtn, "Facebook share option");
		Thread.sleep(2000);

		// Verify Twitter share option
		verifyElementPresent(PWAPlayerPage.twitterShareBtn, "Twitter share option");
		Thread.sleep(2000);
		// Verify Email Share option
		verifyElementPresent(PWAPlayerPage.emailShareBtn, "Email share option");
		Thread.sleep(2000);
		// Click on Facebook Share option
		click(PWAPlayerPage.facebookShareBtn, "Facebook share option");
		Thread.sleep(2000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}

		// Switch to window
		verifyAlert();
		switchToWindow(2);
		Thread.sleep(2000);
		// Verify user is navigate to Facebook page
		if (checkElementDisplayed(PWALiveTVPage.objFacebookEmailField, "Facebook Email field")) {
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookEmailField, "Facebook Email field");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}

			getWebDriver().findElement(PWALiveTVPage.objFacebookEmailField).sendKeys("helloigs6@gmail.com");
//		waitTime(3000);
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookPasswordField, "Facebook Password field");
			getWebDriver().findElement(PWALiveTVPage.objFacebookPasswordField).sendKeys("hello@12345");
//		waitTime(3000);
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookLoginBtn, "Facebook Login button");
			waitTime(2000);
		}
		verifyAlert();
		waitTime(2000);
		verifyElementPresentAndClick(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook");
		waitTime(3000);
		verifyAlert();
		switchToWindow(1);
		waitTime(3000);
//		verifyElementPresent(WebSharePage.objFacebookTitle, "Facebook Title on Facebook page");
//		verifyAlert();
//		getWebDriver().close();
		// Switch to default window
//		Thread.sleep(2000);
//		verifyAlert();
//		switchToParentWindow();
		Thread.sleep(2000);
		// Click on Share option
		click(PWAPlayerPage.shareBtn, "Share Option");
		Thread.sleep(2000);
		// Click on Twitter share option
		click(PWAPlayerPage.twitterShareBtn, "Twitter share option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}

		Thread.sleep(2000);
		// Verify user is navigated to Twitter page
		switchToWindow(2);
		Thread.sleep(2000);
		verifyAlert();
		// Verify user is navigated to Twitter page
		checkElementDisplayed(WebSharePage.objTwitterLogo, "Twitter Share page");
		verifyAlert();
		getWebDriver().close();
		switchToParentWindow();
		Thread.sleep(2000);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		waitTime(5000);
	}

	/*
	 * Function to validate the Watch trailer
	 */
	public void WatchTrailer() throws Exception {
		System.out.println("WatchTrailer");
		// Click on Search icon
		click(PWAHomePage.objSearchBtn, "Search Button");
		// Enter text which contains Watch Trailer Option
		waitTime(3000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieWithTrailer");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box");
		Thread.sleep(2000);
//	        type(PWASearchPage.objSearchEditBox, "nna", "Search Edit box");

		// Select the content
//	        click(PWASearchPage.objFirstContentCardNameAfterSearch(1), "First content in search history");

		waitTime(4000);

		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Premium content");
		Thread.sleep(4000);
		// Verify the Pop up behavior

		if (checkElementDisplayed(PWAPlayerPage.objCloseBtnLoginPopup, "Login popup") == true) {
			click(PWAPlayerPage.objCloseBtnLoginPopup, "Closing Login  Popup");
		}

		Thread.sleep(4000);

		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//		}

		// Verify Watch trailer option is displayed
		checkElementDisplayed(PWASearchPage.objWEBWatchTrailerBtn, "Watch Trailer option");
	}

	/*
	 * Function to validate the Add to Watch list as a guest user
	 */
	public void AddToWatchListGuestUser(String userType) throws Exception {

		if (userType.contains("Guest")) {
			System.out.println("AddToWatchListGuestUser");
			extent.HeaderChildNode("Add to Watch List Guest user validations");
			// Verify Add to Watchlist is displayed
			verifyElementPresent(PWAPlayerPage.watchListBtn, "Add to Watchlist");
			// Click on Add to Watchlist option
			click(PWAPlayerPage.watchListBtn, "Add to Watchlist");

			// Verify user is Observed Login pop up
			verifyElementPresent(PWAPlayerPage.objLoginRequiredTxt, "Login Required Pop up");
			// Close the Login Popup
			click(PWAPlayerPage.objCloseBtnLoginPopupWeb, "Close button Login Popup");
			getWebDriver().manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
		} else {
			System.out.println("AddToWatchListLoggedUser");
			Thread.sleep(4000);

			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
			AddToWatchListLoggedInUser();
		}
	}

	/*
	 * Function to Validate the Watch credit option
	 */
	public void WatchCredit(String userType) throws Exception {
		System.out.println("WatchCredit");
		extent.HeaderChildNode("Validating Watch credit button");
		// Click on home page
		click(PWAHomePage.objTabName("Home"), "Home page");
		// Click on search icon
		click(PWAHomePage.objSearchBtn, "Search Button");
		// Enter text
//		type(PWASearchPage.objSearchEditBox, "right ya wrong", "Search Edit box");
		type(PWASearchPage.objSearchEditBox, "welcome back", "Search Edit box");
		// type(PWASearchPage.objSearchEditBox, " ", "Search Edit box");
		Thread.sleep(8000);
		// Click on first content
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Content Card");
		// close login up

		if (userType.equalsIgnoreCase("Guest")) {

			if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register popup close button")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}

			if (getParameterFromXML("browserType").equalsIgnoreCase("Firefox")) {
				click(PWAPlayerPage.objContentTitle, "Content Title");
			}

			// LoadingInProgress(PWAPlayerPage.objPlayerLoader);
//			waitForPlayerLoaderToComplete();
//			verifyElementNotPresent(PWAPlayerPage.objAd, 60);
//			waitForPlayerAdToComplete1("Video Player");
			// Click on the video playback
//			if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup")) {
//				click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
//			}
			Thread.sleep(2000);
//			verifyElementNotPresent(PWAPlayerPage.objAd, 60);
			waitForPlayerAdToComplete1("Video Player");
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			Thread.sleep(5000);
			getWebDriver().manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			
			// Scub the video
			WebElement slider = getWebDriver().findElement(PWAPlayerPage.progressBar);
			System.out.println(slider);
			Actions move = new Actions(getWebDriver());
			System.out.println(move);
			Action action = (Action) move.dragAndDropBy(slider, 395, 0).build();
			action.perform();
			waitForPlayerAdToComplete1("Video Player");
			
			waitForElementDisplayed(PWAPlayerPage.objWatchCredit, 25);
			verifyElementPresentAndClick(PWAPlayerPage.objWatchCredit, "Watch Credit");
//			click(PWAPlayerPage.playBtn, "Play icon");
//			getWebDriver().manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
//			// adValidation();
//			waitForPlayerLoaderToComplete();
//			verifyElementNotPresent(PWAPlayerPage.objAd, 60);
//			verifyElementNotPresent(PWAPlayerPage.objAd, 60);
//
//			waitForElementDisplayed(PWAPlayerPage.objWatchCredit, 50);
//
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//				verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupCloseButton, "POP-UP CLOSE BUTTON");
//			}

			// click on play button
			// Verify Watch credit is displayed
//			checkElementDisplayed(PWAPlayerPage.objWatchCredit, "Watch Credit");

			// Verify Content cards are displayed
//			checkElementDisplayed(PWAPlayerPage.objContentCardsOnPlayer, "Upnext Rail on video playback");
			// Click on Watch credit button
			// click(PWAPlayerPage.objWatchCredit, "Watch Credit");

//			Thread.sleep(10000);
//
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//				verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupCloseButton, "POP-UP CLOSE BUTTON");
//			}
//
//			if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup")) {
//				click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
//			}

		} else {
			Thread.sleep(2000);

			if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register popup close button")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}

//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//				verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupCloseButton, "POP-UP CLOSE BUTTON");
//			}
//			Thread.sleep(2000);
//			if(checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true)
//			{
//				verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupCloseButton, "POP-UP CLOSE BUTTON");
//			}

			if (getParameterFromXML("browserType").equalsIgnoreCase("Firefox")) {
				click(PWAPlayerPage.objContentTitle, "Content Title");
			}
			// waitForPlayerLoaderToComplete();
			// verifyElementNotPresent(PWAPlayerPage.objAd, 60);
//			waitForPlayerAdToComplete1("Video Player");
//			waitForPlayerAdToComplete1("Video Player");

			waitForElementDisplayed(PWAPlayerPage.objWatchCredit, 25);

			click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
			click(PWAPlayerPage.playBtn, "Play icon");

			click(PWAPlayerPage.objWatchCredit, "Watch Credit");
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//				verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupCloseButton, "POP-UP CLOSE BUTTON");
//			}
			WebElement slider = getWebDriver().findElement(PWAPlayerPage.progressBar);
			System.out.println(slider);
			Actions move = new Actions(getWebDriver());
			System.out.println(move);
			Action action1 = (Action) move.dragAndDropBy(slider, 0, 0).build();
			action1.perform();

			waitForPlayerAdToComplete1("Video Player");
//			Thread.sleep(5000);
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//				verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupCloseButton, "POP-UP CLOSE BUTTON");
//			}

		}

	}

	/*
	 * Validating Upnext Rail on Playback
	 */

	@SuppressWarnings("unused")
	public void upnext(String userType) throws Exception {
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String keyword = "", totalDuration = "", currentDuration = "", currentUrl = "", contentURL = "",
				midRollUrl = "", postRollUrl = "";
		SimpleDateFormat formatter = new SimpleDateFormat("HH");
		Date date = new Date();
		System.out.println("date " + date);
		String hourString = formatter.format(date).toString();
		System.out.println("hourString " + hourString);
		int hour = Integer.parseInt(hourString);
		if (hour >= 0 && hour <= 2)
			keyword = "Kumkum Bhagya";
		else if (hour >= 3 && hour <= 5)
			keyword = "Paaru";
		else if (hour >= 6 && hour <= 8)
			keyword = "Jothe Jotheyali";
		else if (hour >= 9 && hour <= 11)
			keyword = "Kundali Bhagya";
		else if (hour >= 12 && hour <= 14)
			keyword = "Kamali";
		else if (hour >= 15 && hour <= 17)
			keyword = "Tujhse Hai Raabta";
		else if (hour >= 18 && hour <= 20)
			keyword = "Apna Time Bhi Aayega";
		else if (hour >= 21 && hour <= 23)
			keyword = "Sathya";
		else
			keyword = "Kamali";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("Shows"), "Shows tab");
		click(PWASearchPage.objSearchedResult(keyword), "Search Result");
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(5000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		mandatoryRegistrationPopUp(userType);

		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Create New Account Popup") == true) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Create New Account Popup close button");
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			waitForPlayerAdToComplete("Video");
		}
		if (userType.equals("SubscribedUser") || userType.equals("ClubUser")) {
			waitTime(10000);
		}

		contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID fetched from URL: " + contentID);
		logger.info("Content ID fetched from URL: " + contentID);
		Response respContent = null;
		for (int i = 0; i < 10; i++) {
			respContent = ResponseInstance.getContentDetails(contentID, "content");
			// System.out.println(resp.getBody().asString());
			if (!respContent.getBody().asString().contains("\"error_code\":401")) {
				waitTime(1000);
				break;
			} else
				waitTime(1000);
		}
		// System.out.println(respContent.getBody().asString());
		mandatoryRegistrationPopUp(userType);
		String seasonID = "";
		try {
			seasonID = respContent.jsonPath().get("season_details.id").toString().trim();
		} catch (Exception e) {
		}
		extent.extentLogger("", "Season ID fetched from API: " + seasonID);
		logger.info("Season ID fetched from API: " + seasonID);

		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		/////////////////////////////////////////////////////
		WebElement progressBar = findElement(PWAPlayerPage.progressBar);
		int progressBarWidth = progressBar.getSize().getWidth();
		System.out.println(progressBarWidth);
		int progressBarX = progressBar.getLocation().getX();
		System.out.println(progressBarX);
		int progressBarEndX = progressBarX + progressBarWidth;
		System.out.println(progressBarEndX);
		WebElement scrubber = findElement(PWAPlayerPage.objPlayerScrubber);
		int scrubberX = scrubber.getLocation().getX();
		System.out.println(scrubberX);
		int offsetForEnd = progressBarEndX - scrubberX - 10;

		/////////////////////////////////////
		Actions act = new Actions(getWebDriver());
		act.moveToElement(scrubber, offsetForEnd, 0).click().build().perform();
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "Scrubbed to end of the player");
		logger.info("Scrubbed to end of the player");
		mandatoryRegistrationPopUp(userType);
		String upnextTrayCardTitle = "";
		for (int i = 0; i < 3; i++) {
			try {
				upnextTrayCardTitle = getElementPropertyToString("innerText",
						PWAPlayerPage.objPlayerUpnextTrayCardTitle, "");
				logger.info("Up Next Rail on player is displayed");
				extent.extentLogger("", "Up Next Rail on player is displayed");
				logger.info("First Card Title fetched from Up Next Rail : " + upnextTrayCardTitle);
				extent.extentLogger("", "First Card Title fetched from Up Next Rail : " + upnextTrayCardTitle);
				upnextTrayCardTitle = upnextTrayCardTitle.replace("'", "");
				break;
			} catch (Exception e) {
			}
		}
		click(PWAPlayerPage.objPlayerPlay, "Play button");
		if (!(userType.equals("SubscribedUser") || userType.equals("ClubUser"))) {
			extent.extentLogger("", "Postroll Ad play check");
			logger.info("Postroll Ad play check");
			waitForPlayerAdToComplete("Video Player");
			extent.extentLogger("", "Preroll Ad play check");
			logger.info("Preroll Ad play check");
			waitForPlayerAdToComplete("Video Player");
		}

		mandatoryRegistrationPopUp(userType);
		// Verify the Upnext content is auto playing
		getResponseUpNextRail.getUpNextResponse(seasonID, contentID);
		String episodeName = getText(PWAPlayerPage.objContentName);
		String APIData = getResponseUpNextRail.getMediaContentName();
		logger.info("Up Next First Card Title returned by API : " + APIData);
		extent.extentLogger("", "Up Next First Card Title returned by API : " + APIData);
		APIData = APIData.replace("'", "");
		if (APIData.contains(upnextTrayCardTitle)) {
			softAssert.assertEquals(APIData, upnextTrayCardTitle);
			extent.extentLoggerPass("Upnext Rail", "Card displayed in Upnext rail matches with API");
			logger.info("Card displayed in Upnext rail matches with API");
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				waitForPlayerAdToComplete("Video");
				mandatoryRegistrationPopUp(userType);
				waitForPlayerAdToComplete("Video");
			} else
				waitTime(10000);
			try {
				String contentPlayed = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
						"Content Title").toString();
				extent.extentLogger("Upnext Rail", "Up Next Content played in UI :" + contentPlayed);
				logger.info("Up Next Content played in UI :" + contentPlayed);
				contentPlayed = contentPlayed.replace("'", "");
				if (APIData.contains(contentPlayed)) {
					extent.extentLoggerPass("Upnext Rail", "Upnext content played matches with API");
					logger.info("Upnext content played matches with API");
				} else {
					extent.extentLoggerFail("", "Upnext content played does not match with API");
					logger.error("Upnext content played does not match with API");
				}
			} catch (Exception e) {
			}

		} else {
			softAssert.assertNotEquals(APIData, upnextTrayCardTitle);
			extent.extentLoggerFail("Verify UpNext Rail", "Card displayed in Upnext rail does not match with API");
			logger.error("Card displayed in Upnext rail does not match with API");
		}
		mandatoryRegistrationPopUp(userType);
	}

	/*
	 * Function to validate the Ad
	 */
	public void waitForPlayerAdToComplete1(String playerType) throws Exception {
//		getWebDriver().manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
//		WebDriverWait wait = new WebDriverWait(driver,30);
//		wait.until(ExpectedConditions.presenceOfElementLocated(PWAPlayerPage.objAd));
		boolean adWasDisplayed = false;
		boolean playerDisplayed = false;
		int confirmCount = 0;
		main: for (int trial = 0; trial < 90; trial++) {
			try {
				getWebDriver().findElement(PWAPlayerPage.objAd);
				adWasDisplayed = true;
				if (trial == 5) {
					logger.info("Ad play in progress");
					extent.extentLogger("AdPlayInProgress", "Ad play in progress");
				}
				if (Math.floorMod(trial, 10) == 0)
					System.out.println("Ad play in progress");
				Thread.sleep(1000);
			} catch (Exception e) {
				try {
					if (playerType.equals("Live Player")) {
						getWebDriver().findElement(PWAPlayerPage.objLivePlayerLiveTag);
					} else if (playerType.equals("Video Player")) {
						getWebDriver().findElement(PWAPlayerPage.objPlayerSeekBar);
					}
					playerDisplayed = true;
					Thread.sleep(1000);
					confirmCount++;
					if (confirmCount == 3) {
						if (adWasDisplayed == false) {
							logger.info("Ad did not play");
							extent.extentLogger("AdDidNotPlay", "Ad did not play");
						} else {
							logger.info("Ad play complete");
							extent.extentLogger("AdPlayComplete", "Ad play complete");
						}
						break main;
					}
				} catch (Exception e1) {
					Thread.sleep(1000);
				}
			}
		}
		if (playerDisplayed == false && adWasDisplayed == false) {
			logger.error("Ad play failure");
			extent.extentLoggerFail("failedAd", "Ad play failure");
		}
	}

	// ----------------------------------------------------------------
	// Manas
//	public void verifyAutoroatingOnCarousel(String screen) throws Exception {
//        extent.HeaderChildNode("Verifying autorotating of carousel pages on : " + screen);
//        String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
//        navigateToAnyScreenOnWeb(screen);
//        WebDriverWait w = new WebDriverWait(getWebDriver(), 15);
//        //for (int i = 0; i < 10; i++) {
//            try {
//                firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//                System.out.println("title1 >>> "+firstCarouselTitle);
//                
//                try {
//                    //getWebDriver().findElement(PWAHomePage.objWEBContTitleTextCarousel(firstCarouselTitle));
//                    waitTime(7000);
//                    secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//                    System.out.println("title2 >>> " +secondCarouselTitle);
//                }catch(Exception e) {
//                    secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//                    System.out.println("title2 >>> " +secondCarouselTitle);
//                    try {
//                        getWebDriver().findElement(PWAHomePage.objContTitleTextCarousel(secondCarouselTitle));
//                        waitTime(4000);
//                        thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//                        System.out.println("title2 >>> " +thirdCarouselTitle);
//                    }catch(Exception e1) {
//                        thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//                        System.out.println("title2 >>> " +thirdCarouselTitle);
//                    }
//                }
//                
//                
////              w.until(ExpectedConditions.invisibilityOfElementLocated(PWAHomePage.objWEBContTitleTextCarousel(secondCarouselTitle)));
////              //verifyElementNotPresent(PWAHomePage.objWEBContTitleTextCarousel(secondCarouselTitle), 60);
////              thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
////              System.out.println("title3 >>> " +thirdCarouselTitle);
//////                break;
//            } catch (Exception e) {
//                e.getMessage();
//            }
//        //}
//        if (firstCarouselTitle.equals(secondCarouselTitle) == false
//                && secondCarouselTitle.equals(thirdCarouselTitle) == false) {
//            softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
//            logger.info("Content is auto rotated ");
//            extent.extentLogger("Autorotating",
//                    "First content title :" + firstCarouselTitle + " and next content title :" + secondCarouselTitle);
//            extent.extentLogger("Autorotating", "Content is auto rotated");
//        } else {
//            softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
//            logger.info("Content is not auto rotated");
//            extent.extentLogger("Autorotating", "Content is not auto rotated");
//            softAssert.assertAll();
//        }
//        
//    }

//	====================For Autorotating=======================
	public void verifyAutoroatingOnCarousel(String screen) throws Exception {
		extent.HeaderChildNode("Verify Autorotating On Carousel");
		boolean autoplayingItemsPresent = false;
		// String languageSmallText = allSelectedLanguages();
		Response tabResponse = ResponseInstance.getResponseForPages(screen.toLowerCase(), "en,hi,kn");
		int carouselItemsCount = tabResponse.jsonPath().get("buckets[0].items.size()");
		System.out.println(carouselItemsCount);
		if (carouselItemsCount > 7)
			carouselItemsCount = 7;
		for (int i = 0; i < carouselItemsCount; i++) {
			try {
				if (tabResponse.jsonPath().get("buckets[0].items[" + i + "].tags[0]").toString().equals("Autoplay")) {
					logger.info("Autorotation could not be verified because Carousel contains auto playing items");
					extent.extentLoggerWarning("",
							"Autorotation could not be verified because Carousel contains auto playing items");
					autoplayingItemsPresent = true;
					break;
				}
			} catch (Exception e) {
			}
		}
		if (autoplayingItemsPresent == false) {
			if (navigateToAnyScreenOnWeb(screen)) {
				String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
				//(new WebDriverWait(getDriver(), 30)).until(ExpectedConditions.presenceOfElementLocated(PWAHomePage.objContTitleOnCarousel));
				firstCarouselTitle = getElementPropertyToString("innerText", PWAHomePage.objContTitleOnCarousel,
						"Carousel Content Title").toString();
				logger.info("Carousel content title fetched first time: " + firstCarouselTitle);
				extent.extentLogger("Autorotating", "Carousel content title fetched first time: " + firstCarouselTitle);
				Thread.sleep(6000);
				secondCarouselTitle = getElementPropertyToString("innerText", PWAHomePage.objContTitleOnCarousel,
						"Carousel Content Title").toString();
				logger.info("Carousel content title fetched second time: " + secondCarouselTitle);
				extent.extentLogger("Autorotating",
						"Carousel content title fetched second time: " + secondCarouselTitle);
				Thread.sleep(6000);
				thirdCarouselTitle = getElementPropertyToString("innerText", PWAHomePage.objContTitleOnCarousel,
						"Carousel Content Title").toString();
				logger.info("Carousel content title fetched third time: " + thirdCarouselTitle);
				extent.extentLogger("Autorotating", "Carousel content title fetched third time: " + thirdCarouselTitle);
				Thread.sleep(6000);
				if (firstCarouselTitle.equals(secondCarouselTitle) || secondCarouselTitle.equals(thirdCarouselTitle)) {
					logger.error("Autorotation failed");
					extent.extentLoggerFail("Autorotating", "Autorotation failed");
				} else {
					logger.info("Different carousel titles are displayed at different instances, Autorotation passed");
					extent.extentLogger("Autorotating",
							"Different carousel titles are displayed at different instances, Autorotation passed");
				}
			} else {
				logger.error("Failed to validate carousel autorotation on tab : " + screen);
				extent.extentLoggerFail("Autorotating", "Failed to validate carousel autorotation on tab : " + screen);
			}
		}
	}

	/**
	 * Function to select any tab
	 * 
	 */
	public boolean navigateToAnyScreenOnWeb(String screen) throws Exception {
		try {
			if (checkElementDisplayed(PWAHomePage.objHomeBarText(screen), screen + " Tab")) {
				click(PWAHomePage.objHomeBarText(screen), screen + " Tab");
				return true;
			} else {
				JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
				getWebDriver().findElement(PWAHomePage.objMoreMenuIcon);
				waitTime(2000);
				try {
					WebElement tab = getWebDriver().findElement(PWAHomePage.objMoreMenuTabs(screen));
					logger.info(screen + " Tab is displayed");
					extent.extentLogger("tabDisplayed", screen + " Tab is displayed");
					executor.executeScript("arguments[0].click();", tab);
					logger.info("Clicked on " + screen + " Tab");
					extent.extentLogger("tabClicked", "Clicked on " + screen + " Tab");
					return true;
				} catch (Exception e) {
				}
			}

		} catch (Exception e) {
			System.out.println("Exception : " + e.getMessage());
		}
		return false;
	}

	// MANAS script modified by sushma
	public void verifyMetadataOnCarousel(String screen, String pageName) throws Exception {

		extent.HeaderChildNode("Verifying metadata of carousel pages on page : " + screen);

		navigateToAnyScreenOnWeb(screen);

		List<String> metaTitle = new LinkedList<String>();

		String carouselTitle = null;

		verifyElementPresent(PWAHomePage.objCarouselBanner, "carousel for :" + screen);

		for (int i = 0; i < 7; i++) {
			try {
				carouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

				if (metaTitle.contains(carouselTitle)) {
					break;
				} else {
					metaTitle.add(carouselTitle);
				}
				System.out.println(metaTitle);

				click(PWANewsPage.objRight, "right");
				waitTime(2000);

			} catch (Exception e) {
				System.out.println(e);
			}

		}

		System.out.println(metaTitle);

		List<String> allMetaTitleOnCarousel = ResponseInstance.traysTitleCarousel(pageName);

		System.out.println(allMetaTitleOnCarousel);
		for (int i = 0; i < 7; i++) {
			if (metaTitle.get(i).equalsIgnoreCase(allMetaTitleOnCarousel.get(i))) {
				logger.info("APICarouselTitle " + allMetaTitleOnCarousel.get(i) + " matches with UICarouselTitle "
						+ metaTitle.get(i));
				extent.extentLogger("metadata verification", "APICarouselTitle " + allMetaTitleOnCarousel.get(i)
						+ "matches with UICarouselTitle " + metaTitle.get(i));
			} else {
				logger.info("APICarouselTitle " + allMetaTitleOnCarousel.get(i) + " matches with UICarouselTitle "
						+ metaTitle.get(i));
				extent.extentLogger("metadata verification", "APICarouselTitle " + allMetaTitleOnCarousel.get(i)
						+ "matches with UICarouselTitle " + metaTitle.get(i));
			}

		}
	}

	// MANAS
//    /**
//     * Function to verify Meta data on carousel for different pages
//     * 
//     * @param pagename
//     * @param screenname
//     * @throws Exception
//     */
//    @SuppressWarnings({ "null", "null" })
//public void verifyMetadataOnCarousel(String screen, String pageName) throws Exception {
//        
//        extent.HeaderChildNode("Verifying metadata of carousel pages on page : " + screen);
//        
//        navigateToAnyScreenOnWeb(screen);
//        
//        String doesContainMetadata = "";
//        
//        List<String> statusList = new LinkedList<String>();
//        List<String> metaDataTitleBothOnAPIUI = new LinkedList<String>();
//        List<String> metaTitle = new LinkedList<String>();
//        
//        String carouselTitle = null;
//        
//        verifyElementPresent(PWAHomePage.objCarouselBanner, "carousel for :" + screen);
//        
//            for (int i = 0; i < 7; i++) {
//            try {   
//                    carouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//                    
//                    if (metaTitle.contains(carouselTitle))
//                    {
//                        break;
//                    } 
//                    else 
//                    {
//                        metaTitle.add(carouselTitle);
//                    }
//                    System.out.println(metaTitle);
//                    
//                    click(PWANewsPage.objRight, "right");
//                    waitTime(2000);
//                    
//                 }
//            catch (Exception e) 
//            {
//                    System.out.println(e);
//             }
//            
//          }
//            
//            System.out.println(metaTitle);
//        
//        List<String> allMetaTitleOnCarousel = ResponseInstance.traysTitleCarousel(pageName);
//        
//        System.out.println(allMetaTitleOnCarousel);
//        for(int i=0; i<7; i++)
//        {
//            if (metaTitle.get(i).equalsIgnoreCase(allMetaTitleOnCarousel.get(i))) 
//            {
//                logger.info("APICarouselTitle "+allMetaTitleOnCarousel.get(i)+"matches with UICarouselTitle "+metaTitle.get(i));
//                extent.extentLogger("metadata verification","APICarouselTitle "+allMetaTitleOnCarousel.get(i)+"matches with UICarouselTitle "+metaTitle.get(i));
//            }
//            else
//            {
//                logger.info("APICarouselTitle "+allMetaTitleOnCarousel.get(i)+"matches with UICarouselTitle "+metaTitle.get(i));
//                extent.extentLogger("metadata verification","APICarouselTitle "+allMetaTitleOnCarousel.get(i)+"matches with UICarouselTitle "+metaTitle.get(i));
//            }
//    
//        }
//  }

	/**
	 * Function to verify Play icon functionality
	 * 
	 * @throws Exception
	 */
	public void verifyPlayIconFunctionality(String screen) throws Exception {
		extent.HeaderChildNode("Verifying play icon functionality on carousel for : " + screen);
		waitTime(3000);
		JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
		for (int i = 0; i <= 10; i++) {
			try {
				WebElement premiumText = getWebDriver().findElement(PWAHomePage.objWEBPlayBtn);
				executor.executeScript("arguments[0].click();", premiumText);
				break;
			} catch (Exception e) {
				Thread.sleep(2000);
				try {
					getWebDriver().findElement(PWAHomePage.objWEBPlayBtn).click();
					break;
				} catch (Exception e1) {
				}
			}
		}
		waitForElementDisplayed(PWAPlayerPage.objPlayerControlScreen, 10);
		if (verifyElementPresent(PWAPlayerPage.objPlayerControlScreen, "Player control containing screen")) {
			logger.info("Play icon functionality is verified for " + screen);
			extent.extentLogger("", "Play icon functionality is verified for " + screen);
		} else {
			logger.error("Play icon functionality failed for " + screen);
			extent.extentLoggerFail("", "Play icon functionality failed for " + screen);
		}
		Thread.sleep(5000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "Subscribe Pop Up") == true) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "Subscribe Pop Up Close button");
		}
		click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
	}

//    public void verifyPremiumIconFunctionality(String screen, String userType) throws Exception {
//        extent.HeaderChildNode("Verifying premium icon functionality On : " + screen + " for " + userType);
//        boolean isNextPageDisplayed = false;
//        navigateToAnyScreenOnWeb(screen);
//        if (userType.equalsIgnoreCase("SubscribedUser")) {
//            List<WebElement> getPremiumTextList = driver.findElements(PWAHomePage.objWEBGetPremium);
//            if (getPremiumTextList.size() == 0) {
//                softAssert.assertTrue(true, "Next page is not displayed");
//                logger.info("Get premium text is not displayed for subscribed users");
//                extent.extentLogger("Premium text for subscribed user",
//                        "Get premium text is not displayed for subscribed users" + screen);
//            }
//        } else {
//            JavascriptExecutor executor = (JavascriptExecutor)getWebDriver();
//            try {
//                WebElement premiumText = getWebDriver().findElement(PWAHomePage.objWEBGetPremium);
//                executor.executeScript("arguments[0].click();", premiumText);
//            }catch(Exception e) {
//                Thread.sleep(2000);
//                getWebDriver().findElement(PWAHomePage.objWEBGetPremium).click();
//            }
//        }
//        if (userType.equalsIgnoreCase("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
//            if (verifyElementPresent(PWAHomePage.objSubscriptionPage, "Subscription page")) {
//                isNextPageDisplayed = true;
//                getWebDriver().navigate().back();
//            } else {
//                isNextPageDisplayed = false;
//            }
//        }
//        
//        if (userType.equalsIgnoreCase("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
//            if (isNextPageDisplayed) {
//                softAssert.assertTrue(isNextPageDisplayed, "Next page is displayed");
//                logger.info("Next page is displayed on banner for " + screen);
//                extent.extentLogger("Premium button validation", "Next page is displayed for " + screen);
//            } else {
//                softAssert.assertTrue(isNextPageDisplayed, "Next page is not displayed");
//                logger.info("Next page is not displayed for " + screen);
//                extent.extentLogger("Premium button validation", "Next page is not displayed for " + screen);
//                softAssert.assertAll();
//            }
//        }
//    }

	public void verifyPremiumIconFunctionality(String screen, String userType) throws Exception {
		extent.HeaderChildNode("Verifying premium icon functionality on : " + screen + " for " + userType);
		navigateToAnyScreenOnWeb(screen);
		boolean clicked = false;
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			waitTime(4000);
			List<WebElement> getPremiumTextList = getWebDriver().findElements(PWAHomePage.objPlayCarousel);
			if (getPremiumTextList.size() == 0) {
				logger.info("Subscribe Now button is not displayed for Subscribed users, expected behavior");
				extent.extentLogger("",
						"Subscribe Now button is not displayed for Subscribed users, expected behavior");
			} else {
				logger.error("Subscribe Now button is displayed for Subscribed users");
				extent.extentLoggerFail("", "Subscribe Now button is displayed for Subscribed users");
			}
		} else {
			JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
			try {
				WebElement premiumText = getWebDriver().findElement(PWAHomePage.objWEBGetPremium);
				executor.executeScript("arguments[0].click();", premiumText);
				logger.info("Clicked on Subscribe Now button");
				extent.extentLogger("", "Clicked on Subscribe Now button");
				clicked = true;
			} catch (Exception e) {
				Thread.sleep(2000);
				try {
					getWebDriver().findElement(PWAHomePage.objWEBGetPremium).click();
					logger.info("Clicked on Subscribe Now button");
					extent.extentLogger("", "Clicked on Subscribe Now button");
					clicked = true;
				} catch (Exception e1) {
					logger.error("Failed to click on Subscribe Now button");
					extent.extentLoggerFail("", "Failed to click on Subscribe Now button");
				}
			}
		}
		if (clicked == true) {
			if (verifyElementPresent(PWAHomePage.objSubscriptionPage, "Subscription page")) {
				logger.info("Verified Subscribe Now button functionality");
				extent.extentLogger("Premium button validation", "Verified Subscribe Now button functionality");
				Back(1);
			} else {
				logger.error("Failed to verify Subscribe Now button");
				extent.extentLoggerFail("", "Failed to verify Subscribe Now button");
				click(PWAHomePage.objZeeLogo, "Zee Logo");
			}
		}
	}

	public void verifyLeftRightFunctionality(String screen) throws Exception {
		extent.HeaderChildNode("Verifying left and right functionality");
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "", fourthCarouselTitle = "";
		WebDriverWait w = new WebDriverWait(getWebDriver(), 40);
		navigateToAnyScreenOnWeb(screen);
		w.until(ExpectedConditions.visibilityOfElementLocated(PWAHomePage.objWEBCarouselTitle));
		firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		logger.info("Carousel Title fetched: " + firstCarouselTitle);
		extent.extentLogger("", "Carousel Title fetched: " + firstCarouselTitle);
		click(PWANewsPage.objRight, "Right Button");
		secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		logger.info("Carousel Title fetched: " + secondCarouselTitle);
		extent.extentLogger("", "Carousel Title fetched: " + secondCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle)) {
			logger.error("Right button click failed");
			extent.extentLoggerFail("Swipe left and right", "Right button click failed");
		} else {
			logger.info("Verified Right button click");
			extent.extentLogger("Swipe left and right", "Verified Right button click");
		}
		waitTime(2000);
		thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		logger.info("Carousel Title fetched: " + thirdCarouselTitle);
		extent.extentLogger("", "Carousel Title fetched: " + thirdCarouselTitle);
		click(PWANewsPage.objRight, "Left Button");
		fourthCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		fourthCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		logger.info("Carousel Title fetched: " + fourthCarouselTitle);
		extent.extentLogger("", "Carousel Title fetched: " + fourthCarouselTitle);
		if (thirdCarouselTitle.equals(fourthCarouselTitle)) {
			logger.error("Left button click failed");
			extent.extentLoggerFail("", "Left button click failed");
		} else {
			logger.info("Verified Left button click");
			extent.extentLogger("Swipe left and right", "Verified Left button click");
		}

	}

	// ----------------------------------------------------------------------------------------------------

	// TEJAS

	public void WebValidatingLandingPages(String UserType) throws Exception {

		switch (UserType) {

		case "Guest":

			extent.HeaderChildNode("User Type Guest");
			System.out.println("User Type Guest");
			// enterURLInWEBBrowser("chrome", "https://newpwa.zee5.com");
//			waitForPageLoaded();
			waitTime(5000);

			FirstTimeAnonymousUser();
			landingpagePropertiesValidation();
			Back_TO_TopWeb();
			WebHomepageTrayTitleAndContentValidationWithApiData(ResponseInstance.getResponse());
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("User Type Loggedin User");
			System.out.println("User Type Loggedin User");

			// ZeeWEBPWALogin("NonSubscribedUser");
			// verifyElementPresentAndClick(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Menu
			// button");
			FirstTimeNonSubcribed_Loggedin_User();
			landingpagePropertiesValidation();
			Back_TO_TopWeb();
			WebHomepageTrayTitleAndContentValidationWithApiData(ResponseInstance.getResponse());
//			logout();
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("User Type Subcribed User");
			System.out.println("User Type Subcribed User");
			// ZeeWEBPWALogin("SubscribedUser");
			FirstTimeSubcribed_Loggedin_User();
			landingpageValidation_for_SubcribedUser();
			Back_TO_TopWeb();
			WebHomepageTrayTitleAndContentValidationWithApiDataForSubcribedUser(ResponseInstance.getResponse());
//			logout();

		}

	}

	public void Back_TO_TopWeb() throws Exception {
		extent.HeaderChildNode("Scroll to top button functionality");
//		scrollDown();
//		scrollToBottomOfPage();
//		scroll1();
		scrollDownWEB();
		waitForElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, 20);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
//		verifyElementPresent(Pwa_LandingPages.obj_Pwa_PlayIcon_Carousal, "Carousal play icon");
		System.out.println("Scrolled back to top using Back to top button");

	}

	public void FirstTimeAnonymousUser() throws Exception {
		extent.HeaderChildNode("First time user Trenrding on zee5 validation");
		System.out.println("FTAU");
		FirstTimeUser_Trending_on_zee5();
	}

	public void landingpagePropertiesValidation() throws Exception {
		extent.HeaderChildNode("Validating Homepage Properties");
		verifyElementPresent(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		verifyElementPresent(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo");
		verifyElementPresent(PWALandingPages.obj_Pwa_SearchBtn, "Search");
		verifyElementPresent(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
	}

	public void webScrollToElement(By Locator, String validationText) throws Exception {
		for (int i = 1; i <= 10; i++) {
			if (verifyElementPresent(Locator, validationText)) {
				break;
			}
			waitTime(2000);
			scrollDownWEB();
		}
	}

	public void webscrollToXpath(By xpath) throws Exception {
		for (int i = 0; i < 5; i++) {
			if (checkElementDisplayed(xpath, "xapth")) {
				System.out.println("Element Found");
				break;
			} else {
				scrollDownByY(100);

			}
		}
	}

//	public void WebHomepageTrayTitleAndContentValidationWithApiData(Response ApiData) throws Exception {
//
//		extent.HeaderChildNode("Home page validation with Api response");
//		Response resp = ApiData;
//		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
//		System.out.println("The Title of the Tray is " + Tray_Title + "");
//		webscrollToXpath(WebText_To_Xpath(Tray_Title));
//		waitTime(3000);
//		if (checkElementDisplayed(WebText_To_Xpath(Tray_Title), Tray_Title)) {
//			System.out.println("Tray title Found");
////			Verify_SeeAll_Functionality(Tray_Title);
////			Navigate_to_HomeScreen_using_Zee5Logo();
//		} else {
//			System.out.println("Tray title Not found");
//		}
//
//		String Content_Title = resp.jsonPath().getString("buckets[1].items[0].title");
//		System.out.println("Content Title is " + Content_Title + "");
//		scrollDownWEB();
//		webscrollToXpath(TitleTextToXpath(Content_Title));
//		waitTime(3000);
//		if (checkElementDisplayed(TitleTextToXpath(Content_Title), Content_Title)) {
//			System.out.println("Content title Found");
//			verifyElementPresent(TitleTextToXpath(Content_Title), "Playable Content");
//		}
//
////			verifyElementPresentAndClick(Text_To_Xpath(Content_Title), "Playable Content");
////			waitForElementDisplayed(Text_To_Xpath(Content_Title), 20);
////			verifyElementPresent(Text_To_Xpath(Content_Title), "Playable content ");
////			Why_Register_POPUP();
////			verifyElementPresentAndClick(Pwa_LandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo");
//
//		else {
//			System.out.println("Content_Title Not found");
//		}
//
//	}

	public void WebHomepageTrayTitleAndContentValidationWithApiData(Response ApiData) throws Exception {
		extent.HeaderChildNode("Home page validation with Api response");
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		// Response resp = ApiData;
		new LinkedList<String>();
		Response resp = ResponseInstance.getResponseForPages("home", languageSmallText);
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		waitTime(3000);
		partialScroll();

		if (checkElementDisplayed(WebText_To_Xpath(Tray_Title), Tray_Title)) {
			// System.out.println("Tray title Found");
			logger.info("Title Found in UI" + Tray_Title);
			extent.extentLogger("Title Found in UI", "Title Found in UI" + Tray_Title);
		} else {
			logger.info("Title not Found in UI");
			extent.extentLogger("Title not Found in UI", "Title not Found in UI");
			// System.out.println("Tray title Not found");
		}

		String Content_Title = resp.jsonPath().getString("buckets[1].items[0].title");
		System.out.println("Content Title is " + Content_Title + "");
		scrollDownWEB();
		// webscrollToXpath(TitleTextToXpath(Content_Title));
		waitTime(3000);
		if (checkElementDisplayed(TitleTextToXpath(Content_Title), Content_Title)) {
			logger.info("Content Found in UI" + Tray_Title);
			extent.extentLogger("Content Found in UI", "Content Found in UI" + Tray_Title);
			verifyElementPresent(TitleTextToXpath(Content_Title), "Playable Content");
		} else {
			logger.info("Content not Found in UI");
			extent.extentLogger("Content not Found in UI", "Content not Found in UI");
		}

		partialScroll();
		waitTime(5000);
		if (scrollToElement(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn)) {
			System.out.println("Navigate back to the Top of Application");
			logger.info("Navigate back to the Top of Application");
			extent.extentLoggerPass("Back to top", "Navigate back to the Top of Application");
		} else {
			logger.info("Didn't Navigate back to the Top of Application");
			extent.extentLoggerFail("Back to top", "Didn't Navigate back to the Top of Application");
		}
	}

	public void WebHomepageTrayTitleAndContentValidationWithApiDataForSubcribedUser(Response ApiData) throws Exception {
		extent.HeaderChildNode("Homepage validation with respect to api response");
		Response resp = ApiData;
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		webscrollToXpath(WebText_To_Xpath(Tray_Title));
		if (checkElementDisplayed(WebText_To_Xpath(Tray_Title), Tray_Title)) {
			System.out.println("Tray title Found");
//			Verify_SeeAll_Functionality(Tray_Title);
//			Navigate_to_HomeScreen_using_Zee5Logo();
		} else {
			System.out.println("Tray title  found");
		}
		String Content_Title = resp.jsonPath().getString("buckets[1].items[0].title");
		System.out.println("Content Title is " + Content_Title + "");
		scrollDownWEB();
		webscrollToXpath(TitleTextToXpath(Content_Title));
		if (checkElementDisplayed(TitleTextToXpath(Content_Title), Content_Title)) {
			System.out.println("Content title Found");
			verifyElementPresent(TitleTextToXpath(Content_Title), "Playable Content");
		}

//			verifyElementPresentAndClick(Text_To_Xpath(Content_Title), "Playable Content");
//			waitForElementDisplayed(Text_To_Xpath(Content_Title), 20);
//			verifyElementPresent(Text_To_Xpath(Content_Title), "Playable content ");
//			Why_Register_POPUP();
//			verifyElementPresentAndClick(Pwa_LandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo");

		else {
			System.out.println("Content_Title Not found");
		}

	}

	public void landingpageValidation_for_SubcribedUser() throws Exception {
		extent.HeaderChildNode("Validating home page properties for subcribed user");
		verifyElementPresent(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		verifyElementPresent(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo");
		verifyElementPresent(PWALandingPages.obj_Pwa_SearchBtn, "Search");
		verifyElementNotPresent(PWALandingPages.obj_Pwa_Subcription_teaser_btn, 5);

	}

	public void Loggedin_User(String Rail_Name, String Content_Name, String userType) throws Exception {
		landingpagePropertiesValidation();
		Homepage_Title_with_Api(Rail_Name);
		Homepage_Content_selection_playback_with_Api(Rail_Name, Content_Name);
		Verify_Get_Premium_Trailer(userType);
		Back_TO_TopWeb();
	}

	public void FirstTimeNonSubcribed_Loggedin_User() throws Exception {
		extent.HeaderChildNode("First time loggedin user Trending on zee5 validation");
		FirstTimeUser_Trending_on_zee5();
	}

//public void webscrollToXpath(By xpath) throws Exception
//	{
//		for(int i=0;i<5;i++) {
//			if(checkElementDisplayed(xpath, "xapth")) {
//				System.out.println("Element Found");
//				break;
//			}
//			else {
//				scrollDown();
//				
//			}
//		}
//	}
	public By TitleTextToXpath(String Title) throws Exception {
//		return By.xpath("//*[@title='"+Title+"']");
		return By.xpath("(//*[@title='" + Title + "' and ./ancestor::div[contains(@class,'movieTrayWrapper')]])[1]");

	}

	public void FirstTimeSubcribed_Loggedin_User() throws Exception {
		extent.HeaderChildNode("First time subcribed user Trending on zee5 validation");
		FirstTimeUser_Trending_on_zee5();
	}

	public void FirstTimeUser_Trending_on_zee5() throws Exception {

		Swipe_till_Zee5IsTrending();
		if (checkElementDisplayed(PWALandingPages.obj_Pwa_Trending_On_Zee5, "Zee5 Trending")) {
			System.out.println("Trending is found and is a first time user");
		} else {
//      System.out.println("Not a first time user");
			Swipe_till_Zee5IsTrending();
			verifyElementPresent(PWALandingPages.obj_Pwa_Trending_On_Zee5, "Zee5 Trending");
		}
	}

	public void Homepage_Title_with_Api(String RailTitle) throws Exception {
		Response resp = ResponseInstance.getResponse();
		for (int i = 0; i < resp.jsonPath().getList("buckets").size(); i++) {
			if (resp.jsonPath().getString("buckets[" + i + "].title").equals(RailTitle)) {
//          System.out.println(i);
				System.out.println("Tray Title is : " + RailTitle + ", found on API");
				Swipe_till_Text(RailTitle);
				Verify_SeeAll_Functionality(RailTitle);
			}
//      else {
////            System.out.println("["+RailTitle+"] title not found");
//      }
		}
		Navigate_to_HomeScreen_using_Zee5Logo();
	}

	public void Homepage_Content_selection_playback_with_Api(String Rail_Name, String Content_Name) throws Exception {
		Response resp = ResponseInstance.getResponse();
		for (int i = 0; i < resp.jsonPath().getList("buckets").size(); i++) {
			if (resp.jsonPath().getString("buckets[" + i + "].title").equals(Rail_Name)) {
				for (int j = 0; j < resp.jsonPath().getList("buckets[+i+].items").size(); j++) {
					if (resp.jsonPath().getString("buckets[" + i + "].items[" + j + "].title").equals(Content_Name)) {
						System.out.println("Content Name Found : " + Content_Name + " ");
						Swipe_till_Text(Content_Name);
						verifyElementPresentAndClick(Text_To_Xpath(Content_Name), "Playable Content");
						waitForElementDisplayed(Text_To_Xpath(Content_Name), 20);
						verifyElementPresent(Text_To_Xpath(Content_Name), "Playable content ");
						Why_Register_POPUP();
						verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo");
					} else {
						System.out.println("Content Not found on Api");
					}
				}
			}
		}
	}

//	public By WebText_To_Xpath(String text) throws Exception {
//
//		return By.xpath("//div[.='" + text + "'] | //*[contains(@text,'" + text + "')]");
//
//	}

	// Yashaswini
	public By WebText_To_Xpath(String text) throws Exception {

		return By.xpath("(//a[@class='titleLink'])[1]");

	}

	public void Verify_Get_Premium_Trailer(String userType) throws Exception {

		WatchTrailer();
		verifyElementPresentAndClick(PWASearchPage.watchTrailerBtn, "watch Trailer");
		waitForElementDisplayed(PWASearchPage.Obj_Pwa_Get_Premium_btn, 60);
		verifyElementPresent(PWASearchPage.Obj_Pwa_Get_Premium_btn, "Get Primium");
		Navigate_to_HomeScreen_using_Zee5Logo();

	}

	public void Swipe_till_Zee5IsTrending() throws Exception {
		waitTime(5000);
		int found = 0;
		for (int i = 0; i <= 2; i++) {
			if (verifyElementPresent(PWALandingPages.obj_Pwa_Trending_On_Zee5, "Zee5 is trending")) {
				System.out.println("element found");
				found = 1;
				break;
			} else {
				webScrollToElement(PWALandingPages.obj_Pwa_Trending_On_Zee5, "Trending on Zee5");
			}
			if (found == 0) {
				System.out.println("Trending on Zee5 not found and not First time user");
			}
		}
	}

	public void Swipe_till_Text(String text) throws Exception {
		waitTime(4000);
		for (int i = 0; i <= 5; i++) {
			if (checkElementDisplayed(Text_To_Xpath(text), text)) {
				System.out.println("element found");
				break;
			} else {
//			PartialSwipe("up", 1);
				scrollDownWEB();
			}
		}
	}

	public void Verify_SeeAll_Functionality(String s) throws Exception {
		waitTime(3000);
//	verifyElementPresentAndClick(objTrayTitleArrowBtn(s), "view all");
		if (checkElementDisplayed(PWALandingPages.objTrayTitleArrowBtn(s), s)) {
			waitForElementDisplayed(PWALandingPages.obj_Pwa_Trending_On_Zee5, 10);
			verifyElementPresent(Text_To_Xpath(s), s);
		} else {
			System.out.println("See all Not visible");
		}
	}

	public void Navigate_to_HomeScreen_using_Zee5Logo() throws Exception {
		extent.HeaderChildNode("Navigate to HomeScreen using Zee5 Logo");
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee5 Logo");
		waitForElementDisplayed(PWAHomePage.objContTitleOnCarousel, 20);
		verifyElementPresent(PWAHomePage.objContTitleOnCarousel, "Carousal content title");
	}

	public By Text_To_Xpath(String text) throws Exception {

		return By.xpath("//*[contains(@text,'" + text + "')]");

	}

	public By TextToXpath(String text) throws Exception {
		return By.xpath("//div[contains(@class,'trayContentWrap')]//*[contains(text(),'" + text + "')]");
	}

	public void Why_Register_POPUP() throws Exception {

		try {
			if (checkcondition(PWALandingPages.obj_Pwa_WhyRegister_Popup)) {
				verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Popup_Close, "Close button");
			} else {
				System.out.println("popup not displayed");
			}
		} catch (Exception e) {
			System.out.println("popup not displayed");
		}
	}

//public static Response getResponse() {
//	Response response = given().urlEncodingEnabled(false).when().get(
//			"https://gwapi.zee5.com/content/collection/0-8-homepage?limit=20&page=1&item_limit=20&desc=no&version=6&translation=en&languages=en,kn&country=IN");
//	return response;
//}

//-----------------------------------TANISHA-------------------------------------------------

	/**
	 * Method to verify Consumptions screen tapping on any content card
	 * 
	 * @param userType
	 * @param contentType
	 * @param contentTitle
	 * @param devicePin
	 * @throws Exception
	 */
	public void oldverifyConsumptionsScreenTappingOnCard(String userType, String contentType, String contentTitle,
			String devicePin) throws Exception {
		extent.HeaderChildNode("Verify Consumption Page for Content type: " + contentType);
		System.out.println("Verify Consumption Page for Content type: " + contentType);
		String consumptionPageTitle = "";
		if (contentType.equals("Live TV")) {
			if (checkElementDisplayed(PWAHomePage.objMoreMenuIcon, "More Menu Icon") == true) {
				verifyElementPresentAndClick(PWAHomePage.objMoreMenuIcon, "More Menu Icon");
				waitTime(5000);
				verifyElementPresentAndClick(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
			}
			// verifyElementPresentAndClick(PWAHomePage.objTabName("Live TV"), "Live TV
			// tab");
			waitForElement(PWAShowsPage.objFirstAssetTitleLiveTvCard, 30, "Content title");
			contentTitle = getElementPropertyToString("innerText", PWAShowsPage.objFirstAssetTitleLiveTvCard,
					"Content Title").toString();
//			waitForElement(PWAShowsPage.objFirstAssetImageLiveTvCard, 30, "Live TV Card");

			if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup")) {
				click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
			}
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}

			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}

			verifyElementPresentAndClick(PWAShowsPage.objFirstAssetImageLiveTvCard, "Live TV Card");
			System.out.println("userType : " + userType);
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {

				waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 10, "Close in Register Pop Up");

			} else if (userType.equals("SubscribedUser")) {

				// enterDevicePin(devicePin);

			} else {
				waitForPlayerAdToComplete("Video Player");
				extent.extentLoggerFail("incorrectUserType", "Incorrect User Type entered in script");
				logger.error("Incorrect User Type entered in script");
			}
			waitForElement(PWAPlayerPage.objContentTitleLiveTV, 20, "Content title");
			consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleLiveTV,
					"Content Title").toString();
		} else {
//			waitTime(6000);
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			// waitForElementAndClickIfPresent(PWASearchPage.objClosePremiumDialog, 10,
			// "Close in Language Pop Up");
//			waitTime(4000);
			type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
//			waitForElement(PWASearchPage.objSearchedResult(contentTitle), 10, "Search Result");
			waitTime(4000);
			verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {

//				waitForPlayerAdToComplete("Video Player");
				waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 10, "Close in Register Pop Up");
//				waitForPlayerAdToComplete("Video Player");

			} else if (userType.equals("SubscribedUser")) {
				// enterDevicePin(devicePin);
			} else {
				extent.extentLoggerFail("incorrectUserType", "Incorrect User Type entered in script");
				logger.error("Incorrect User Type entered in script");
				System.out.println("Incorrect User Type entered in script");
			}

//			waitForElement(PWAPlayerPage.objContentTitle, 30, "Content title");
			consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
					"Content Title").toString();
		}

		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation",
					"Successfully navigated to the correct Consumption page: " + consumptionPageTitle);
			logger.info("Successfully navigated to the correct Consumption page " + consumptionPageTitle);

//			System.out.println("contentType : " + contentType);
//			if (contentType.equals("Live TV")) {
//
////				pausePlayerForLiveTV();
//
//			} else {
////				pausePlayerAndGetLastPlayedTime();
//			}

		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Consumption page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Consumption page: " + consumptionPageTitle);
		}
	}

	public void verifyConsumptionsScreenTappingOnCard(String userType, String contentType, String contentTitle)
			throws Exception {
		extent.HeaderChildNode("Verify Consumption Page for Content type: " + contentType);
		System.out.println("Verify Consumption Page for Content type: " + contentType);
		mandatoryRegistrationPopUp(userType);
		String consumptionPageTitle = "";
		if (contentType.equals("Live TV")) {
			navigateToAnyScreenOnWeb("Live TV");
			waitForElementAndClickIfPresent(PWAShowsPage.objFirstAssetTitleLiveTvCard, 10, "Live TV Card");
			waitForElement(PWAPlayerPage.objContentTitleLiveTV, 10, "Content title");
			consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleLiveTV,
					"Content Title").toString();
		} else {
			waitTime(6000);
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
			waitTime(4000);
			waitForElement(PWASearchPage.objSearchedResult(contentTitle), 10, "Search Result");
			mandatoryRegistrationPopUp(userType);
			verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
			waitTime(10000);
			consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
					"Content Title").toString();
		}
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation",
					"Successfully navigated to the correct Consumption page: " + consumptionPageTitle);
			logger.info("Successfully navigated to the correct Consumption page: " + consumptionPageTitle);
			/*
			 * if (contentType.equals("Live TV")) { pausePlayerForLiveTV(); } else {
			 * pausePlayerAndGetLastPlayedTime(); }
			 */
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Consumption page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Consumption page: " + consumptionPageTitle);
		}
	}

	/**
	 * Method to verify share functionality and metadata comparison between Show
	 * Details and Consumption page plays in player
	 * 
	 * @param contentTitle
	 * @throws Exception
	 */
	public void verifyCTAandMetaDataInDetailsAndConsumption(String contentTitle) throws Exception {
		extent.HeaderChildNode(
				"Verify Watch Latest Episode CTA and metadata comparison between Show Details and Consumption page");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		waitForElement(PWASearchPage.objSearchNavigationTab("Shows"), 30, "Shows tab");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Shows"), "Shows tab");
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Content Title").toString();
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation", "Successfully navigated to the correct Details page");
			logger.info("Successfully navigated to the correct Details page");
			verifyElementPresent(PWAShowsPage.objWatchLatestCTA, "Watch Latest CTA button");
			String watchLatestCTAText = getElementPropertyToString("innerText", PWAShowsPage.objWatchLatestCTA,
					"Watch Latest CTA button").toString();
			if (watchLatestCTAText.equals("Watch Latest Episode")) {
				extent.extentLogger("correctButtonText", "Correct button text displayed: " + watchLatestCTAText);
				logger.info("Correct button text displayed: " + watchLatestCTAText);
			} else {
				extent.extentLoggerFail("incorrectButtonText",
						"Incorrect button text displayed: " + watchLatestCTAText);
				logger.error("Incorrect button text displayed: " + watchLatestCTAText);
			}
			partialScroll();
			verifyElementPresentAndClick(PWAShowsPage.objThirdAssetImageFirstRail, "Third asset image from first rail");
			// Get API details
			String contentURL = getWebDriver().getCurrentUrl();
			String[] abc = contentURL.split("/");
			String contentID = abc[abc.length - 1].split("\\?")[0];
			System.out.println("contentID fetched from URL: " + contentID);
			Response resp = ResponseInstance.getContentDetails(contentID, "content");
			String titleAPI = resp.jsonPath().get("title").toString();
			extent.extentLogger("apidata", "Episode title fetched from API: " + titleAPI);
			logger.info("Episode title fetched from API: " + titleAPI);

			String showtitleAPI = resp.jsonPath().get("tvshow.title").toString();
			extent.extentLogger("apidata", "Show title fetched from API: " + showtitleAPI);
			logger.info("Show title fetched from API: " + showtitleAPI);

			String episodeNoAPI = resp.jsonPath().get("orderid").toString();
			extent.extentLogger("apidata", "Episode number fetched from API: " + episodeNoAPI);
			logger.info("Episode number fetched from API: " + episodeNoAPI);

			String durationAPI = resp.jsonPath().get("duration").toString();
			extent.extentLogger("apidata", "Duration fetched from API: " + durationAPI);
			logger.info("Duration fetched from API: " + durationAPI);

			String genreAPI = resp.jsonPath().get("genre[0].value").toString();
			extent.extentLogger("apidata", "Genre fetched from API: " + genreAPI);
			logger.info("Genre fetched from API: " + genreAPI);

			String ageRatingAPI = resp.jsonPath().get("age_rating").toString();
			extent.extentLogger("apidata", "Age Rating fetched from API: " + ageRatingAPI);
			logger.info("Age Rating fetched from API: " + ageRatingAPI);

			waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 5, "Close in Register Pop Up");
			waitForPlayerAdToComplete("Video Player");
			waitTime(10000);
			String episode = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
					"Episode title in Consumption Page").toString();
			String show = getElementPropertyToString("innerText", PWAPlayerPage.objConsumptionsShowTitle,
					"Show title in Consumption Page").toString();
			String episodeNo = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaEpisode,
					"Episode Number in Consumption Page").toString();
			String duration = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaDuration,
					"Duration in Consumption Page").toString();
			String genre = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaGenre,
					"Genre in Consumption Page").toString();
			String ageRating = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaAgeRating,
					"Age Rating in Consumption Page").toString();

			if (titleAPI.equals(episode)) {
				extent.extentLogger("titleMatch", "Consumption page content Title matched with API");
				logger.info("Consumption page content Title matched with API");
			} else {
				extent.extentLoggerFail("titleMismatch", "Consumption page content Title mismatched with API");
				logger.error("Consumption page content Title mismatched with API");
			}

			if (showtitleAPI.equals(show)) {
				extent.extentLogger("showMatch", "Consumption page content Show matched with API");
				logger.info("Consumption page content Show matched with API");
			} else {
				extent.extentLoggerFail("showMismatch", "Consumption page content Show mismatched with API");
				logger.error("Consumption page content Show mismatched with API");
			}
			episodeNo = episodeNo.split("Episode ")[1];
			if (episodeNoAPI.equals(episodeNo)) {
				extent.extentLogger("episodeMatch", "Consumption page content Episode Number matched with API");
				logger.info("Consumption page content Episode Number matched with API");
			} else {
				extent.extentLoggerFail("episodeMismatch",
						"Consumption page content Episode Number mismatched with API");
				logger.error("Consumption page content Episode Number mismatched with API");
			}

			durationAPI = String.valueOf((Integer.parseInt(durationAPI) / 60));
			duration = duration.split("m")[0];
			if (durationAPI.equals(duration)) {
				extent.extentLogger("durationMatch", "Consumption page content Duration matched with API");
				logger.info("Consumption page content Duration matched with API");
			} else {
				extent.extentLoggerFail("durationMismatch", "Consumption page content Duration mismatched with API");
				logger.error("Consumption page content Duration mismatched with API");
			}

			if (genreAPI.equals(genre)) {
				extent.extentLogger("genreMatch", "Consumption page content Genre matched with API");
				logger.info("Consumption page content Genre matched with API");
			} else {
				extent.extentLoggerFail("genreMismatch", "Consumption page content Genre mismatched with API");
				logger.error("Consumption page content Genre mismatched with API");
			}

			if (ageRatingAPI.equals(ageRating)) {
				extent.extentLogger("ageRatingMatch", "Consumption page content Age Rating matched with API");
				logger.info("Consumption page content Age Rating matched with API");
			} else {
				extent.extentLoggerFail("ageRatingMismatch", "Consumption page content Age Rating mismatched with API");
				logger.error("Consumption page content Age Rating mismatched with API");
			}

		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Details page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Details page: " + consumptionPageTitle);
		}
	}

	/**
	 * Method to pause the player and get the duration lapsed
	 * 
	 * @throws Exception
	 */
	public void pausePlayerAndGetLastPlayedTime() throws Exception {
		if (!waitForElementToLeaveScreen(PWAPlayerPage.objPlayLoader, 10, "Player Loader")) {
			waitForPlayerAdToComplete("Video Player");
			if (pausePlayer() == true) {
				getPlayerDuration();
			} else {
				extent.extentLoggerFail("failedToPause", "Failed to pause Player");
				logger.error("Failed to pause Player");
			}
		}
	}

	/**
	 * Method to get the duration lapsed in the player
	 */
	public void getPlayerDuration() {
		String duration = getElementPropertyToString("innerText", PWAPlayerPage.objPlayerCurrentDuration,
				"Player Current Duration").toString();
		if (duration != null) {
			extent.extentLogger("contentDuration", "Successfully played content " + duration);
			logger.info("Successfully played content " + duration);
		} else {
			extent.extentLoggerFail("durationFailed", "Failed to get Current Duration");
			logger.error("Failed to get Current Duration");
		}
	}

	/**
	 * Method to Pause the Player
	 */
	public boolean pausePlayer() throws InterruptedException {
		boolean playerPaused = false;
		for (int trial = 0; trial <= 4; trial++) {
			try {
				click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
				// click(PWAPlayerPage.objPlayerPause, "Player Pause");
				try {
					getWebDriver().findElement(PWAPlayerPage.playBtn);
					extent.extentLogger("playerPaused", "Paused the Player");
					logger.info("Paused the Player");
					playerPaused = true;
					break;
				} catch (Exception e) {
				}
			} catch (Exception e) {
				Thread.sleep(1000);
				if (trial == 4) {
					extent.extentLoggerFail("errorOccured", "Error when handling Player");
					logger.error("Error when handling Player");
				}
			}
		}
		return playerPaused;
	}

	@SuppressWarnings("unused")
	public void firefoxpause() throws InterruptedException {
		boolean playerPaused = false;

		// getWebDriver().findElement(By.xpath("//i[@class='playkit-icon
		// playkit-icon-pause']")).click();

		for (int trial = 0; trial <= 4; trial++) {
			try {

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();

				WebElement menuOption1 = getWebDriver().findElement(By.xpath("//div[@class='playkit-overlay-action']"));
				actions.moveToElement(menuOption1).perform();

//			    Thread.sleep(1000);
//			    if(checkElementDisplayed(PWAPlayerPage.objPlayerPause, "Player Pause"))
//			    {
				click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
//					click(PWAPlayerPage.objPlayerPause, "Player Pause");
//			    }

				try {
					getWebDriver().findElement(PWAPlayerPage.playBtn);
					extent.extentLogger("playerPaused", "Paused the Player");
					logger.info("Paused the Player");
					playerPaused = true;
					break;
				} catch (Exception e) {
				}
			} catch (Exception e) {
				Thread.sleep(1000);
				if (trial == 4) {
					extent.extentLoggerFail("errorOccured", "Error when handling Player");
					logger.error("Error when handling Player");
				}
			}
		}

	}

	public boolean pauseLivePlayer() throws InterruptedException {
		boolean playerPaused = false;
		for (int trial = 0; trial <= 4; trial++) {
			try {
				click(PWAPlayerPage.objPlayer, "Player");
				// Thread.sleep(1000);
				// (PWAPlayerPage.objPlayerPause, "Player Pause");
				try {
					getWebDriver().findElement(PWAPlayerPage.playBtn);
					extent.extentLogger("playerPaused", "Paused the Player");
					logger.info("Paused the Player");
					playerPaused = true;
					break;
				} catch (Exception e) {
				}
			} catch (Exception e) {
				Thread.sleep(1000);
				if (trial == 4) {
					extent.extentLoggerFail("errorOccured", "Error when handling Player");
					logger.error("Error when handling Player");
				}
			}
		}
		return playerPaused;
	}

	/**
	 * Waits for player loader to complete
	 * 
	 * @throws Exception
	 */
	public void waitForPlayerLoaderToComplete() throws Exception {
		// verifyElementNotPresent(PWAPlayerPage.objPlayerLoader, 60);

		new WebDriverWait(getWebDriver(), 120)
				.until(ExpectedConditions.invisibilityOfElementLocated(PWAPlayerPage.objPlayerLoader));
	}

	/**
	 * Video Player or Live Player Ad verify
	 * 
	 * @param playerType
	 * @throws Exception
	 */
	public void waitForPlayerAdToComplete(String playerType) throws Exception {
		boolean adWasDisplayed = false;
		boolean playerDisplayed = false;
		int confirmCount = 0;
		waitTime(5000);
		main: for (int trial = 0; trial < 120; trial++) {
			try {
				findElement(PWAPlayerPage.objAd);
				adWasDisplayed = true;
				if (trial == 5) {
					logger.info("Ad play in progress");
					extent.extentLogger("AdPlayInProgress", "Ad play in progress");
					try {
						getWebDriver().findElement(PWAPlayerPage.objAd);
					} catch (Exception e) {
					}
				}
				if (Math.floorMod(trial, 15) == 0)
					System.out.println("Ad play in progress");
				Thread.sleep(1000);

//				//SkipAD
//				if(checkElementDisplayed(PWAPlayerPage.objSkipAd, "SkipAd")){
//					Thread.sleep(5000);
//					click(PWAPlayerPage.objSkipAd, "SkipButton");					
//				}
//				else
//				{
//					System.out.println("No Skip Button Displayed");
//				}

			} catch (Exception e) {
				try {
					if (playerType.equals("Live Player")) {
						findElement(PWAPlayerPage.objLivePlayerLiveTag);
					} else if (playerType.equals("Video Player")) {
						findElement(PWAPlayerPage.objPlayerSeekBar);
					}
					playerDisplayed = true;
					confirmCount++;
					if (confirmCount == 1) {
						if (adWasDisplayed == false) {
							logger.info("Ad did not play");
							extent.extentLogger("AdDidNotPlay", "Ad did not play");
						} else {
							logger.info("Ad play complete");
							extent.extentLogger("AdPlayComplete", "Ad play complete");
						}
						break main;
					}
				} catch (Exception e1) {
				}
			}
		}
		if (playerDisplayed == false && adWasDisplayed == false) {
			logger.error("Ad play failure");
			extent.extentLogger("failedAd", "Ad play failure");
		}
	}

	/**
	 * The method will wait for the element to be located for a maximum of given
	 * seconds. The method terminates immediately once the element is located. The
	 * method throws error if the element could not be located within the given
	 * seconds
	 */
	public boolean waitForElement(By locator, int seconds, String message) throws InterruptedException {
		for (int time = 0; time <= seconds; time++) {
			try {
				getWebDriver().findElement(locator);
				logger.info("Located element " + message);
				extent.extentLogger("locatedElement", "Located element " + message);
				return true;
			} catch (Exception e) {
				Thread.sleep(1000);
				if (time == seconds) {
					logger.error("Failed to locate element " + message);
					extent.extentLoggerFail("failedLocateElement", "Failed to locate element " + message);
				}
			}
		}
		return false;
	}

	/**
	 * Pause Player for Live TV
	 * 
	 * @throws Exception
	 */
	public void pausePlayerForLiveTV() throws Exception {
		if (!waitForElementToLeaveScreen(PWAPlayerPage.objPlayLoader, 10, "Player Loader")) {
			waitForPlayerAdToComplete("Live Player");
			if (pauseLivePlayer()) {
				try {
					getWebDriver().findElement(PWAPlayerPage.objLivePlayerVolume);
					extent.extentLogger("livePlayerVolume", "Located Live Player Volume");
					logger.info("Located Live Player Volume");
				} catch (Exception e) {
					extent.extentLoggerFail("livePlayerVolume", "Failed to locate Live Player Volume");
					logger.error("Failed to locate Live Player Volume");
				}
			}
		}
	}

	public boolean waitForElementToLeaveScreen(By locator, int seconds, String message) throws Exception {
		waitTime(2000);
		for (int time = 0; time <= seconds; time++) {
			try {
				getWebDriver().findElement(locator);
				Thread.sleep(1000);
				if (time == seconds) {
					logger.info(message + " is displayed");
					extent.extentLogger("element is displayed", message + " is displayed");
					return true;
				}
			} catch (Exception e) {
				logger.info(message + " is not displayed");
				extent.extentLogger("element is displayed", message + " is not displayed");
				return false;
			}
		}
		return false;
	}

	public void enterDevicePin(String devicePin) throws Exception {
		boolean devicePinPresent = false;
// wait and check if device pin box appears
		for (int trial = 0; trial <= 4; trial++) {
			try {
				getWebDriver().findElement(PWAHomePage.objDevicePin1);
				devicePinPresent = true;
			} catch (Exception e) {
				Thread.sleep(1000);
			}
		}
		if (devicePinPresent == true) {
			for (int trial = 0; trial <= 4; trial++) {
				try {
					getWebDriver().findElement(By.xpath("//input[@id='parentLockId1']"))
							.sendKeys(devicePin.substring(0, 1));
					getWebDriver().findElement(By.xpath("//input[@id='parentLockId2']"))
							.sendKeys(devicePin.substring(1, 2));
					getWebDriver().findElement(By.xpath("//input[@id='parentLockId3']"))
							.sendKeys(devicePin.substring(2, 3));
					getWebDriver().findElement(By.xpath("//input[@id='parentLockId4']"))
							.sendKeys(devicePin.substring(3, 4));
					logger.info("Entered Device PIN : " + devicePin);
					extent.extentLogger("devicePIN", "Entered Device PIN : " + devicePin);
					break;
				} catch (Exception e) {
					Thread.sleep(2000);
					if (trial == 4) {
						logger.error("Failed to enter device PIN");
						extent.extentLoggerFail("devicePINfail", "Failed to enter device PIN");
					}
				}
			}
		}
	}

	/**
	 * Dismiss the Display Language pop up
	 */
	public void dismissDisplayContentLanguagePopUp() throws Exception {
		extent.HeaderChildNode("Dismiss Display and Content Language Pop Ups");
		waitForElementAndClickIfPresent(PWAHomePage.objContinueDisplayContentLangPopup, 90,
				"Continue on Display Language Pop Up");
		Thread.sleep(5000);
		waitForElementAndClickIfPresent(PWAHomePage.objContinueDisplayContentLangPopup, 10,
				"Continue on Content Language Pop Up");
	}

	public void verifyWatchLatestEpisodeCTA(String contentTitle) throws Exception {
		extent.HeaderChildNode("Verify Watch Latest Episode CTA");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Shows"), "Shows tab");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Content Title").toString();
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation",
					"Successfully navigated to the correct Details page: " + contentTitle);
			logger.info("Successfully navigated to the correct Details page: " + contentTitle);
			verifyElementPresent(PWAShowsPage.objWatchLatestCTA, "Watch Latest CTA button");
			String watchLatestCTAText = getElementPropertyToString("innerText", PWAShowsPage.objWatchLatestCTA,
					"Watch Latest CTA button").toString();
			if (watchLatestCTAText.equals("Watch Latest Episode")) {
				extent.extentLogger("correctButtonText", "Correct button text displayed: " + watchLatestCTAText);
				logger.info("Correct button text displayed: " + watchLatestCTAText);
			} else {
				extent.extentLoggerFail("incorrectButtonText",
						"Incorrect button text displayed: " + watchLatestCTAText);
				logger.error("Incorrect button text displayed: " + watchLatestCTAText);
			}
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Details page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Details page: " + consumptionPageTitle);
		}
	}

	public void verifyShareAndMetaDataInDetailsAndConsumption(String contentTitle) throws Exception {
		extent.HeaderChildNode(
				"Verify Share functionality and metadata comparison between Show Details and Consumption page");
		boolean sharePassed = false;
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 60, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Content Title").toString();
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation",
					"Successfully navigated to the correct details page: " + contentTitle);
			logger.info("Successfully navigated to the correct Details page: " + contentTitle);
			// Share functionality
			waitForElementAndClickIfPresent(PWAShowsPage.objShareIcon, 5, "Share Icon");
			waitForElementAndClickIfPresent(PWALiveTVPage.objFacebookShareBtn, 5, "Share to Facebook");
			switchToWindow(2);
			if (checkElementDisplayed(PWALiveTVPage.objFacebookEmailField, "Facebook Email field")) {
				// waitForElementAndClickIfPresent(PWALiveTVPage.objFacebookEmailField, 5,
				// "Facebook Email field");
				click(PWALiveTVPage.objFacebookEmailField, "Facebook Email field");
				getWebDriver().findElement(PWALiveTVPage.objFacebookEmailField).sendKeys("igszeetest@gmail.com");
				verifyElementPresentAndClick(PWALiveTVPage.objFacebookPasswordField, "Facebook Password field");
				getWebDriver().findElement(PWALiveTVPage.objFacebookPasswordField).sendKeys("igs@12345");
				waitForElementAndClickIfPresent(PWALiveTVPage.objFacebookLoginBtn, 5, "Facebook Login button");
				waitTime(2000);
				verifyAlert();
			}
			waitForElementAndClickIfPresent(PWALiveTVPage.objPostToFacebookBtn, 5, "Post to Facebook");
			waitTime(3000);
			acceptAlert();
			switchToWindow(1);
			waitTime(3000);
			verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title in Zee5 PWA");
			sharePassed = true;
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Details page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Details page: " + consumptionPageTitle);
		}
		if (sharePassed == true) {
			ScrollToTheElementWEB(PWAShowsPage.objFirstAssetTitleFirstRail);
			String detailsTitle = getElementPropertyToString("innerText", PWAShowsPage.objFirstAssetTitleFirstRail,
					"Content Title in Details Page").toString();
			String detailsEpisode = getElementPropertyToString("innerText", PWAShowsPage.objFirstAssetEpisodeFirstRail,
					"Content Episode number in Details Page").toString();
			String detailsDate = getElementPropertyToString("innerText",
					PWAShowsPage.objFirstAssetDurationFirstRail, "Content total Duration in Details Page").toString();
			System.out.println("Data fetched from Show details: Title: " + detailsTitle + ", Episode: " + detailsEpisode
					+ ", Date: " + detailsDate);
			extent.extentLogger("dataFetched", "Data fetched from Show details: Title: " + detailsTitle + ", Episode: "
					+ detailsEpisode + ", Date: " + detailsDate);
			logger.info("Data fetched from Show details: Title: " + detailsTitle + ", Episode: " + detailsEpisode
					+ ", Date: " + detailsDate);
			detailsEpisode = detailsEpisode.split("E")[1];
			verifyElementPresentAndClick(PWAShowsPage.objFirstAssetImageFirstRail, "First asset image from first rail");
			waitForElementDisplayed(PWAPlayerPage.objContentTitle, 10);
			String consumptionTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
					"Content Title in Consumption Page").toString();
			String consumptionEpisode = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaEpisode,
					"Content Episode Number in Consumption Page").toString();
			String consumptionDate = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaDate,
					"Content Date in Consumption Page").toString();
			System.out.println("Data fetched from Consumptions page: Title: " + consumptionTitle + ", Episode: "
					+ consumptionEpisode + ", Duration: " + consumptionDate);
			extent.extentLogger("dataFetched", "Data fetched from Consumptions page: Title: " + consumptionTitle
					+ ", Episode: " + consumptionEpisode + ", Date: " + consumptionDate);
			logger.info("Data fetched from Consumptions page: Title: " + consumptionTitle + ", Episode: "
					+ consumptionEpisode + ", Date: " + consumptionDate);
			consumptionEpisode = consumptionEpisode.split("Episode ")[1];
			if (detailsTitle.equals(consumptionTitle)) {
				extent.extentLogger("titleMatch",
						"Details page and Consumption page content Title matched: " + consumptionTitle);
				logger.info("Details page and Consumption page content Title matched: " + consumptionTitle);
			} else {
				extent.extentLoggerFail("titleMismatch",
						"Details page and Consumption page content mismatched: " + consumptionTitle);
				logger.error("Details page and Consumption page content mismatched: " + consumptionTitle);
			}
			if (detailsEpisode.equals(consumptionEpisode)) {
				extent.extentLogger("episodeMatch",
						"Details page and Consumption page content episode number matched: " + consumptionEpisode);
				logger.info("Details page and Consumption page content episode number matched: " + consumptionEpisode);
			} else {
				extent.extentLoggerFail("episodeMismatch",
						"Details page and Consumption page content episode number mismatched: " + consumptionEpisode);
				logger.error(
						"Details page and Consumption page content episode number mismatched: " + consumptionEpisode);
			}
			if (consumptionDate.contains(detailsDate)) {
				extent.extentLogger("durationMatch",
						"Details page and Consumption page content date matched: " + consumptionDate);
				logger.info("Details page and Consumption page content date matched: " + consumptionDate);
			} else {
				extent.extentLoggerFail("durationMismatch",
						"Details page and Consumption page content date mismatched: " + consumptionDate);
				logger.error(
						"Details page and Consumption page content date duration mismatched: " + consumptionDate);
			}
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Details page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Details page: " + consumptionPageTitle);
		}

		if (checkElementDisplayed(PWAPlayerPage.objWebZeeLogo, "ZeeLogo") == true) {
			click(PWAPlayerPage.objWebZeeLogo, "Zeelogo");
		} else {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ") == true) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
			click(PWAPlayerPage.objWebZeeLogo, "Zeelogo");
		}
	}

	public void acceptAlert() {
		try {
			getWebDriver().switchTo().alert().accept();
			logger.info("Dismissed the alert Pop Up");
			extent.extentLogger("Alert PopUp", "Dismissed the alert Pop Up");
		} catch (Exception e) {

		}
	}

	public void verifySubscriptionPopupForPremiumContent(String userType, String contentTitle) throws Exception {
		extent.HeaderChildNode("Verify Subscription Popup For Premium Content");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		waitTime(4000);
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		waitForElement(PWASearchPage.objSearchNavigationTab("Movies"), 30, "Movies tab");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Movies"), "Movies tab");
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 60, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		if (!waitForElementPresence(PWAPremiumPage.objPremiumPopUp, 1, "Premium Pop Up")) {
			if (userType.equals("Guest"))
				waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 5, "Close in Register Pop Up");
			waitForElement(PWAPlayerPage.objContentTitle, 20, "Content title");
			String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
					"Content Title").toString();
			if (consumptionPageTitle.contains(contentTitle)) {
				extent.extentLogger("correctNavigation",
						"Successfully navigated to the correct Consumption page: " + contentTitle);
				logger.info("Successfully navigated to the correct Consumption page: " + contentTitle);
				if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
					waitForElement(PWAPremiumPage.objPremiumPopUp, 15, "Premium Pop Up");
					waitForElementAndClickIfPresent(PWASearchPage.objClosePremiumDialog, 1, "Close in Premium Pop Up");
				} else {
					waitForElementAbsence(PWAPremiumPage.objPremiumPopUp, 15, "Premium Pop Up for Subscribed User");
				}
			} else {
				extent.extentLoggerFail("incorrectNavigation",
						"Navigated to incorrect Consumption page: " + consumptionPageTitle);
				logger.error("Navigated to incorrect Consumption page: " + consumptionPageTitle);
			}
		} else
			waitForElementAndClickIfPresent(PWASearchPage.objClosePremiumDialog, 1, "Close in Premium Pop Up");
	}

	/**
	 * The method will wait for the element to not be located for a maximum of given
	 * seconds. The method terminates immediately once the element is located and
	 * throws error.
	 */
	public void waitForElementAbsence(By locator, int seconds, String message) throws InterruptedException {
		main: for (int time = 0; time <= seconds; time++) {
			try {
				getDriver().findElement(locator);
				logger.error("Located element " + message);
				extent.extentLoggerFail("locatedElement", "Located element " + message);
				break main;
			} catch (Exception e) {
				Thread.sleep(1000);
				if (time == seconds) {
					logger.info("Expected behavior: " + message + " is not displayed");
					extent.extentLogger("failedLocateElement", "Expected behavior: " + message + " is not displayed");
				}
			}
		}
	}

	public void verifyNoSubscriptionPopupForFreeContent(String userType, String contentTitle) throws Exception {
		extent.HeaderChildNode("Verify No Subscription Popup For Free Content");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 60, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objfirstdata, "Searched result");
//		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		if (userType.equals("Guest")) {
			waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 5, "Close in Register Pop Up");
		}
		if (userType.equals("Guest"))
			waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 5, "Close in Register Pop Up");
		waitForElement(PWAPlayerPage.objContentTitle, 20, "Content title");
		waitTime(10000);
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title").toString();
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation",
					"Successfully navigated to the correct Consumption page: " + contentTitle);
			logger.info("Successfully navigated to the correct Consumption page: " + contentTitle);
			waitForElementAbsence(PWAPremiumPage.objPremiumPopUp, 45, "Premium Pop Up");
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Consumption page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Consumption page: " + consumptionPageTitle);
		}
	}

	public boolean waitForElementAndClickIfPresent(By locator, int seconds, String message)
			throws InterruptedException {
		for (int time = 0; time <= seconds; time++) {
			try {
				findElement(locator).click();
				logger.info("Clicked on " + message);
				extent.extentLogger("locatedElement", "Clicked on " + message);
				return true;
			} catch (Exception e) {
				Thread.sleep(1000);
			}
		}
		return false;
	}

	public boolean waitForElementPresence(By locator, int seconds, String message) throws Exception {
		try {
			WebDriverWait w = new WebDriverWait(getWebDriver(), seconds);
			w.until(ExpectedConditions.visibilityOfElementLocated(locator));
			logger.info(message + " is displayed");
			extent.extentLogger("element is displayed", message + " is displayed");
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	/**
	 * Function Scroll to Element
	 *
	 * @param element
	 * @throws Exception
	 */
	public void ScrollToTheElementWEB(By element) throws Exception {
		JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
		jse.executeScript("arguments[0].scrollIntoView(true);", findElement(element));
		jse.executeScript("window.scrollBy(0,-250)", "");
	}

	public void tearDown() {
		getWebDriver().quit();
	}

	public void navigateHome() {
		getWebDriver().get(getParameterFromXML("url"));
		getWebDriver().manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	}

	public void BackButton(int x) {
		try {
			if (getPlatform().equals("Android")) {
				for (int i = 0; i < x; i++) {
					getDriver().navigate().back();
					logger.info("Back button is tapped");
					extent.extentLogger("Back", "Back button is tapped");
				}
			} else if (getPlatform().equals("Web")) {
				getWebDriver().navigate().back();
				logger.info("Back button is tapped");
				extent.extentLogger("Back", "Back button is tapped");
			}
		} catch (Exception e) {
			logger.error(e);
		}
	}

	public static void partialScroll() {
		JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
		jse.executeScript("window.scrollBy(0,250)", "");
	}

	public static void scrollDownByY(int y) {
		JavascriptExecutor js = (JavascriptExecutor) getWebDriver();
		js.executeScript("window.scrollBy(0," + y + ")", "");
	}

	/**
	 * fetch selected languages
	 * 
	 * @throws Exception
	 */
	public String allSelectedLanguagesWEB() throws Exception {
		waitTime(3000);
		(new WebDriverWait(getWebDriver(), 60))
				.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(PWAHamburgerMenuPage.objLanguageBtnWEB));
		Actions act = new Actions(getWebDriver());
		act.moveToElement(getWebDriver().findElement(PWAHamburgerMenuPage.objLanguageBtnWEB));
		click(PWAHamburgerMenuPage.objLanguageBtnWEB, "Language button");
//    		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "content languages");
		(new WebDriverWait(getWebDriver(), 60)).until(
				ExpectedConditions.visibilityOfAllElementsLocatedBy(PWAHamburgerMenuPage.objContentLanguageWrapper));
		List<WebElement> allSelectedLanguages = getWebDriver().findElements(PWAHamburgerMenuPage.objSelectedLanguages);

		String langtext = "";
		for (int i = 0; i < allSelectedLanguages.size(); i++) {

			langtext = allSelectedLanguages.get(i).getAttribute("for").replace("content_", "") + "," + langtext;
		}
		String finalLangString = langtext.replaceAll(",$", "");
		waitForElementAndClick(PWAHamburgerMenuPage.objLanguageBtnWEB, 2, "Language button");
		return finalLangString;
	}

	public void verifyMetadataOnCarousel(String screen, String pageName, String languageSmallText) throws Exception {
		extent.HeaderChildNode("Verifying metadata of carousel pages on page : " + screen);
		navigateToAnyScreenOnWeb(screen);
		waitTime(5000);
		boolean isTitlePresent = false;

		System.out.println("Selected languages : " + languageSmallText);
		List<String> allMetaTitleOnCarouselAPI = ResponseInstance.traysTitleCarousel(pageName, languageSmallText);
		System.out.println("API Data : " + allMetaTitleOnCarouselAPI);

		for (int i = 0; i < allMetaTitleOnCarouselAPI.size(); i++) {
			for (int j = 0; j < 30; j++) {
				isTitlePresent = false;
				try {
					WebElement mastHeadEle = (new WebDriverWait(getWebDriver(), 60))
							.until(ExpectedConditions.presenceOfElementLocated(
									PWAHomePage.objContTitleTextCarouselWeb(allMetaTitleOnCarouselAPI.get(i))));
					isTitlePresent = checkElementDisplayedUsingWebEl(mastHeadEle, "Carousel Title");
				} catch (Exception e) {
				}
				if (isTitlePresent == true) {
					break;
				} else {
					click(PWANewsPage.objRight, "Right button of Carousel");
				}
			}
			if (isTitlePresent == true) {
				logger.info("API title " + allMetaTitleOnCarouselAPI.get(i) + " is present on UI");
				extent.extentLogger("Metadata validation",
						"API title " + allMetaTitleOnCarouselAPI.get(i) + " is present on UI");
			} else {
				logger.error("API title did not matched with UI title");
				extent.extentLoggerFail("Metadata validation", "API title did not matched with UI title");
			}
		}
	}

	public boolean checkElementDisplayedUsingWebEl(WebElement ele, String str) throws Exception {
		try {
			WebElement element = ele;
			if (element.isDisplayed()) {
				logger.info("" + str + " is displayed");
				extent.extentLogger("" + str + " is displayed", "" + str + " is displayed");
				return true;
			}
		} catch (Exception e) {
			logger.info(str + " is not displayed");
			extent.extentLogger("" + str + " is not displayed", "" + str + " is not displayed");
			return false;
		}
		return false;
	}

//--------------------------------------------------------SANITY FUNCUIONALITY----------------------------------------------------------

	/**
	 * ================================BASAVARAJ TIMED
	 * ANCHORS==================================
	 * 
	 */

	/**
	 * ================SHREENIDHI Mandatory registration======================
	 * 
	 */

	public void registerPopUpScenarios(String userType) throws Exception {
		switch (userType) {
		case "Guest":
			extent.HeaderChildNode("Guest user scenario");
			extent.extentLogger("Accessing as Guest User", "Accessing as Guest User");
			logger.info("Accessing as Guest User");
			registerPopUpFunctionalityWeb(userType);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("NonSubscribedUser scenario");
			extent.extentLogger("Accessing as NonSubscribedUser User", "Accessing as NonSubscribedUser User");
			logger.info("Accessing as NonSubscribedUser User");
			completeProfilePopupWeb();
			ZeeWEBPWALogin(userType);
			break;
		}
	}

	public void registerPopUpFunctionalityWeb(String userType) throws Exception {
		extent.HeaderChildNode("Premium content popup functionality");
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(13000);

		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search content");

		Thread.sleep(2000);
		if (checkElementDisplayed(PWASearchPage.objMandatoryPopup, "Pop Up") == false) {
			logger.info("Register Popup is not displayed for premium content");
			extent.extentLogger("Pop-Up", "Register Popup is not displayed for premium content");

		} else {
			click(PWASearchPage.objCloseRegisterDialog, "Pop Up");
			logger.info("Register Popup is displayed for premium content");
			extent.extentLoggerFail("Pop-Up", "Register Popup is displayed for premium content");

		}

		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			click(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}

		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			click(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}

		extent.HeaderChildNode("SignUp-PopUp Funtionality");
		Thread.sleep(2000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		checkElementDisplayed(PWAHomePage.objSearchField, "Search field");
		String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWAHomePage.objSearchField, keyword1, "Search");
		waitTime(10000);
		// mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword1), "Search Result");
		waitTime(10000);
		if (checkElementDisplayed(PWASearchPage.objMandatoryPopup, "Pop Up")) {
			logger.info("Register Popup is displayed");
			extent.extentLogger("Pop-Up", "Register Popup is displayed");
			logger.info("PopUp is verifed in portrait mode");
			extent.extentLogger("Popup", "PopUp is verifed in portrait mode");
			checkElementDisplayed(PWAHomePage.objPopUpMobileField, "Mobile field in pop up");
			type(PWAHomePage.objPopUpMobileField, "9964955239", "Mobile field");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objsendotp, "otp button");
			if (checkElementDisplayed(PWAHomePage.objverifyNumberPopup, "PopUp")) {
				logger.info("Otp screen is displayed");
				extent.extentLogger("Popup", "Otp screen is displayed");
			}
			click(PWASearchPage.objCloseRegisterDialog, "Close button");
			click(PWAHomePage.objZeeLogo, "Zee logo");
			changeLanguageAndVerifyPopUp(userType);
		} else {
			logger.info("Register popup is not displayed");
			extent.extentLoggerFail("Popup", "Register popup is not displayed");
		}
	}

	/**
	 * Validation of Register Popup Functionality after changing the display
	 * language
	 */
	public void changeLanguageAndVerifyPopUp(String userType) throws Exception {
		extent.HeaderChildNode("Change language and verification of SignUp pop up");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageButtonWeb, "Language button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objkannadalanguage, "kannada Language button");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply buttton");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply buttton");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		checkElementDisplayed(PWAHomePage.objSearchField, "Search field");
		String keyword = getParameterFromXML("freeMovie2");
		type(PWAHomePage.objSearchField, keyword, "Search");
		waitTime(5000);
		waitForElement(PWASearchPage.objSearchedResultChangedLanguage(keyword), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResultChangedLanguage(keyword), "Search Result");
		waitTime(4000);
		if (checkElementDisplayed(PWASearchPage.objRegisterDialogAfterchangedLanguage, "Pop Up")) {
			logger.info("Register Popup is validated after changing language");
			extent.extentLogger("Pop-Up", "Register Popup is validated after changing language");
		}
		click(PWASearchPage.objCloseRegisterDialog, "Close button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMoreSettingInKannada, "More setting");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objResetSettingsToDefault, "Reset Settings to Default");
		waitTime(3000);
		click(PWAHomePage.objZeeLogo, "Zee logo");
	}

	/**
	 * Validation of Complete Profile Popup Functionality
	 */
	public void completeProfilePopupWeb() throws Exception {
		extent.HeaderChildNode("Complete profile popup functionality");
		logout();
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		extent.HeaderChildNode("Login through incomplete profile account");
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "indaus24@gmail.com", "Email Field");
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "123456", "Password field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		checkElementDisplayed(PWAHomePage.objSearchField, "Search field");
		String keyword = getParameterFromXML("freeMovie2");
		type(PWAHomePage.objSearchField, keyword, "Search");
		waitTime(5000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(3000);
		if ((checkElementDisplayed(CompleteYourProfilePopUp.objCompleteYourProfileTxt,
				"Complete Your Profile") == true)) {
			extent.HeaderChildNode("Verification of complete profile popup in potrait mode");
			logger.info("PopUp is verifed in portrait mode");
			extent.extentLogger("Popup", "PopUp is verifed in portrait mode");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objFullName, "Full name Field");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objDOBField, "DOB Field");
			type(CompleteYourProfilePopUp.objDOBField, "15101997", "DOB Field");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objGenderDropDown, "Gender drop down");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objGenderfemale, "Female option");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objMobileNo, "Mobile Number");
			type(CompleteYourProfilePopUp.objMobileNo, "95839633299", "Mobile Number");
			waitTime(3000);
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objCloseBtn, "Close Button");
			click(PWAHomePage.objZeeLogo, "Zee logo");
		} else {

			logger.info("Complete Profile pop up is not displayed");
			extent.extentLogger("Complete Profile pop up", "Complete Profile pop up is not displayed");
		}
		logout();
	}

	/**
	 * Validation of Upgrage Popup Functionality for RSVOD user
	 */
	public void rsvodPopupWeb() throws Exception {
		extent.HeaderChildNode("Functionality of Upgarde popup for RSVOD user");
		logout();
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(2000);
		verifyElementPresent(PWALoginPage.objWebLoginPageText, "Login page");
		extent.HeaderChildNode("Login through RSVOD User");
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "sooraj.igs@gmail.com", "Email Field");
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "igs@2020", "Password field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
		if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Popup") == false) {
			logger.info("Register popup is not displayed for premium user");
			extent.extentLogger("Popup", "Register popup is not displayed for premium user");
		}
		waitTime(8000);
		if (checkElementDisplayed(PWASearchPage.objUpgradePopup, "Popup")) {
			extent.HeaderChildNode("Upgrade PopUp Funtionality");
			logger.info("Upgrade popup is displayed for RSVOD user");
			extent.extentLogger("Popup", "Upgrade popup is displayed for RSVOD user");
			extent.HeaderChildNode("Verification of popup in portrait mode");
			logger.info("PopUp is verifed in portrait mode");
			extent.extentLogger("Popup", "PopUp is verifed in portrait mode");
			click(PWASearchPage.objUpgradePopupCloseButton, "Close button");
			logout();
//			validateDisplayLanguagePopup();
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
		}
	}

	/**
	 * ================================SHREENIDHI
	 * Profile==================================
	 * 
	 */

	/**
	 * Validation of Profile Functionality according user types.
	 */
	public void myProfileScenarios(String userType) throws Exception {

		switch (userType) {
		case "NonSubscribedUser":
			extent.HeaderChildNode("Non-Subscribed User Scenario");
			extent.extentLogger("Accessing as Non-Subscribed User", "Accessing as Non-Subscribed User");
			logger.info("Accessing as Non-Subscribed User");
			ProfileSanityWeb();
			ZeeWEBPWALogin(userType);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Subscribed User scenario");
			extent.extentLogger("Accessing as Subscribed User", "Accessing as Subscribed User");
			logger.info("Accessing as Subscribed User");
			ProfileSanityWeb();
			ZeeWEBPWALogin(userType);
			break;
		}
	}

	public void ProfileSanityWeb() throws Exception {
		extent.HeaderChildNode("My Profile functionality");
		scrollDownWEB();

		verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
		JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		waitTime(5000);

		if (checkElementDisplayed(PWAHamburgerMenuPage.objProfileIconInProfilePage, "Profile Icon") == false) {
			logger.info("User is navigated to previous page");
			extent.extentLogger("Navigation", "User is navigated to previous page");
		}
		JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objProfileIconInProfilePage,
				"profile icon in My profile dropdown");

		JSClick(PWAHamburgerMenuPage.objProfileIconInProfilePage,
				"profile icon in My profile dropdown");
		checkElementDisplayed(PWAHamburgerMenuPage.objMyAccountOptionsText, "My profile page");
		checkElementDisplayed(PWAHamburgerMenuPage.objUserNameInMyProfileWeb, "User name");
		checkElementDisplayed(PWAHamburgerMenuPage.objProfilePageUserIdTxt, "User id");
		checkElementDisplayed(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
		JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		NavigationsToMyWatchlist();
		NavigationsToMyReminders();
		NavigationsToMySubscriptionWeb();
		NavigationsToMyTransactionsWeb();
		JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileText, "profile text");
		extent.HeaderChildNode("Edit page Functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileTextWEB, "edit profile page");
		checkElementDisplayed(PWAHamburgerMenuPage.objEditProfileFirstName, "Name field");
		checkElementDisplayed(PWAHamburgerMenuPage.objEditProfileEmailField, "Email field");
		checkElementDisplayed(PWAHamburgerMenuPage.objEditProfileMobileNumber, "Mobile field");
		checkElementDisplayed(PWAHamburgerMenuPage.objEditProfileGender, "Gender field");
		checkElementDisplayed(PWAHamburgerMenuPage.objEditProfileDOB, "Date of birth field");
		checkElementDisplayed(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "Go back button");
		checkElementDisplayed(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "Save changes Button");
		getWebDriver().findElement(PWAHamburgerMenuPage.objEditProfileFirstName).clear();
		type(PWAHamburgerMenuPage.objEditProfileFirstName, "Zee5Igs", "First name");
		waitTime(3000);
		String firstName = findElement(PWAHamburgerMenuPage.objEditProfileFirstName).getAttribute("value");
		System.out.println(firstName);
		if (firstName.contains("Zee5")) {
			logger.info("User can edit in Edit profile screen");
			extent.extentLogger("Edit", "User can edit in Edit profile screen");
		} else {
			logger.info("User edit functionality in Edit profile screen failed");
			extent.extentLoggerFail("Edit", "User edit functionality in Edit profile screen failed");
		}
		click(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "Save changes Button");
		try {
			Boolean SavedChangesToastMessage = getWebDriver().getPageSource().contains("//*[@class='toastMessage']");
			if (SavedChangesToastMessage == true) {
				extent.extentLogger("Toast", "Saved Changes Toast Message displayed");
				logger.info("Saved Changes Toast Message displayed");
			} else {
				extent.extentLogger("Toast", "Saved Changes Toast Message not displayed");
				logger.info("Saved Changes Toast Message not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}
		waitTime(2000);
		click(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "Go back button");
//--------------------------------------------------------------------------------------------------------
		extent.HeaderChildNode("Change password page Functionality");
		waitTime(2000);
		click(PWAHamburgerMenuPage.objChangePasswordBtn, "Change password button");
		waitTime(2000);
		checkElementDisplayed(PWAHamburgerMenuPage.objChangePasswordTextWEB, "change password page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "Go back button");
		waitTime(2000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objMyAccountOptionsText, "My account")) {
			logger.info("User is navigated back to my profile page");
			extent.extentLogger("My profile", "User is navigated back to my profile page");
		}
		click(PWAHamburgerMenuPage.objChangePasswordBtn, "Change password button");
		waitTime(2000);
		verifyElementPresent(PWAHamburgerMenuPage.objChangePasswordTextWEB, "change password page");
		type(PWAHamburgerMenuPage.objChangeOldPassword, "User@123", "Current password field");
		String password = getText(PWAHamburgerMenuPage.objChangeOldPassword);
		if (password != null) {
			logger.info("User is able to enter numbers and special character");
			extent.extentLogger("Password", "User is able to enter numbers and special character");
		}
		type(PWAHamburgerMenuPage.objNewPassword, "abc", "password field");
		click(PWAHamburgerMenuPage.objUpdatePasswordButton, "update button");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objPasswordErrorText, "Error text")) {
			logger.info("Minimun 6 characters error message is displayed");
			extent.extentLogger("Error message", "Minimun 6 characters error message is displayed");
		}
		if (getWebDriver().findElement(PWAHamburgerMenuPage.objUpdatePasswordButton).isEnabled() == false) {
			logger.info("Updated button is not enabled when password field is empty");
			extent.extentLogger("Update button", "Updated button is not enabled when password field is empty");
		}
		getWebDriver().findElement(PWAHamburgerMenuPage.objNewPassword).clear();
		waitTime(3000);
		type(PWAHamburgerMenuPage.objNewPassword, "igszee5", "password field");
		type(PWAHamburgerMenuPage.objConfirmNewPassword, "igszee5", "Current confirm field");
		if (getWebDriver().findElement(PWAHamburgerMenuPage.objUpdatePasswordButton).isEnabled() == true) {
			logger.info("Updated button is enabled when password field is not empty");
			extent.extentLogger("Update button", "Updated button is enabled when password field is not empty");
		}
		click(PWAHomePage.objZeeLogo, "zee logo");
		logout();
	}

//	/**
//	 * Function for Navigation to MyWatchlist .
//	 */
//	public void NavigationsToMyWatchlist() throws Exception {
//		extent.HeaderChildNode("My Watchlist");
//		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My watchlist");
//		waitTime(2000);
//		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Watchlist");
//		click(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
//	}
//
//	/**
//	 * Function for Navigation to MyReminders .
//	 */
//	public void NavigationsToMyReminders() throws Exception {
//		extent.HeaderChildNode("My Reminders");
//		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Reminders"), "My Reminders");
//		waitTime(2000);
//		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My reminders");
//		click(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
//	}

	/**
	 * Function for Navigation to My Subscription.
	 */
	public void NavigationsToMySubscriptionWeb() throws Exception {
		extent.HeaderChildNode("My subscriptions");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
		waitTime(2000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Subscriptions page");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscribitionPageActivePlan, "My Subscription")) {
			logger.info("Subscription plan is displayed");
			extent.extentLogger("Plan", "Subscription plan is displayed");
		}
		if (checkElementDisplayed(PWAHamburgerMenuPage.objNoTranscationText, "No Transaction")) {
			logger.info("No Active plan is displayed");
			extent.extentLogger("Plan", "No Active plan is displayed");
		}
		click(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * Function for Navigation to MyTransaction.
	 */
	public void NavigationsToMyTransactionsWeb() throws Exception {
		extent.HeaderChildNode("My Transactions");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
		waitTime(2000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Transactions");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objTransactionPageGrid, "Transaction")) {
			logger.info("Transaction details is displayed");
			extent.extentLogger("Transaction", "Transaction details is displayed");
		}
		if (checkElementDisplayed(PWAHamburgerMenuPage.objNoTranscationText, "Transaction")) {
			logger.info("No transaction text is displayed");
			extent.extentLogger("Transaction", "No transaction text is displayed");
		}
		click(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * ================================BASAVARAJ TIMED
	 * ANCHORS==================================
	 * 
	 */

	public void TimedAnchors(String userType) throws Exception {

		extent.HeaderChildNode("Timed Anchors Functionality");
		extent.extentLogger("Timed Anchors", "Timed Anchors Functionality");
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		JSClick(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(3000);
		String currenturl = getWebDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=60";
		getWebDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);

//		getWebDriver().get(URL + "kids/kids-movies/bablu-dablu-robo-rumble/0-0-54219?t=60");
//		extent.extentLogger("player", "Playing Free Content");
		waitTime(10000);

		// waitForPlayerLoaderToComplete();

		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();

			}
		}

		if (userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAPlayerPage.objCompleteProfile, "Complete Profile popup ")) {
				click(PWAPlayerPage.objCompleteProfileCloseIcon, "Complete Profile Pop up close button");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}

		waitForPlayerAdToComplete("Video Player");
		System.out.println("pause");

		if (BROWSER.equals("Chrome")) {
			pausePlayer();
		} else {
			firefoxpause();
		}

		String currentDuration = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time: " + currentDuration);
		extent.extentLogger("time", "Current time: " + currentDuration);
		List<WebElement> anchors = getWebDriver().findElements(By.xpath("(//div[@playermarkertag='timer']//div)"));
		// Verify whether important segments are marked in player for Logged In user
		if (checkElementDisplayed(PWAPlayerPage.objtimedanchors, "TimedAnchor")) {
			System.out.println("TimedAnchor Present");
			extent.extentLogger("", "TimedAnchor Present");
			System.out.println("Number of Timed Anchors segments present :" + anchors.size());
			extent.extentLogger("", "Number of Timed Anchors segments present :" + anchors.size());
			if (anchors.size() >= 2) {

				click(PWAPlayerPage.objtimedAnchor(2), "Inividual timed anchor");
				Thread.sleep(7000);
				System.out.println("Clicked on Timed Anchor at position : "
						+ getAttributValue("style", PWAPlayerPage.objtimedAnchor(2)));
				extent.extentLogger("", "Clicked on Timed Anchor at position : "
						+ getAttributValue("style", PWAPlayerPage.objtimedAnchor(2)));
				String currentTime1 = getText(PWAPlayerPage.objcurrenttime);
				System.out.println(
						"Current time after clicking on the TimedAnchor :" + getText(PWAPlayerPage.objcurrenttime));
				extent.extentLogger("",
						"Current time after clicking on the TimedAnchor :" + getText(PWAPlayerPage.objcurrenttime));
				if (!getAttributValue("style", PWAPlayerPage.objtimedAnchor(1))
						.equals(getAttributValue("style", PWAPlayerPage.objtimedAnchor(2)))) {
					System.out.println("Navigated to the TimeAnchor ");
					extent.extentLogger("Navigated to the TimeAnchor ", "Navigated to the TimeAnchor ");
				} else {
					System.out.println("Not Navigated to the TimeAnchor ");
					extent.extentLoggerFail("Not Navigated to the TimeAnchor ", "Not Navigated to the TimeAnchor ");
				}

				System.out.println(getText(PWAPlayerPage.objcurrenttime));

				if (!currentDuration.equals(currentTime1)) {
					System.out.println("Clicked on TimedAnchor and Time is changed");
					extent.extentLogger("Clicked on TimedAnchor and Time is changed",
							"Clicked on TimedAnchor and Time is changed");
				} else {
					System.out.println("Clicked on TimedAnchor and Time is not changed");
					extent.extentLoggerFail("Clicked on TimedAnchor and Time is not changed",
							"Clicked on TimedAnchor and Time is not changed");
				}

				waitForPlayerAdToComplete("Video Player");
				System.out.println("pause");

				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}

				click(PWAPlayerPage.objPlayerPlay, "Play button");

				waitForPlayerAdToComplete("Video Player");

				if (AdValue.equals("AdPlayed")) {
					System.out.println("Ad Played as it was present before TimedAnchor");
					extent.extentLogger("Ad Played as it was present before TimedAnchor",
							"Ad Played as it was present before TimedAnchor");
				} else {
					System.out.println("Ad not played as it was not present before TimedAnchor");
					extent.extentLogger("Ad not played as it was not present before TimedAnchor",
							"Ad not played as it was not present before TimedAnchor");
				}

				System.out.println("pause");
				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}

				if (!currentTime1.equals(getText(PWAPlayerPage.objcurrenttime))) {
					System.out.println("Content Played after click on the TimedAnchor");
					extent.extentLogger("Content Played after click on the TimedAnchor",
							"Content Played after click on the TimedAnchor");
				} else {
					System.out.println("Content not Played after click on the TimedAnchor");
					extent.extentLoggerFail("Content not Played after click on the TimedAnchor",
							"Content not Played after click on the TimedAnchor");
				}
			}
		} else {
			System.out.println("TimedAnchor is not present");
			extent.extentLogger("", "TimedAnchor is not present");
		}

	}

	public void ShowsTimeperiodProvided(String userType) throws Exception {
		/*
		 * Verify whether playback for content(wrt shows) starts playing based on the
		 * timeperiod provided in the URL
		 */
		extent.HeaderChildNode(
				"Verify whether playback for content(wrt shows) starts playing based on the timeperiod provided in the URL");
		int timeperiod = 35;
		mandatoryRegistrationPopUp(userType);
		getWebDriver().get(URL);
//		getWebDriver().get(
//				"https://newpwa.zee5.com/tvshows/details/paaru/0-6-1179/paarvathi-kisses-aditya-paaru/0-1-manual_1dr9c5e034t0?t="
//						+ timeperiod + "");

		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorEpisode");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		// hideKeyboard();
		waitTime(5000);
		JSClick(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(3000);
		String currenturl = getWebDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=" + timeperiod;
		getWebDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);

		if (BROWSER.equals("Chrome")) {

		} else {
			Thread.sleep(10000);
			Thread.sleep(10000);
			Thread.sleep(10000);

		}

		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).build().perform();
			}
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();

				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}

		waitForPlayerAdToComplete("Video Player");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();

				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		waitForPlayerAdToComplete("Video Player");
		if (BROWSER.equals("Chrome")) {
			pausePlayer();
		} else {
			firefoxpause();
		}
		Thread.sleep(6000);

		PresentTitle = getWebDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)")).getText();

		System.out.println("Show Title : " + PresentTitle);
		String currentDuration1 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time after appending timedperiod in URL : " + currentDuration1);

		if (timeToSec(currentDuration1) >= timeperiod) {
			System.out.println("Playback started from Appended time");
			extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
		} else {
			System.out.println("Playback not started from Appended time.");
			extent.extentLoggerFail("Playback not started from Appended time",
					"Playback not started from Appended time");
		}
	}

	public void musicTimeperiodProvided(String userType) throws Exception {
		/*
		 * // Verify whether playback for content(wrt music and music-video) starts
		 * playing based on the timeperiod provided in the URL
		 */
		extent.HeaderChildNode(
				"Verify whether playback for content(wrt music and music-video) starts playing based on the timeperiod provided in the URL");
		int timeperiod2 = 25;
		mandatoryRegistrationPopUp(userType);
		getWebDriver().get(URL);
//		getWebDriver().get(
//				"https://newpwa.zee5.com/music-videos/details/appa-lyrical-punith-shetty/0-0-manual_15l5jn9il6o8?t="
//						+ timeperiod2 + "");

		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorMusic");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		// hideKeyboard();
		waitTime(4000);
		JSClick(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(3000);
		String currenturl = getWebDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=" + timeperiod2;
		getWebDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);

		if (BROWSER.equals("Chrome")) {

		} else {
			Thread.sleep(10000);
			Thread.sleep(10000);
			Thread.sleep(10000);

		}

		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}

		if (userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAPlayerPage.objCompleteProfile, "Complete Profile popup ")) {
				click(PWAPlayerPage.objCompleteProfileCloseIcon, "Complete Profile Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}

		waitForPlayerAdToComplete("Video Player");
//		if (userType.equals("Guest")) {
//			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
//				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
//			}
//		}
//		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
//			} else {
//				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
//			}
//		}
		if (BROWSER.equals("Chrome")) {
			pausePlayer();
		} else {
			firefoxpause();

		}
		Thread.sleep(6000);

		PresentTitle = getWebDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)")).getText();

		System.out.println("Show Title : " + PresentTitle);
		extent.extentLogger("", "Show Title : " + PresentTitle);
		String currentDuration2 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time after appending timedperiod in URL : " + currentDuration2);
		extent.extentLogger("", "Current time after appending timedperiod in URL : " + currentDuration2);

		if (timeToSec(currentDuration2) >= timeperiod2) {
			System.out.println("Playback started from Appended time");
			extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
		} else {
			System.out.println("Playback not started from Appended time.");
			extent.extentLoggerFail("Playback not started from Appended time",
					"Playback not started from Appended time");
		}
	}

	public void moviesTimeperiodProvided(String userType) throws Exception {
		/*
		 * // Verify whether playback for content(wrt movies) starts playing based on
		 * the timeperiod provided in the URL
		 */
		extent.HeaderChildNode(
				"Verify whether playback for content(wrt movies) starts playing based on the timeperiod provided in the URL");
		int timeperiod3 = 120;
		mandatoryRegistrationPopUp(userType);
//		getWebDriver().get(URL);

		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorMovie");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		// hideKeyboard();
		waitTime(4000);
		JSClick(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(3000);

		String currenturl = getWebDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=" + timeperiod3;
		getWebDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);

		// getWebDriver().get(URL +
		// "kids/kids-movies/bablu-dablu-robo-rumble/0-0-54219?t=" + timeperiod3 + "");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}

		waitForPlayerAdToComplete("Video Player");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		waitForPlayerAdToComplete("Video Player");
		if (BROWSER.equals("Chrome")) {
			pausePlayer();
		} else {
			firefoxpause();
		}
		Thread.sleep(3000);

		String PresentTitle = getWebDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)"))
				.getText();
		extent.extentLogger("", "Present Title : " + PresentTitle);
		String currentDuration3 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time after appending timedperiod in URL : " + currentDuration3);
		extent.extentLogger("", "Current time after appending timedperiod in URL : " + currentDuration3);
		if (timeToSec(currentDuration3) >= timeperiod3) {
			System.out.println("Playback started from Appended time");
			extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
		} else {
			System.out.println("Playback not started from Appended time.");
			extent.extentLogger("Playback not started from Appended time", "Playback not started from Appended time");
		}

		Thread.sleep(3000);

		// append max time
		getWebDriver().get(URL + "kids/kids-movies/bablu-dablu-robo-rumble/0-0-54219?t=9000");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}
		waitForPlayerAdToComplete("Video Player");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAPlayerPage.objSubscribeNowLink, "Subscriptionlink")) {
				System.out.println("Subscribe now link");
			}
		} else {
			if (BROWSER.equals("Chrome")) {
				pausePlayer();
			} else {
				firefoxpause();
			}
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		Thread.sleep(3000);
		String presentTitle2 = getWebDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)"))
				.getText();
		extent.extentLogger("", "Naviagted to : " + presentTitle2);

		if (!PresentTitle.equals(presentTitle2)) {
			System.out.println("Navigated to other Player as the time appended is max ");
			extent.extentLogger("Navigated to other Player as the time appended is max ",
					"Navigated to other Player as the time appended is max ");
		} else {
			System.out.println("Not Navigated to other Player");
			extent.extentLogger("Not Navigated to other Player", "Not Navigated to other Player");
		}
		getWebDriver().get(URL + "kids/kids-movies/bablu-dablu-robo-rumble/0-0-54219?t=60");
		Thread.sleep(5000);
	}

	public void continueWatchingtrayData(String userType) {
		/*
		 * //Verifying ContinueWatching Tray Data
		 */
		extent.HeaderChildNode("Verifying ContinueWatching Tray Data");
		mandatoryRegistrationPopUp(userType);
		getWebDriver().get(URL);

		if (userType.equals("SubscribedUser") || userType.equals("NonSubscribedUser")) {
			try {
				ScrollToTheElementWEB(By.xpath("//div[@class='trayHeader']//h2[contains(text(),'Continue Watching')]"));

				Thread.sleep(2000);
				click(PWAHomePage.objspecificTumbnail2("Continue Watching", 1), "Continue watching content");

				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
					extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
					Actions actions = new Actions(getWebDriver());
					WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
					actions.moveToElement(menuOption).perform();
				} else {
					extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
				}

				waitForPlayerAdToComplete("Video Player");

				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}

				String currentDuration4 = getText(PWAPlayerPage.objcurrenttime);
				System.out.println("Current time  : " + currentDuration4);
				extent.extentLogger("", "Current time  : " + currentDuration4);
				String getUrl = getWebDriver().getCurrentUrl();

				int timeperiod4 = 120;
				String modifiedURL = getUrl + "?t=" + timeperiod4 + "";

				getWebDriver().get(modifiedURL);
//			if(userType.equals("NonSubscribedUser")){
//				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//					extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
//				} else {
//					extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
//				}
//				
//			}
				waitForPlayerAdToComplete("Video Player");
				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}

				String currentDuration5 = getText(PWAPlayerPage.objcurrenttime);
				System.out.println("Current time after appending timedperiod in URL : " + currentDuration5);
				extent.extentLogger("", "Current time after appending timedperiod in URL : " + currentDuration5);
				if (timeToSec(currentDuration5) >= timeperiod4) {
					System.out.println("Playback started from Appended time");
					extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
				} else {
					System.out.println("Playback not started from Appended time.");
					extent.extentLoggerFail("Playback not started from Appended time",
							"Playback not started from Appended time");
				}

			} catch (Exception e) {
				System.out.println("No Continue Watching Tray");
			}
		} else {
			extent.extentLogger("", "Its Guest User, So no Continue Watching tray will be displayed");
		}
	}

	/**
	 * ================================SHREENIDHI Menu &
	 * Settings==================================
	 * 
	 */

	public void MenuOrSettingScenarios(String UserType) throws Exception {

		switch (UserType) {
		case "Guest":
			extent.HeaderChildNode("Guest user scenario");
			extent.extentLogger("Accessing as Guest User", "Accessing as Guest User");
			logger.info("Accessing as Guest User");
			verificationsOfExploreOptions();
			navigationsFromPlanSectionWeb();
			resetToDefault();
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("NonSubscribedUser scenario");
			extent.extentLogger("Accessing as NonSubscribedUser User", "Accessing as NonSubscribedUser User");
			logger.info("Accessing as NonSubscribedUser User");
			resetToDefault();
			parentControlFunctionality("Non-Subscribed");
			authenticationFunctionality();
			verificationsOfExploreOptions();
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("SubscribedUser scenario");
			extent.extentLogger("Accessing as SubscribedUser User", "Accessing as SubscribedUser User");
			logger.info("Accessing as SubscribedUser User");
			verificationsOfExploreOptions();
			resetToDefault();
			parentControlFunctionality("Subscribed");
			authenticationFunctionality();
		}
	}

	public void verificationsOfExploreOptions() throws Exception {
		extent.HeaderChildNode("Verifications of Explore dropdown options in Hamburger Menu");
		waitTime(5000);
		scrollDownWEB();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objExploreBtn, "Explore option")) {
			click(PWAHamburgerMenuPage.objExploreBtn, "Explore option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Premium"), "Premium option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Shows"), "Shows option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Movies"), "Movies option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Kids"), "Kids option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("News"), "News option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Music"), "Music option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Free Movies"), "Free Movies option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Live TV"), "LiveTv option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions(" ZEE5 Originals"), " ZEE5 Originals option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Club"), "Club option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Play"), "Play option");
			checkElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Stories"), "Stories option");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		}
	}

	public void navigationsFromPlanSectionWeb() throws Exception {
		extent.HeaderChildNode("Functionality of MyPlan options in Hamburger Menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		checkElementDisplayed(PWAHamburgerMenuPage.objPlanInHamburger, "Plan option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPlanInsideItemsBtn("Buy Subscription"),
				"Buy Subscription option in Plan section");
		waitTime(3000);
		if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription")) {
			logger.info("User is navigated to subscription page");
			extent.extentLogger("subscription page", "User is navigated to subscription page");
			click(PWAHomePage.objZeeLogo, "zee logo");
			waitTime(4000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPlanInsideItemsBtn("Have a prepaid code ?"),
					"Have a prepaid code ? option in Plan section");
			waitTime(3000);
			if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription")) {
				logger.info("User is navigated to subscription page");
				extent.extentLogger("subscription page", "User is navigated to subscription page");
				click(PWAHomePage.objZeeLogo, "zee logo");
				if (checkElementDisplayed(PWAHomePage.objSubscripePopupHomePage, "Pop up")) {
					logger.info("Subscribe popup in home page is dislayed");
					extent.extentLogger("Popup", "Subscribe popup in home page is dislayed");
					waitTime(3000);
					click(PWAHomePage.objSubscripePopupCloseButtonHomePage, "Close button in popup");
				}
			}
		}

	}

	public void resetToDefault() throws Exception {
		extent.HeaderChildNode("Reset Settings to default Functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMoreSettingInHamburger,
				"More settings in settings section");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtnWEB, "Language button");
		waitTime(2000);
		click(PWAHamburgerMenuPage.objSelectLanguage, "Language icon");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objAfterSelectedLanguage, "Language")) {
			logger.info("clicked on hindi language in Display language popup");
			extent.extentLogger("Content language", "clicked on hindi language in Display language popup");
		}
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objResetSettingsToDefault, "Reset Settings to Default");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtnWEB, "Language button");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objAfterSelectedLanguage, "Hindi Selected Language") == false) {
			logger.info("Reset to default is success");
			extent.extentLogger("Content language", "Reset to default is success");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
		} else {
			logger.info("Reset to defualt was unsuccessfull");
			extent.extentLogger("Reset to defualt", "Reset to defualt was unsuccessfull");
		}
	}

	public void parentControlFunctionality(String UserType) throws Exception {
		extent.HeaderChildNode("Parent Control Functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
		checkElementDisplayed(PWALoginPage.objPasswordField, "password field");
		String password = "";
		if (UserType.equals("Non-Subscribed")) {
			password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("NonsubscribedPassword");
		} else if (UserType.equals("Subscribed")) {
			password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("SubscribedPassword");
		}
		type(PWALoginPage.objPasswordField, password, "Password field");
		click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
		waitTime(2000);
		checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
		checkElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objRestrictAll, "Restrict all option");
		verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1, "Set Lock Field");
		type(PWAHamburgerMenuPage.objParentalLockPin1, "1", "ParentalLockPin");
		type(PWAHamburgerMenuPage.objParentalLockPin2, "2", "ParentalLockPin");
		type(PWAHamburgerMenuPage.objParentalLockPin3, "3", "ParentalLockPin");
		type(PWAHamburgerMenuPage.objParentalLockPin4, "4", "ParentalLockPin");
		waitTime(4000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
		waitTime(2000);
		checkElementDisplayed(PWAHomePage.objZeeLogo, "zee logo");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		checkElementDisplayed(PWAHomePage.objSearchField, "Search field");
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWAHomePage.objSearchField, keyword, "Search");
		waitTime(15000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search content");
		waitTime(5000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objParentalLockPopUpInPlayer, "Parent control Popup")) {
			type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
		}
		waitTime(5000);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		if (checkElementDisplayed(PWAPlayerPage.playBtn, "Pause icon")) {
			logger.info("Playback is played after entering parental lock");
			extent.extentLogger("Playback", "Playback is played after entering parental lock");
		} else {
			logger.info("Playback is not started after entering parental lock");
			extent.extentLogger("Playback", "Playback is not started after entering parental lock");
		}
		click(PWAHomePage.objZeeLogo, "zee logo");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
		checkElementDisplayed(PWALoginPage.objPasswordField, "password field");
		type(PWALoginPage.objPasswordField, password, "Password field");
		waitTime(2000);
		click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
		waitTime(2000);
		checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
		click(PWAHamburgerMenuPage.objParentalLockNoRestrictionOption, "No restriction option");
		checkElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
	}

	public void authenticationFunctionality() throws Exception {
		extent.HeaderChildNode("Authentication Functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objAuthenticationOption, "Authentication option");
		waitTime(3000);
		checkElementDisplayed(PWAHamburgerMenuPage.objAuthenticationText, "Authentication Page");
		if (getWebDriver().findElement(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted).isEnabled() == false) {
			logger.info("Authenticate button is not highlighted by default");
			extent.extentLogger("Authenticate", "Authenticate button is not highlighted by default");
		}
		type(PWAHamburgerMenuPage.objAuthenticationField, "abcdef", "AuthenticationField");
		String AuthenticationField = getText(PWAHamburgerMenuPage.objAuthenticationField);
		if (AuthenticationField != null) {
			logger.info("User is able to enter the value in AuthenticationField");
			extent.extentLogger("AuthenticationField", "User is able to enter the value in AuthenticationField");
		}

		if (getWebDriver().findElement(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted).isEnabled()) {
			logger.info("Authenticate button is highlighted after entering the input in AuthenticationField");
			extent.extentLogger("Authenticate",
					"Authenticate button is highlighted after entering the input in AuthenticationField");
		}

		click(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted, "Authenticate button");
		try {
			Boolean ExpiredToastMessage = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']"))
					.isDisplayed();
			if (ExpiredToastMessage == true) {
				extent.extentLogger("Toast", "Expired Toast message displayed");
				logger.info("Expired Toast message displayed");
			} else {
				extent.extentLogger("Toast", "Expired Toast message not displayed");
				logger.info("Expired Toast message not displayed");
			}
			int lenText = findElement(PWAHamburgerMenuPage.objAuthenticationField).getAttribute("value").length();
			for (int i = 0; i < lenText; i++) {
				getWebDriver().findElement(PWAHamburgerMenuPage.objAuthenticationField).sendKeys(Keys.BACK_SPACE);
			}
			waitTime(2000);
			type(PWAHamburgerMenuPage.objAuthenticationField, "&!@#$%", "AuthenticationField");
			waitTime(2000);
			click(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted, "Authenticate button");
			Boolean NotfounfToastMessage = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']"))
					.isDisplayed();
			if (NotfounfToastMessage == true) {
				extent.extentLogger("Toast", "Not found Toast message displayed");
				logger.info("Not found Toast message displayed");
			} else {
				extent.extentLogger("Toast", "Not found Toast message not displayed");
				logger.info("Not found Toast message not displayed");
			}
		} catch (Exception e) {
			logger.info("Toast message is not displayed");
		}
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
	}

	/**
	 * ================================SUSHMA
	 * Onboarding==================================
	 * 
	 */

	public void phoneNumberRegistration() throws Exception {
		extent.HeaderChildNode(
				"verifing that user is able to enter Mobile number, Password, date of birth, gender in Registration page");
		click(PWALoginPage.objSignUpBtnWEB, "Sign up button");
		waitForElementDisplayed(PWALoginPage.objEmailField, 5);
		checkElementDisplayed(PWALoginPage.objEmailField, "Email/PhoneNo Field");
		type(PWALoginPage.objEmailField, "7892215", "PhoneNumber Field");
		String PhoneNumberField = getText(PWALoginPage.objEmailField);
		if (PhoneNumberField != null) {
			logger.info("User is allowed to enter PhoneNumber");
			extentLogger("PhoneNumber", "User is allowed to enter PhoneNumber in PhoneNumber Field");
		}
		checkElementDisplayed(PWALoginPage.objIncorrectPhoneNumberMessage,
				"When User Enter Invalid PhoneNumber, Error Message");
		type(PWALoginPage.objEmailField, "214", "PhoneNumber Field");
		if (checkElementDisplayed(PWALoginPage.objIncorrectPhoneNumberMessage, "PhoneNumber Error Message") == false) {
			logger.info("User is allowed to enter valid PhoneNumber");
			extent.extentLogger("PhoneNumber", "User is allowed to enter valid PhoneNumber");
		}
		checkElementDisplayed(PWALoginPage.objCountryCode, "Country code field");
		click(PWALoginPage.objCountryCode, "Country code field");
		checkElementDisplayed(PWALoginPage.objCountryCodeDropDown, "Drop down of country code");
		click(PWALoginPage.objCountryCodeAlgeria, "Algeria country code");
		click(PWALoginPage.objCountryCode, "Country code field");
		click(PWALoginPage.objCountryCodeAndoora, "Andoora country code");
		click(PWALoginPage.objCountryCode, "Country code field");
		click(PWALoginPage.objCountryCodeIndia, "India country code");

		if (getWebDriver().findElement(PWASignupPage.objSignUpButtonHighlightedWeb).isEnabled()) {
			logger.info("SignUp button is highlighted");
			extent.extentLogger("Continue button", "SignUp button is highlighted");
		}
		click(PWASignupPage.objSignUpButtonHighlightedWeb, "SignUp Button");
		extent.HeaderChildNode(
				"Verifing that user is allowed to update the mobile number, password, date of birth and gender post navigating back from change number button");
		waitTime(10000);
		click(PWASignupPage.objChangeNumberLink, "Change number link");
		waitTime(5000);
		type(PWALoginPage.objEmailField, "7892215214", "PhoneNumber Field");
		click(PWASignupPage.objSignUpButtonHighlightedWeb, "Continue Button");
		extent.HeaderChildNode("verifing OTP Screen");
		waitForElementDisplayed(PWASignupPage.objOTPTimer, 5);
		checkElementDisplayed(PWASignupPage.objOTPTimer, "OTP timer");
		String otpTimer1 = getText(PWASignupPage.objOTPTimer);
		String OtpTimer1 = otpTimer1.substring(3);
		int otp1 = Integer.parseInt(OtpTimer1);
		System.out.println(otp1);
		waitTime(6000);
		String otpTimer2 = getText(PWASignupPage.objOTPTimer);
		String OtpTimer2 = otpTimer2.substring(3);
		int otp2 = Integer.parseInt(OtpTimer2);
		System.out.println(otp2);
		if (!otpTimer1.equals(otpTimer2)) {
			logger.info("The Otp timer is in reverse order");
			extentLogger("OtpTimer", "The Otp timer is in reverse order");
		}
		waitTime(60000);
		if (verifyElementPresent(PWASignupPage.objResendOtpOption, "Resend button")) {
			logger.info("ResendOtp option is active after 60seconds");
			extent.extentLogger("ResendOtp", "ResendOtp option is active after 60seconds");
		}
		type(PWASignupPage.objOTP1, "a", "OTP box1");
		type(PWASignupPage.objOTP2, "b", "OTP box2");
		type(PWASignupPage.objOTP3, "c", "OTP box3");
		type(PWASignupPage.objOTP4, "d", "OTP box4");
		waitTime(2000);
		if (getWebDriver().findElement(PWASignupPage.objSignUpButtonHighlighted).isEnabled() == false) {
			logger.info("Verify Button is not highlighted when user enter non numeric value in otp section");
			extent.extentLogger("Verify",
					"Verify Button is not highlighted when user enter non numeric value in otp section");
		}
		type(PWASignupPage.objOTP1, "1", "OTP box1");
		type(PWASignupPage.objOTP2, "2", "OTP box2");
		type(PWASignupPage.objOTP3, "3", "OTP box3");
		type(PWASignupPage.objOTP4, "4", "OTP box4");
		waitTime(3000);
		if (getWebDriver().findElement(PWASignupPage.objVerifyBtnWeb).isEnabled() == true) {
			logger.info("Verify Button is highlighted");
			extent.extentLogger("Verify", "Verify Button is highlighted");
			verifyElementPresentAndClick(PWASignupPage.objVerifyBtnWeb, "Verified Button");
			try {
				Boolean Message = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
				if (Message == true) {
					extent.extentLogger("Toast", "Toast message displayed");
					logger.info("Toast message displayed");
				} else {
					System.out.println("Toast message is not displayed");
				}
			} catch (Exception e) {
				System.out.println("Toast message is not displayed");
			}
		}
		Back(2);
	}

	public void emailRegistration() throws Exception {
		extent.HeaderChildNode(
				"verifing that user is able to enter Email-Id, Password, date of birth, gender in Registration page");
		click(PWALoginPage.objSignUpBtnWEB, "Sign up button");
		waitForElementDisplayed(PWALoginPage.objSignUpHeaderInSignUpPageWeb, 10);
		checkElementDisplayed(PWALoginPage.objSignUpHeaderInSignUpPageWeb, "SignUp Page");
		checkElementDisplayed(PWALoginPage.objEmailField, "Email/PhoneNo Field");
		if (checkElementDisplayed(PWALoginPage.objPasswordField, "Password field") == false) {
			logger.info("Password field is not displayed when email field is empty");
			extent.extentLogger("Password Field", "Password field is not displayed when email field is empty");
		}
		type(PWALoginPage.objEmailField, "zee5latest@gmail.com", "Email field");

		if (checkElementDisplayed(PWALoginPage.objPasswordField, "Password field") == true) {
			logger.info("Password field is displayed when user enter email-id");
			extent.extentLogger("Password Field", "Password field is displayed when user enter email-id");
		}
		type(PWALoginPage.objPasswordField, "abc", "password field");
		click(PWASignupPage.objSignUpButtonNotHighlightedWeb, "SignUp Button");
		checkElementDisplayed(PWASignupPage.objPasswordErrorMessage, "Password error message");
		int lenText = findElement(PWALoginPage.objEmailField).getAttribute("value").length();
		for (int i = 0; i < lenText; i++) {
			getWebDriver().findElement(PWALoginPage.objPasswordField).sendKeys(Keys.BACK_SPACE);
		}
		waitTime(2000);
		type(PWALoginPage.objPasswordField, "user@123", "password field");
		if (checkElementDisplayed(PWASignupPage.objPasswordHiddenField, "password field")) {
			logger.info("Password field is hidden before tapping on password icon");
			extentLogger("Password", "Password field is hidden before tapping on password icon");
		}
		click(PWASignupPage.objPasswordIcon, "Password icon");
		if (checkElementDisplayed(PWASignupPage.objPasswordFieldShow, "Password")) {
			logger.info("Password field is shown when user taps on password icon");
			extent.extentLogger("Password", "Password field is shown when user taps on password icon");
		}
		click(PWASignupPage.objPasswordIcon, "Password icon");
		calenderFunctionality();
		String SelectedDate = getText(PWALoginPage.objDateOfBirthField);
		if (SelectedDate != null) {
			logger.info("Value in date of field is entered correctly");
			extent.extentLogger("DateOfField", "Value in date of field is entered correctly");
		}
		click(PWASignupPage.objGenderMaleBtn, "Gender Option");
		if (checkElementDisplayed(PWASignupPage.objSignUpButtonHighlightedWeb, "SignUp button")) {
			logger.info("SignUp button is highlighted");
			extent.extentLogger("Continue button", "SignUp button is highlighted");
		}
		click(PWASignupPage.objSignUpButtonHighlightedWeb, "SignUp button");
		try {
			Boolean Message = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
			if (Message == true) {
				extent.extentLogger("Toast", "The user could not be found message displayed");
				logger.info("The user could not be found message displayed");
			} else {
				System.out.println("Toast message is not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}
		Back(1);
		waitTime(5000);
	}

	public void facebookLogin() throws Exception {
		extent.HeaderChildNode("Login through Facebook");
		getWebDriver().get(URL);
		verifyElementPresentAndClick(PWALoginPage.objLoginBtnWEB, "Login button");

		waitForElementDisplayed(PWALoginPage.objFacebookIcon, 10);

		checkElementDisplayed(PWALoginPage.objGoogleIcon, "Google icon");
		waitTime(1000);
		checkElementDisplayed(PWALoginPage.objTwitterIcon, "Twitter icon");

		checkElementDisplayed(PWALoginPage.objFacebookIcon, "Facebook icon");

		waitTime(10000);
		click(PWALoginPage.objFacebookIcon, "Facebook Icon");
		switchToWindow(2);

		if (checkElementDisplayed(PWALandingPages.objWebProfileIcon, "Profile icon")) {
			logger.info("User Logged in Successfully");
			extent.extentLogger("Logged in", "User Logged in Successfully");

		}

		else {
			checkElementDisplayed(PWALoginPage.objFacebookPageVerificationWeb, "Facebook page");
			verifyElementPresent(PWALoginPage.objFacebookLoginEmailWeb, " Email Field");
			type(PWALoginPage.objFacebookLoginEmailWeb, "igstesttt@gmail.com", "Emial Field");
			verifyElementPresent(PWALoginPage.objFacebookLoginpasswordWeb, " Password Field");
			type(PWALoginPage.objFacebookLoginpasswordWeb, "Igs123!@#", "Password Field");
			verifyElementPresentAndClick(PWALoginPage.objFacebookLoginButtonInFbPageWeb, "Login Button");
			switchToWindow(1);
			waitForElementDisplayed(PWALandingPages.objWebProfileIcon, 20);
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile icon")) {
				logger.info("User Logged in Successfully");
				extent.extentLogger("Logged in", "User Logged in Successfully");
			}
		}
		logout();
	}

	public void forgotPasswordEmail() throws Exception {
		extent.HeaderChildNode("Verifications in Forgot Password page for Email Id");

		verifyElementPresentAndClick(PWALoginPage.objLoginBtnWEB, "Login button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALoginPage.objForgotPasswordTxt, "Forgot password");

		type(PWALoginPage.objEmailField, "igsss12345igs@gmail.com", "Email field");
		click(PWALoginPage.objForgotPasswordLinkButtonWEB, "Reset password button");
		try {
			Boolean Message = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
			if (Message == true) {
				extent.extentLogger("Toast", "The user could not be found message displayed");
				logger.info("The user could not be found message displayed");
			} else {
				System.out.println("Toast message is not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}
		waitTime(3000);

		int lenText = findElement(PWALoginPage.objEmailField).getAttribute("value").length();
		for (int i = 0; i < lenText; i++) {
			getWebDriver().findElement(PWALoginPage.objEmailField).sendKeys(Keys.BACK_SPACE);
		}

		waitTime(3000);
		type(PWALoginPage.objEmailField, "Zee5latest@gmail", "Email field");

		if (getWebDriver().findElement(PWALoginPage.objForgotPasswordLinkButtonWEB).isEnabled() == false) {
			logger.info("'Send Password reset link' button is not highlighted when user enters a invalid email id.");
			extent.extentLogger("Invalid Email",
					"'Send Password reset link' button is not highlighted when user enters a invalid email id.");
		}

		type(PWALoginPage.objEmailField, ".com", "Email field");

		if (checkElementDisplayed(PWALoginPage.objForgotPasswordMessage, "Message")) {
			logger.info("Supporting description is displayed");
			extent.extentLogger("Forgot password", "Supporting description is displayed");
		}

		if (getWebDriver().findElement(PWALoginPage.objForgotPasswordLinkButtonWEB).isEnabled() == true) {
			logger.info("'Send Password reset link' button is highlighted when user enters a valid email id.");
			extent.extentLogger("Valid Email",
					"'Send Password reset link' button is highlighted when user enters a valid email id.");
		}
		click(PWALoginPage.objForgotPasswordLinkButtonWEB, "Reset password button");

		try {
			Boolean Message = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
			if (Message == true) {
				extent.extentLogger("Toast",
						"'Password reset link has been sent to your registered Email ID' message displayed");
				logger.info(" 'Password reset link has been sent to your registered Email ID' message displayed");
			} else {
				System.out.println("Toast message is not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}

	}

	public void forgotPasswordMobileNumber() throws Exception {
		extent.HeaderChildNode("Verifications in Forgot Password page for Mobile Number");

		JSClick(PWALoginPage.objLoginBtnWEB, "Login button");

		verifyElementPresentAndClick(PWALoginPage.objForgotPasswordTxt, "Forgot password");
		waitTime(2000);
		type(PWALoginPage.objEmailField, "789221", "Email field");
		if (getWebDriver().findElement(PWALoginPage.objForgotPasswordLinkButtonWEB).isEnabled() == false) {
			logger.info("Continue button is not highlighted when user enter invalid mobile number");
			extent.extentLogger("Continue", "Continue button is not highlighted when user enter invalid mobile number");
		}

		type(PWALoginPage.objEmailField, "5214", "Email field");
		if (checkElementDisplayed(PWALoginPage.objForgotPasswordMessage, "Message")) {
			logger.info("Supporting description is displayed");
			extent.extentLogger("Forgot password", "Supporting description is displayed");
		}
		if (getWebDriver().findElement(PWALoginPage.objForgotPasswordLinkButtonWEB).isEnabled() == true) {
			logger.info("Continue button is not highlighted when user enter invalid mobile number");
			extent.extentLogger("Continue", "Continue button is not highlighted when user enter invalid mobile number");
		}
		click(PWALoginPage.objForgotPasswordLinkButtonWEB, "Continue button");
		waitTime(3000);
		checkElementDisplayed(PWALoginPage.objNewPasswordField, "New password page");
		type(PWALoginPage.objNewPasswordField, "User@123", "Password field");
		type(PWALoginPage.objConfirmNewPasswordField, "User@123", "Confirm Password field");
		click(PWALoginPage.objSetNewPasswordButton, "Continue button");
		if (checkElementDisplayed(PWALoginPage.objOTPVerifyPage, "OTP verification page")) {
			logger.info("User is redirected to verify otp page");
			extent.extentLogger("OTP", "User is redirected to verify otp page");
		}
		Back(4);
	}

	public void calenderFunctionality() throws Exception {
		if (checkElementDisplayed(PWASignupPage.objYearPickerTab, "Year")) {
			click(PWASignupPage.objDayPickerTab, "Day picker");
			click(PWASignupPage.objDayPickerTabValue, "Day picker value");
			click(PWASignupPage.objMonthPickerTab, "Month Picker");
			click(PWASignupPage.objMonthPickerTabValue, "Month Picker value");
			click(PWASignupPage.objYearPickerTab, "Year Picker");
			if (checkElementDisplayed(PWASignupPage.objYearPickerTabValueNotActive, "Further year") == false) {
				logger.info("User is not allowed to select future date/year in calender tab");
				extent.extentLogger("Calender", "User is not allowed to select future date/year in calender tab");
			}
			click(PWASignupPage.objYearPickerTabValue, "Year Picker value");
		} else {
			click(PWALoginPage.objDateOfBirthField, "Date Of Birth Field");
			checkElementDisplayed(PWALoginPage.objCalenderPopUp, "Calender PopUp");
			click(PWALoginPage.objSelectDateInCalender, "Date in Calender");
		}
	}

	public void twitterLogin() throws Exception {
		extent.HeaderChildNode("Login through Twitter");

		verifyElementPresentAndClick(PWALoginPage.objLoginBtnWEB, "Login button");
		waitForElementDisplayed(PWALoginPage.objLoginPageheader, 10);

		waitForElementDisplayed(PWALoginPage.objTwitterIcon, 10);
		checkElementDisplayed(PWALoginPage.objTwitterIcon, "Twitter icon");
		waitTime(1000);

		click(PWALoginPage.objTwitterIcon, "twitter Icon");
		switchToWindow(2);

		if (checkElementDisplayed(PWALandingPages.objWebProfileIcon, "Profile icon")) {
			logger.info("User Logged in Successfully");
			extent.extentLogger("Logged in", "User Logged in Successfully");
			logout();

		}

		else {
			verifyElementPresent(PWALoginPage.objTwitterEmaildField, " Email Field");
			type(PWALoginPage.objTwitterEmaildField, "Zee5latest@gmail.com", "Emial Field");

			verifyElementPresent(PWALoginPage.objTwitterPasswordField, " Password Field");
			type(PWALoginPage.objTwitterPasswordField, "User@123", "Password Field");

			verifyElementPresentAndClick(PWALoginPage.objTwitterSignInButton, "Login Button");
			getWebDriver().close();
			switchToParentWindow();
			waitForElementDisplayed(PWALandingPages.objWebProfileIcon, 20);
			if (checkElementDisplayed(PWALandingPages.objWebProfileIcon, "Profile icon")) {
				logger.info("User Logged in Successfully");
				extent.extentLogger("Logged in", "User Logged in Successfully");
				logout();
			} else {
				logger.info("User is not logged in Successfully");
				extent.extentLoggerFail("Logged in", "User is not logged in Successfully");
				Back(1);
			}
		}

	}

	/**
	 * ================================SUSHMA
	 * LiveTV==================================
	 * 
	 */

	public void liveLandingPage(String userType) throws Exception {
		extent.HeaderChildNode("Verifing whether user is able to navigate Live Tv landing page");
		waitTime(10000);
		navigateToAnyScreenOnWeb("Live TV");
		// waitTime(20000);
		// waitForElementDisplayed(PWAHomePage.objHighlightedTab("Live TV"), 30);
		if (verifyElementPresent(PWAHomePage.objActiveTab, "Live TV")) {
			logger.info("Live Tv tab is highlighted, user is able to navigate Live Tv landing page");
			extent.extentLogger("Live Tv landing page",
					"Live Tv tab is highlighted, user is able to navigate Live Tv landing page");
		}
		extent.HeaderChildNode(
				"Verifing that On tapping of 'Right side bottom arrow' user is navigated to top of screen");
		waitTime(5000);
		Back_TO_TopArrow_Web(userType);
		waitForElementDisplayed(PWALiveTVPage.objLiveTvFilterOption, 5);
		if (checkElementDisplayed(PWALiveTVPage.objLiveTvFilterOption, "Filter option")) {
			logger.info("On tapping of 'Right side bottom arrow' user is navigated to top of screen without scrolling");
			extent.extentLogger("Right side bottom arrow",
					"On tapping of 'Right side bottom arrow' user is navigated to top of screen without scrolling");
		}
//			extent.HeaderChildNode("Verifing that Hamburger menu overlay is displayed on mouse hover on header menu option");
		Actions actions = new Actions(getWebDriver());
//			 WebElement hamburgerMenu = getWebDriver().findElement(PWAHomePage.objHamburgerMenu);
//			 actions.moveToElement(hamburgerMenu).perform();
//			 verifyElementPresent(PWAHamburgerMenuPage.objhamburgerMenuOverlayHomeBtnWeb, "hamburger menu overlay");
		extent.HeaderChildNode("Verifing that on content card after mouse hovor, play, share buttons are displayed");
		WebElement contentcard = getWebDriver().findElement(PWALiveTVPage.objCardTitle);
		actions.moveToElement(contentcard).perform();
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objPlayiconAfterMouseHover, "Play icon");
		verifyElementPresent(PWAHomePage.objShareiconAfterMouseHover, "Share icon");
	}

	public void live() throws Exception {
		extent.HeaderChildNode("verifying that multiple languages are given to select with apply and reset button");
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTvFilterOption, "Filter option");
		waitTime(2000);
		List<WebElement> languages = getWebDriver()
				.findElements(By.xpath("//div[contains(@class,'language noSelect')]"));
		languages.size();
		if (languages.size() > 1) {
			logger.info("Multiple languages are given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are given for selection");
		} else {
			logger.info("Multiple languages are not given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are not given for selection");
		}
		verifyElementPresent(PWALiveTVPage.objApplyBtn, "Apply button");
		verifyElementPresent(PWALiveTVPage.objResetBtn, "Reset button");
		verifyElementPresentAndClick(PWALiveTVPage.objCloseLanguagePopuUpBtn,
				"Close button of Filter language setting window");
	}

	public void premiumPopUp() throws Exception {
		extent.HeaderChildNode(
				"Verifing that Subscribe now or Login pop is displayed when user click on premium content");
//		while (!(checkElementDisplayed(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content"))) {
//			scrollDownWEB();
//		}

		for (int scroll = 0; scroll <= 4; scroll++) {
			if (checkElementDisplayed(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content")) {
				break;
			} else
				scrollByWEB();
		}

		click(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content");
		waitForElementDisplayed(PWAPremiumPage.objPremiumPopUp, 15);
		if (checkElementDisplayed(PWAPremiumPage.objPremiumPopUp, "Premium PopUp")) {
			verifyElementPresentAndClick(PWAPremiumPage.objClosePremiumPopup, "Premium PopUp Close icon");
			extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
			if (checkElementDisplayed(PWALiveTVPage.objPlayerInlineSubscriptionLink,
					"Player inline Subscribtion link")) {
				logger.info(
						"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
				extent.extentLogger("Maximize icon",
						"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
			}
		} else {
			extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
			waitForPlayerAdToComplete2("Video Player");
			waitForElementDisplayed(PWAPlayerPage.objPlayerscreen, 120);
			pause();
			// click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
//				if(checkElementDisplayed(PWAPlayerPage.objPlayerPause, "Pause icon"))
//				{
//					click(PWAPlayerPage.objPlayerPause, "Pause icon");
//				}
			verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize icon");
			click(PWAPlayerPage.maximizeBtn, "Maximize icon");
			for (int i = 0; i < 5; i++) {
				if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
					logger.info("User is able to watch Premium content in landscape mode");
					extent.extentLogger("Landscape mode", "User is able to watch Premium content in landscape mode");
					break;
				} else {
					click(PWAPlayerPage.objPlayer, "player screen");
				}
			}
		}
		Back(1);
		extent.HeaderChildNode("Verifing that user is able to watch the free Content");
		verifyElementPresentAndClick(PWALiveTVPage.objFilterOption("FREE Channels"), "Free Channels filter");
		waitForElementDisplayed(PWALiveTVPage.objFirstfreeContentCard, 5);
		verifyElementPresentAndClick(PWALiveTVPage.objFirstfreeContentCard, "Free Content card");
		// waitForElementDisplayed(PWAPremiumPage.objPremiumPopUp, 5);
		if (!(checkElementDisplayed(PWAPremiumPage.objPremiumPopUp, "Premium PopUp"))) {
			logger.info("user is able to watch the free Content");
			extent.extentLogger("Free content", "user is able to watch the free Content");
		}
		extent.HeaderChildNode("Verifing that free content videos in landscape mode");
		waitForPlayerAdToComplete2("Video Player");
//			JSClick(PWAPlayerPage.objPlayer, "player screen");
//			if(checkElementDisplayed(PWAPlayerPage.objPlayerPause, "Pause icon"))
//			{
//				JSClick(PWAPlayerPage.objPlayerPause, "Pause icon");
//			}
		waitForElementDisplayed(PWAPlayerPage.objPlayerscreen, 120);
		pause();
		verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize icon");
		JSClick(PWAPlayerPage.maximizeBtn, "Maximize icon");
		for (int i = 0; i < 5; i++) {
			if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
				logger.info("User is able to watch free content in landscape mode");
				extent.extentLogger("Landscape mode", "User is able to watch free content in landscape mode");
				break;
			} else {
				JSClick(PWAPlayerPage.objPlayer, "player screen");
			}
		}
		Back(1);
	}

	public void pause() {
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(By.xpath("//*[@class='kaltura-player-container']"));
		actions.moveToElement(menuOption).perform();
		getWebDriver().findElement(By.xpath("//i[@class='playkit-icon playkit-icon-pause']")).click();
	}

	public void ChannelGuide(String userType) throws Exception {
		extent.HeaderChildNode("Validating that user is navigated to channel guide screen");
		verifyElementPresentAndClick(PWALiveTVPage.objNothighlightedChannelGuideToggle, "Channel guide toggle");
		waitForElementDisplayed(PWALiveTVPage.objHighlightedChannelGuideToggle, 5);
		if (verifyElementPresent(PWALiveTVPage.objHighlightedChannelGuideToggle, "Channel guide toggle")) {
			logger.info("Channel guide toggle is highlighted, User is navigated to Channel guide screen");
			extent.extentLogger("Channel guide",
					"Channel guide toggle is highlighted, User is navigated to Channel guide screen");
		}
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			extent.HeaderChildNode("Validating that user is able to add to reminders the  Upcoming Live Program");
			remainderOptionOnUpcomingShow();
			click(PWALiveTVPage.objTodayDate, "Today's date");
		}
		extent.HeaderChildNode("Validating that user is able to scroll trough the channel list");
		waitForElementDisplayed(PWALiveTVPage.objFirstOngoingLiveTvShowCard, 20);
		scrollDownWEB();
		scrollToTopOfPageWEB();
		logger.info("user is able to scroll trough the channel list");
		extent.extentLogger("Scroll", "user is able to scroll trough the channel list");
		extent.HeaderChildNode("Validating that On going live show cards are highlighted");
		waitForElementDisplayed(PWALiveTVPage.objFirstOngoingLiveTvShowCard, 20);
		checkElementDisplayed(PWALiveTVPage.objFirstOngoingLiveTvShowCard, "Ongoing Live Tv show card");
		String ongoingLiveTvcardClass = getAttributValue("class", PWALiveTVPage.objFirstOngoingLiveTvShowCard);
		if (ongoingLiveTvcardClass.contains("active")) {
			logger.info("On going live show cards are highlighted on channel guide screen");
			extent.extentLogger("On going live show card",
					"On going live show cards are highlighted on channel guide screen");
		} else {
			logger.info("On going live show cards are not highlighted on channel guide screen");
			extent.extentLogger("On going live show card",
					"On going live show cards are not highlighted on channel guide screen");
		}
		extent.HeaderChildNode("Validating that user is navigated to respective live TV consumption screen");
		String onGoingLiveTvShowCardTitle = getText(PWALiveTVPage.objOngoingLiveTvShowTitle);
		System.out.println(onGoingLiveTvShowCardTitle);
		verifyElementPresent(PWALiveTVPage.objOngoingLiveTvShowTitle, "Ongoing Live TV Show card");
		JSClick(PWALiveTVPage.objOngoingLiveTvShowTitle, "Ongoing Live TV Show card");
		waitForElementDisplayed(PWASearchPage.objShowTitleInconsumptionPage(onGoingLiveTvShowCardTitle), 5);
//		while (!(checkElementDisplayed(PWASearchPage.objShowTitleInconsumptionPage(onGoingLiveTvShowCardTitle),
//				"Title in Consumption Screen"))) {
//			scrollDownWEB();
//		}
		String ConsumptionScreenShowTitle = getText(
				PWASearchPage.objShowTitleInconsumptionPage(onGoingLiveTvShowCardTitle));
		System.out.println(ConsumptionScreenShowTitle);
		if (ConsumptionScreenShowTitle.contains(onGoingLiveTvShowCardTitle)) {
			logger.info("user is navigated to respective consumption screen");
			extent.extentLogger("Consumption Screen", "user is navigated to respective consumption screen");
		} else {
			logger.info("user is not navigated to respective consumption screen");
			extent.extentLogger("Consumption Screen", "user is not navigated to respective consumption screen");
		}
		Back(2);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
	}

	public void Back_TO_TopArrow_Web(String usertype) throws Exception {

		scrollToBottomOfPageWEB();
		if (usertype.equalsIgnoreCase("Guest")) {
			if (checkElementDisplayed(PWAHomePage.objWhatWonderingPopUp, "Wondering popUp")) {
				waitTime(3000);
				click(PWAHomePage.objWhatWonderingPopUpCloseIcon, "Close icon");
			}
		}
		// waitForElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, 20);
		if (checkElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top")) {
			click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
			System.out.println("Scrolled back to top using Back to top button");
		}

	}

	public void remainderOptionOnUpcomingShow() throws Exception {
		// Click on date
		waitTime(10000);
		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");
		waitTime(5000);
		FilterLanguage();
		waitTime(5000);
		while (!(checkElementDisplayed(PWALiveTVPage.objparticularTime, "choosed time"))) {
			waitTime(1000);
			// click(PWALiveTVPage.objTimeSlotRightArrowMark, "Right Arrow");
			getWebDriver()
					.findElement(By.xpath(
							"//div[@class='outerTimeContainer']/child::div[contains(@class, 'ic_back rightArrow')]"))
					.click();
		}
		waitTime(5000);
		// Verify Share and Remainder option is available
		click(PWALiveTVPage.objShowNameweb, "Show");
		verifyElementPresent(PWALiveTVPage.objShareOption, "Share option");
		if (checkElementDisplayed(PWALiveTVPage.objRemainderButton, "Remainder option for upcoming show ")) {
			click(PWALiveTVPage.objRemainderButton, "Remainder option");

			extent.extentLogger("Remainder option", "User can click on Remainder option");
			logger.info("User can click on Remainder option");
		} else {

			extent.extentLoggerFail("Remainder option", "User can not click on Remainder option");
			logger.info("User can not click on Remainder option");
		}

		// Click on close button
		click(PWALiveTVPage.objPopupCloseButton, "Close button");
	}

	public void FilterLanguage() throws Exception {
		click(PWALiveTVPage.objFilterLanguageChannelGuide, "Filter language");
		int size = findElements(PWALiveTVPage.objSelectedlang).size();
		for (int i = 1; i <= size; i++) {
			getWebDriver().findElement(By.xpath("//div[contains(@class,'selectedLanguage language noSelect')]"))
					.click();

		}
		click(PWALiveTVPage.objKannadaLang, "Kannada language");
		click(PWALiveTVPage.objApplyBtn, "Apply button");

	}

	/**
	 * ================================MANASA
	 * SUBSCRIPTION==================================
	 * 
	 */

	/*
	 * Validating if selected Content language is displayed in the Regional Pack
	 */
	public void contentLanguageVerify(String userType) throws Exception {
		if (userType.contains("Guest") || userType.contains("NonSubscribedUser")) {
			extent.HeaderChildNode("Validating if selected Content language is displayed in the Regional Pack");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtnWEB, "Language Button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, "Content Language");
			List<WebElement> selectedLanguages = getWebDriver().findElements(PWAHamburgerMenuPage.objSelectedLanguages);
			System.out.println(selectedLanguages.size());
			ArrayList<String> contentLanguages = new ArrayList<String>();
			for (int i = 1; i <= selectedLanguages.size(); i++) {
				System.out.println("Selected Content Language : " + getWebDriver().findElement(By.xpath(
						"((//div[@class='checkboxWrap checkedHighlight'])//child::*[@class='commonName'])[" + i + "]"))
						.getText());
				contentLanguages.add(getWebDriver().findElement(By.xpath(
						"((//div[@class='checkboxWrap checkedHighlight'])//child::*[@class='commonName'])[" + i + "]"))
						.getText());
			}
			System.out.println(contentLanguages);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplyBtn, "Apply Button");
			waitTime(2000);
			verifyElementPresentAndClick(PWAHomePage.objWEBSubscribeBtn, "Subscribe button");
			waitTime(5000);
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have a Code");
//			List<WebElement> selectedRegionalLanguages = getWebDriver().findElements(PWASubscriptionPages.objPackTypes);
//			System.out.println("selectedRegionalLanguages size : " + selectedRegionalLanguages.size());
//			for (int i = 2; i <= selectedRegionalLanguages.size(); i++) {
//				System.out.println(getText(PWASubscriptionPages.objPackType(i)));
//				if (contentLanguages.contains(getText(PWASubscriptionPages.objPackType(i)))) {
//					System.out.println("Regional pack is displayed as per the selected content language");
//					getWebDriver().findElement(By.xpath(
//							"(//span[@class='noSelect'][.='" + getText(PWASubscriptionPages.objPackType(i)) + "'])"))
//							.click();
//					List<WebElement> packs = getWebDriver().findElements(PWASubscriptionPages.objPackTitle);
//					System.out.println("Number of packs available " + packs.size());
//					for (int k = 1; k <= packs.size(); k++) {
//						logger.info("Pack Type : " + getWebDriver()
//								.findElement(By.xpath("((//div[@class='planDescription']))[" + k + "]")).getText());
//						extent.extentLogger("Pack Type", "Pack Type : " + getWebDriver()
//								.findElement(By.xpath("((//div[@class='planDescription']))[" + k + "]")).getText());
//						logger.info("Pack Amount : " + getWebDriver()
//								.findElement(By.xpath("(//p[@class='currency'])[" + k + "]")).getText());
//						extent.extentLogger("Pack Amount", "Pack Amount : " + getWebDriver()
//								.findElement(By.xpath("(//p[@class='currency'])[" + k + "]")).getText());
//						logger.info("Pack Duration : " + getWebDriver()
//								.findElement(By.xpath("(//p[@class='duration'])[" + k + "]")).getText());
//						extent.extentLogger("Pack Duration", "Pack Duration : " + getWebDriver()
//								.findElement(By.xpath("(//p[@class='duration'])[" + k + "]")).getText());
//					}
//				}
//			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}


	/*
	 * Zee Subscription Page Validation
	 */
	public void verifyUIofZEESubscriptionPage(String userType) throws Exception {
		if (userType.contains("Guest") || userType.contains("NonSubscribedUser")) {
			extent.HeaderChildNode("Zee Subscription Page Validation");
			verifyElementPresentAndClick(PWAHomePage.objWEBSubscribeBtn, "Subscribe button");
			extent.HeaderChildNode("Validating if Have a code section is displayed on Zee subscription screen.");
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have a Code section");
//			String packTitle = getText(PWASubscriptionPages.objPackCategoryTabSelected);
//			logger.info(packTitle);
//			extent.extentLogger("Pack Title", packTitle + " is displayed");
			String packDescription = getText(PWASubscriptionPages.objPackDescription);
			logger.info(packDescription);
			extent.extentLogger("Pack Description", packDescription + " is displayed");
//			extent.HeaderChildNode("Verifying the Default selected Pack ");
//			String defaultSelectedPackTitle = getText(PWASubscriptionPages.objSelectedSubscriptionPlanType);
//			logger.info("Default Selected Pack Type " + defaultSelectedPackTitle);
//			extent.extentLogger("Default Selected Pack Type", "Default Selected Pack Type " + defaultSelectedPackTitle);
			String defaultSelectedPackAmount = getText(PWASubscriptionPages.objSelectedSubscriptionPlanAmount);
			logger.info("Default Selected Pack Amount " + defaultSelectedPackAmount);
			extent.extentLogger("Default Selected Pack Amount",
					"Default Selected Pack Type " + defaultSelectedPackAmount);
			String defaultSelectedPackDuration = getText(PWASubscriptionPages.objSelectedSubscriptionPlanDuration);
			logger.info("Default Selected Pack Duration " + defaultSelectedPackDuration);
			extent.extentLogger("Default Selected Pack Duration",
					"Default Selected Pack Duration " + defaultSelectedPackDuration);
			extent.HeaderChildNode("Verifying the URL of the page");
			String url = getWebDriver().getCurrentUrl();
			logger.info("URL of the page : " + url);
			extent.extentLogger("URL", "URL of the page : " + url);
			extent.HeaderChildNode("Validating if the Coupon code accepts special characters");
			String code = "zee5pt20@&*";
			//verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "'Have A Code?' field");
			
			type(PWASubscriptionPages.objHaveACodetoenter, code, "Prepaid Code");
			String codeVerify = findElement(PWASubscriptionPages.objHaveACodetoenter).getAttribute("value");

			System.out.println(codeVerify);
			if (code.equals(codeVerify)) {
				logger.info("Coupon code accepts special characters");
				extent.extentLogger("Coupon code", "Coupon code accepts special characters");
			} else {
				logger.info("Coupon code does not accept special characters");
				extent.extentLogger("Coupon code", "Coupon code does not accept special characters");
			}
			verifyElementPresentAndClick(PWASubscriptionPages.objApplyBtn, "Apply Button");
			waitTime(2000);
			verifyElementPresent(PWASubscriptionPages.objAppliedCodeFailureMessage, "Failure message");
			String failureMsg = getText(PWASubscriptionPages.objAppliedCodeFailureMessage);
			logger.info(failureMsg);
			extent.extentLogger("Failure Message", failureMsg + " is displayed");
			waitTime(2000);
			verifyElementPresentAndClick(PWASubscriptionPages.objremovebtn, "remove Button");
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have A Code section");
			type(PWASubscriptionPages.objHaveACodetoenter, "GET10", "Prepaid Code");
			verifyElementPresentAndClick(PWASubscriptionPages.objApplyBtn, "Apply Button");
			waitTime(2000);
			boolean ele1 = verifyElementPresent(PWASubscriptionPages.objAppliedSuccessfullyMessage,
					"Applied Successfully message");
			String successMessage = getText(PWASubscriptionPages.objAppliedSuccessfullyMessage);
			logger.info(successMessage);
			extent.extentLogger("Success Message", successMessage + " is displayed");
			waitTime(2000);
			verifyElementPresentAndClick(PWASubscriptionPages.objCancelBtn, "Change Button");
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have A Code section");
			type(PWASubscriptionPages.objHaveACodetoenter, "get10 ", "Prepaid Code");
			verifyElementPresentAndClick(PWASubscriptionPages.objApplyBtn, "Apply Button");
			waitTime(2000);
			boolean ele2 = verifyElementPresent(PWASubscriptionPages.objAppliedSuccessfullyMessage,
					"Applied Successfully message");
			String successMsg = getText(PWASubscriptionPages.objAppliedSuccessfullyMessage);
			logger.info(successMsg);
			extent.extentLogger("Success Message", successMsg + " is displayed");
			waitTime(2000);
			extent.HeaderChildNode("Validating if the Coupon code is case insensitive");
			if (ele1 && ele2 == true) {
				logger.info("Coupon code is case insensitive");
				extent.extentLogger("Coupon code", "Coupon code is case insensitive");
			} else {
				logger.info("Coupon code is case sensitive");
				extent.extentLogger("Coupon code", "Coupon code is case sensitive");
			}
			extent.HeaderChildNode(
					"Validating the plans with discounted amount is displayed if applied code is successful.");
			List<WebElement> discountedPackAmount = getWebDriver().findElements(PWASubscriptionPages.objPackAmount);
			System.out.println(discountedPackAmount.size());
			for (int i = 1; i <= discountedPackAmount.size(); i++) {
				logger.info("Discounted Pack Amount : "
						+ getWebDriver().findElement(By.xpath("(//span[@class='price'])[" + i + "]")).getText());
				extent.extentLogger("Discounted Pack Amount", "Discounted Pack Amount : "
						+ getWebDriver().findElement(By.xpath("(//span[@class='price'])[" + i + "]")).getText());
			}
			waitTime(2000);
			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount1, "Discounted pack");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
			paymentPageValidation(userType);
		}
	}

	/*
	 * Validating the UI of My Subscription Page
	 */
	public void verifyUIofMySubscriptionPage(String userType) throws Exception {
		waitTime(10000);
		if (userType.contains("NonSubscribedUser") || (userType.contains("SubscribedUser"))) {
			extent.HeaderChildNode("Validating the UI of My Subscription Page");
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			JSClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				checkElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
				logger.info("Browse All Packs is not displayed as expected for NonSubscribed User");
				extent.extentLogger("", "Browse All Packs is not displayed as expected for NonSubscribed User");
			} else {
				verifyElementPresent(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			}
		}
		if (userType.contains("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"Validating if Empty state screen is displayed when user has No Active Subscriptions");
			checkElementDisplayed(PWAHamburgerMenuPage.objEmptyStateScreen, "Empty State Screen");
			scrollDownWEB();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objSubscriptionTeaserBanner,
					"Subscription Teaser Banner");
			waitTime(10000);
			if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Zee Subscription Page")) {
				logger.info("Navigated to Zee Subscription Page");
				extent.extentLogger("Subscription Page", "Navigated to Zee Subscription Page");
			} else {
				logger.info("Not navigated to Zee Subscription Page");
				extent.extentLogger("Subscription Page", "Not navigated to Zee Subscription Page");
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/*
	 * Validating the UI of My Transactions Page and Active/Expired Cards
	 */
	public void validatingActiveAndExpiredCardsinMyTransactionPage(String userType) throws Exception {
		if (userType.contains("NonSubscribedUser") || userType.contains("SubscribedUser")) {
			extent.HeaderChildNode("Validating the UI of My Transactions Page");
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
			JSClick(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
			Thread.sleep(3000);
			extent.HeaderChildNode(
					"Validating if Empty state screen is displayed when user doesn't have any purchase history");
			checkElementDisplayed(PWAHamburgerMenuPage.objEmptyStateScreen, "Empty State Screen");
			boolean NoTransactionPresent = checkElementDisplayed(PWAHamburgerMenuPage.objNoTransaction,
					"No Transactions");
			if (NoTransactionPresent == false) {
				extent.HeaderChildNode("Validating the UI of Active/Expired Cards");
				List<WebElement> packs = getWebDriver().findElements(By.xpath("//p[@class='packTitle']"));
				System.out.println("No of Packs : " + packs.size());
				if (packs.size() > 1) {
					String status = getText(PWAHamburgerMenuPage.objMyTransactionPackStatus);
					logger.info("Pack Status :" + status);
					extent.extentLogger("Pack Status :", "Pack Status :" + status);
					if (status.equalsIgnoreCase("Active")) {
						String title = getText(PWAHamburgerMenuPage.objPackTitle);
						logger.info("Pack Title :" + title);
						extent.extentLogger("Pack Title :", "Pack Title :" + title);
						String price = getText(PWAHamburgerMenuPage.objPackPrice);
						logger.info("Pack Price :" + price);
						extent.extentLogger("Pack Price :", "Pack Price :" + price);
						String duration = getText(PWAHamburgerMenuPage.objPackDuration);
						logger.info("Pack Duration :" + duration);
						extent.extentLogger("Pack Duration :", "Pack Duration :" + duration);
						String renewalStatus = getText(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus);
						logger.info("Pack Renewal Status :" + renewalStatus);
						extent.extentLogger("Pack Renewal Status :", "Pack Renewal Status :" + renewalStatus);
					}
					String status1 = getText(PWAHamburgerMenuPage.objMyTransactionPackStatus1);
					logger.info("Pack Status :" + status1);
					extent.extentLogger("Pack Status :", "Pack Status :" + status1);
					if (status1.equalsIgnoreCase("EXPIRED")) {
						String title1 = getText(PWAHamburgerMenuPage.objPackTitle1);
						logger.info("Pack Title :" + title1);
						extent.extentLogger("Pack Title :", "Pack Title :" + title1);
						if (checkElementDisplayed(PWAHamburgerMenuPage.objPackPrice1, "Pack Price")) {
							String price1 = getText(PWAHamburgerMenuPage.objPackPrice1);
							logger.info("Pack Price :" + price1);
							extent.extentLogger("Pack Price :", "Pack Price :" + price1);
						}
						String duration1 = getText(PWAHamburgerMenuPage.objPackDuration1);
						logger.info("Pack Duration :" + duration1);
						extent.extentLogger("Pack Duration :", "Pack Duration :" + duration1);
						String renewalStatus1 = getText(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus1);
						logger.info("Pack Renewal Status :" + renewalStatus1);
						extent.extentLogger("Pack Renewal Status :", "Pack Renewal Status :" + renewalStatus1);
					}
				} else {
					String status = getText(PWAHamburgerMenuPage.objMyTransactionPackStatus);
					logger.info("Pack Status :" + status);
					extent.extentLogger("Pack Status :", "Pack Status :" + status);
					String title = getText(PWAHamburgerMenuPage.objPackTitle);
					logger.info("Pack Title :" + title);
					extent.extentLogger("Pack Title :", "Pack Title :" + title);
					if (checkElementDisplayed(PWAHamburgerMenuPage.objPackPrice1, "Pack Price")) {
						String price = getText(PWAHamburgerMenuPage.objPackPrice);
						logger.info("Pack Price :" + price);
						extent.extentLogger("Pack Price :", "Pack Price :" + price);
					}
					String duration = getText(PWAHamburgerMenuPage.objPackDuration);
					logger.info("Pack Duration :" + duration);
					extent.extentLogger("Pack Duration :", "Pack Duration :" + duration);
					String renewalStatus = getText(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus);
					logger.info("Pack Renewal Status :" + renewalStatus);
					extent.extentLogger("Pack Renewal Status :", "Pack Renewal Status :" + renewalStatus);
				}
			}
			extent.HeaderChildNode(
					"Validating if user is navigated to Zee Subscription screen post tapping on subscription teaser banner");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscriptionTeaserBanner,
					"Subscription Teaser Banner") == true) {
				click(PWAHamburgerMenuPage.objSubscriptionTeaserBanner, "Subscription Teaser Banner");
				waitTime(5000);
				if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Zee Subscription Page") == true) {
					logger.info("Navigated to Zee Subscription Page");
					extent.extentLogger("Subscription Page", "Navigated to Zee Subscription Page");
				} else {
					logger.info("Not navigated to Zee Subscription Page");
					extent.extentLogger("Subscription Page", "Not navigated to Zee Subscription Page");
				}
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	/*
	 * Payment Page Validation
	 */
	public void paymentPageValidation(String userType) throws Exception {
		extent.HeaderChildNode("Payment Page Validation");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWASubscriptionPages.objEmailIDTextField, "Email ID field")) {
				click(PWASubscriptionPages.objEmailIDTextField, "Email ID field");
				type(PWASubscriptionPages.objEmailIDTextField, "igszee5test123g@gmail.com", "Email Id");
				verifyElementPresentAndClick(PWASubscriptionPages.objPaymentPageProceedBtn, "Proceed Button");
				// Password Popup
				verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
				verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
				type(PWASubscriptionPages.objPasswordFieldHidden, "igs@12345", "Password Field");
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Proceed Button");
			}
		}
		extent.HeaderChildNode("Validating the payment gateway using Credit/Debit Card");
		waitTime(10000);
		WebElement iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
		Thread.sleep(5000);
		Thread.sleep(5000);
		Thread.sleep(5000);
		getWebDriver().switchTo().frame(iframeElement);
//		checkElementDisplayed(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
		verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
//		verifyElementPresentAndClick(PWASubscriptionPages.objarrowbtn, "arrow button");
		verifyElementPresent(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,
				"Enter Credit/Debit Card Details");
		verifyElementPresent(PWASubscriptionPages.objCardNumber, "Enter Card Number Field");
		verifyElementPresent(PWASubscriptionPages.objExpiry, "Expiry Field");
		verifyElementPresent(PWASubscriptionPages.objCVV, "CVV Field");
		verifyElementPresent(PWASubscriptionPages.objCreditDebitProceedToPay, "Proceed To Pay Button");
		verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
		extent.HeaderChildNode("Validating the payment gateway using Paytm");
		verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
		verifyElementPresent(PWASubscriptionPages.objPaytmProceedToPay, "Proceed To Pay Button");
		getWebDriver().switchTo().defaultContent();
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		if (userType.equals("Guest")) {
			logout();
		}
	}

	/**
	 * ================================MANASA
	 * PremiumPage==================================
	 * 
	 */

	public void landingPagesValidation(String tabName) throws Exception {
		extent.HeaderChildNode(tabName + " Page Validation");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(3000);
		if (verifyElementEnabled(PWAHomePage.objActiveTab, "Active tab")) {
			String tab = getText(PWAHomePage.objActiveTab);
			System.out.println(tab);
			logger.info(tab + " tab is highlighted");
			extent.extentLoggerPass("Tab", tab + " tab is highlighted");
		} else {
			logger.error(tabName + " tab is not highlighted");
			extent.extentLoggerFail("Tab", tabName + " tab is not highlighted");
		}
		// check if tray is loaded
		for (int i = 1; i <= 2; i++) {
			if (checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray")) {
				System.out.println("Tray is loaded for " + i + " scroll");
				logger.info("Tray is loaded for " + i + " scroll");
				extent.extentLoggerPass("Tray load", "Tray is loaded for " + i + " scroll");
			} else {
				ScrollToTheElement(PWAPremiumPage.objTrayTitle(i));
				verifyElementPresent(PWAPremiumPage.objTrayTitle(i), "Tray");
			}
		}
		scrollDownWEB();
		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(3000);
		if (verifyElementPresent(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLoggerPass("Tray is rotated", "Tray is rotated");
		} else {
			logger.error("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (verifyElementPresent(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(3000);
			if (verifyElementPresent(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLoggerPass("View All", "Navigated to View All Page");
			} else {
				logger.error("Not navigated to View All Page");
				extent.extentLoggerFail("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		waitTime(2000);

		waitTime(2000);
		if (verifyElementPresent(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			JSClick(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}
		waitTime(2000);
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAPremiumPage.objMinuteContent).size() > 0) {
				logger.info("Minute content is displayed");
				extent.extentLogger("Minute content", "Minute content is displayed");
				break;
			} else {
				logger.info("Minute content is not displayed");
				extent.extentLogger("Minute content", "Minute content is not displayed");
				partialScrollDown();
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void landingPagesTrailerAndPopUpValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(tabName + " Page Carousel Validation");
		navigateToAnyScreenOnWeb(tabName);
//		Actions actions = new Actions(getWebDriver());
//		WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
//		actions.moveToElement(menuOption).perform();
		JSClick(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
		waitTime(5000);
		if (userType.contains("Guest")) {
			mandatoryRegistrationPopUp(userType);
			if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
				click(PWASearchPage.objCloseRegisterDialog, "Close Button");
			} else {
				logger.info("Why Register pop up is not displayed");
			}
		}
		if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
			verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
		}
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Not navigated to Consumption Page");
		}
		if (checkElementDisplayed(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
			watchTrailerButtonFunctionality(userType);
		} else {
			logger.info("Trailer is not available for the selected content");
			extent.extentLogger("Trailer", "Trailer is not available for the selected content");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/*
	 * Validation of Complete Profile/Tell us more about you section
	 */
	public void verifyCompleteYourProfilePopUp() throws Exception {
		extent.HeaderChildNode("Validating if user is able to fill Complete Profile/Tell us more about you section");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objFirstName, "First Name Field");
		type(CompleteYourProfilePopUp.objFirstName, "Test", "First Name Field");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objLastName, "Last Name Field");
		type(CompleteYourProfilePopUp.objLastName, "User", "Last Name Field");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objDay, "Day Field");
		click(CompleteYourProfilePopUp.objDateSelector, "Date");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objMonth, "Month Field");
		click(CompleteYourProfilePopUp.objDateSelector, "Month");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objYear, "Year Field");
		click(CompleteYourProfilePopUp.objDateSelector, "Year");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objGenderFemale, "Gender Field");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objMobileNo, "Mobile Number");
		type(CompleteYourProfilePopUp.objMobileNo, "95839633299", "Mobile Number");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objCloseBtn, "Close Button");
	}

	@SuppressWarnings("unused")
	public void trayTitleAndContentValidationWithApiData(String tab, String api) throws Exception {
		extent.HeaderChildNode(tab + " page validation with Api response");
		navigateToAnyScreenOnWeb(tab);
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(menuOption).build().perform();

		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages("home", languageSmallText); // changes
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[2].title"); // changes
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[2].items"); // changes
		System.out.println(contentList.size());
		// partialScrollDown();
		partialScroll(); // changes
		partialScroll(); // changes
		waitTime(2000); // changes
		List<WebElement> card = getWebDriver().findElements(By.xpath("((//div[@class='slick-list'])[3]//img)")); // changes
		System.out.println(card.size());
		for (int i = 0; i < card.size(); i++) {
			// API DATA
			String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title"); // changes
			String businessType = resp.jsonPath().getString("buckets[2].items[" + i + "].business_type");
			String minuteType_isDRM = null;
			minuteType_isDRM = resp.jsonPath().getString("buckets[2].items[" + i + "].is_drm"); // changes

			apiTitleList.add(title);
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("((//div[@class='slick-list'])[3]//img)[" + (i + 1) + "]")); // changes
			actions.moveToElement(contentCard).build().perform();

			// to get metadata from content
			String contentMetadata = getAttributValue("title",
					By.xpath("((//div[@class='slick-list'])[3]//img)[" + (i + 1) + "]")); // changes

			// String trayTitle = apiTitleList.get(i);
//			System.out.println("UI data : " + contentMetadata);
//			System.out.println("api data : " + apiTitleList.get(i));
			logger.info("UI data " + contentMetadata); // changes
			logger.info("API data " + apiTitleList.get(i));
			extent.extentLogger("UI data ", "UI data " + contentMetadata);
			extent.extentLogger("API data ", "API data " + apiTitleList.get(i));
			if (contentMetadata.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is valid with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is valid with Api data");
			} else {
				logger.info("Metadata on the content card is not valid with Api data");
				extent.extentLoggerFail("Metadata", "Metadata on the content card is not valid with Api data");
			}

			// MINUTELY CONTENT CHECK
			waitTime(1000);
//			System.out.println(minuteType_isDRM);
//			if (minuteType_isDRM == null) {
//				System.out.println("No minute content attached");
//			} else {
//				System.out.println("Minute content present");

			if (checkElementDisplayed(PWAPremiumPage.specificContentisMinuteimage(Tray_Title, i + 1),
					"Minute Content")) {
				logger.info("MinuteContent is Present");
				extent.extentLogger("MinuteContent", "MinuteContent is Present");
			} else {
				logger.info("MinuteContent is not Present");
				extent.extentLogger("MinuteContent", "MinuteContent is not Present");
			}
//			}

			// PREMIUM ICON CHECK
			waitTime(1000);
			if (businessType.contains("premium")) {
				if (checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i + 1),
						"Premium icon")) {
					logger.info("Premium icon is Present");
					extent.extentLogger("Premium icon", "Premium icon is Present");
				} else {
					logger.info("Premium icon is not Present");
					extent.extentLoggerFail("Premium icon", "Premium icon not Present");
				}

			} else if (businessType.contains("advertisement") || businessType.contains("free")) {
				if (!checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i), "Premium icon")) {
					logger.info("premium icon not present and Content is NonPremium");
					extent.extentLogger("Premium icon", "premium icon not present and Content is NonPremium");
				} else {
					logger.info("premium icon is present");
					extent.extentLoggerFail("Premium icon", "premium icon is present");
				}
			}

			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Icon")) {
				logger.info("Play icon is displayed");
				extent.extentLogger("Play", "Play icon is displayed");
			} else {
				logger.info("Play icon is not displayed");
				extent.extentLogger("Play", "Play icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Icon")) {
				logger.info("Share icon is displayed");
				extent.extentLogger("Share", "Share icon is displayed");
			} else {
				logger.info("Share icon is not displayed");
				extent.extentLogger("Share", "Share icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardWatchlistBtn, "Watchlist Icon")) {
				logger.info("Watchlist icon is displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is displayed");
			} else {
				logger.info("Watchlist icon is not displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is not displayed");
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public String allSelectedLanguages() throws Exception {
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtnWEB, "Language button");
		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content languages");
		logger.info("Fetching selected content languages to be sent as API parameters");
		extent.extentLogger("", "Fetching selected content languages to be sent as API parameters");
		waitTime(2000);
		List<WebElement> allSelectedLanguages = getWebDriver().findElements(PWAHamburgerMenuPage.objSelectedLanguages);
		String langtext = "";
		for (int i = 0; i < allSelectedLanguages.size(); i++) {
			// System.out.println(i);
			langtext = allSelectedLanguages.get(i).getAttribute("for").replace("content_", "") + "," + langtext;
			// System.out.println(langtext.replaceAll(",$",""));
		}
		String finalLangString = langtext.replaceAll(",$", "");
		logger.info("Content Languages selected : " + finalLangString);
		extent.extentLogger("", "Content Languages selected : " + finalLangString);
		waitForElementAndClick(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, 2, "Apply Button");
		return finalLangString;
	}

	public void watchTrailerButtonFunctionality(String userType) throws Exception {
		extent.HeaderChildNode("Watch Trailer Button Validation");
		click(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
		if (userType.contains("Guest")) {
			if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
				click(PWASearchPage.objCloseRegisterDialog, "Close Button");
			} else {
				logger.info("Why Register pop up is not displayed");
				extent.extentLogger("Register popup", "Why Register pop up is not displayed");
			}
		}
		waitTime(20000);
		if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
			verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
		}
		if (userType.contains("NonSubscribedUser") || (userType.contains("Guest"))) {
			checkElementDisplayed(PWAPremiumPage.objSubscribeNowAndGoAdFree, "Subscribe Now And Go Ad Free Message");
			checkElementDisplayed(PWAPremiumPage.objGetPremium, "Get Premium Button");
		}
	}

	public void premiumPageTrayTitleAndContentValidationWithApiData(String tab, String api) throws Exception {
		extent.HeaderChildNode(tab + " page validation with Api response");
		navigateToAnyScreenOnWeb(tab);
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(menuOption).build().perform();

		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
//		ScrollToElement(PWAMusicPage.objTrayTitle(Tray_Title), "Tray title");
		partialScrollDown();
		List<WebElement> card = getWebDriver().findElements(By.xpath("((//div[@class='slick-list'])[2]//img)"));
		System.out.println(card.size());
		for (int i = 0; i < card.size(); i++) {
			// API DATA
			String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			String businessType = resp.jsonPath().getString("buckets[1].items[" + i + "].business_type");

			apiTitleList.add(title);

			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();

			// to get metadata from content
			String contentMetadata = getAttributValue("title",
					By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));

			logger.info("UI data " + contentMetadata);
			logger.info("API data " + apiTitleList.get(i));
			extent.extentLogger("UI data ", "UI data " + contentMetadata);
			extent.extentLogger("API data ", "API data " + apiTitleList.get(i));
			if (contentMetadata.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.info("Metadata on the content card is not validated with Api data");
				extent.extentLoggerFail("Metadata", "Metadata on the content card is not validated with Api data");
			}

			// PREMIUM ICON CHECK
			waitTime(1000);
			if (businessType.contains("premium")) {
				if (checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i + 1),
						"Premium icon")) {
					logger.info("Premium icon is Present");
					extent.extentLogger("Premium icon", "Premium icon is Present");
				} else {
					logger.info("Premium icon is not Present");
					extent.extentLoggerFail("Premium icon", "Premium icon not Present");
				}

			} else if (businessType.contains("advertisement") || businessType.contains("free")) {
				if (!checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i), "Premium icon")) {
					logger.info("premium icon not present and Content is NonPremium");
					extent.extentLogger("Premium icon", "premium icon not present and Content is NonPremium");
				} else {
					logger.info("premium icon is present");
					extent.extentLoggerFail("Premium icon", "premium icon is present");
				}
			}

			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Icon")) {
				logger.info("Play icon is displayed");
				extent.extentLogger("Play", "Play icon is displayed");
			} else {
				logger.info("Play icon is not displayed");
				extent.extentLogger("Play", "Play icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Icon")) {
				logger.info("Share icon is displayed");
				extent.extentLogger("Share", "Share icon is displayed");
			} else {
				logger.info("Share icon is not displayed");
				extent.extentLogger("Share", "Share icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardWatchlistBtn, "Watchlist Icon")) {
				logger.info("Watchlist icon is displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is displayed");
			} else {
				logger.info("Watchlist icon is not displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is not displayed");
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/**
	 * ================================MANASA
	 * MusicPage==================================
	 * 
	 */

	@SuppressWarnings("unused")
	public void musicPageValidation(String tabName, String userType, String searchText) throws Exception {
		extent.HeaderChildNode("Music Page Playback Validation for Free Content and Premium Content");
		navigateToAnyScreenOnWeb(tabName);
		Actions actions = new Actions(getWebDriver());
		WebElement player = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
		if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel")) {
			click(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
			mandatoryRegistrationPopUp(userType);

			waitTime(10000);

			if (BROWSER.equals("Firefox")) {
				waitForPlayerLoaderToComplete();
			}
			waitForPlayerAdToComplete("Video Player");

			if (BROWSER.equals("Chrome")) {
				pausePlayer();
			} else {
				firefoxpause();
			}

			// actions.moveToElement(player).build().perform();
			click(PWAPlayerPage.maximizeBtn, "Maximize button");
			waitTime(1000);
			click(PWAPlayerPage.minimizeBtn, "Minimize button");
			waitTime(1000);

			if (checkElementDisplayed(PWAMusicPage.objRecommendedVideos, "Recommended tray")) {
				logger.info("Recommended videos is displayed in consumption page");
				extent.extentLogger("Recommended tray", "Recommended videos is displayed in consumption page");
			} else {
				logger.info("Recommended videos  is not displayed in consumption page");
				extent.extentLogger("Recommended tray", "Recommended videos is not displayed in consumption page");
			}
			Back(1);
		} else {
			musicFreeContentPlaybackValidation(userType);
		}
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, searchText, "Search Field");

		click(PWAMusicPage.objMusicTabInSearch, "Music");
		if (findElements(PWAMusicPage.objPremiumTagContentCard(searchText)).size() > 0) {
			logger.info("Premium tag is displayed");
			extent.extentLogger("Premium Tag", "Premium Tag is displayed");
			click(PWAMusicPage.objPremiumTagContentTumbnail(searchText), "Premium");
			if (userType.equals("NonSubscribedUser") || (userType.equals("Guest"))) {
				waitForElementDisplayed(PWASubscriptionPages.objSubscribepopup, 10);
				if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
					verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
				}
			}
			if (userType.equals("SubscribedUser")) {
				if (BROWSER.equals("Firefox")) {
					waitForPlayerLoaderToComplete();
				}
				waitForPlayerAdToComplete("Video Player");
				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}
//				actions.moveToElement(player).build().perform();
				click(PWAPlayerPage.maximizeBtn, "Maximize button");
				waitTime(1000);
				click(PWAPlayerPage.minimizeBtn, "Minimize button");
				waitTime(1000);

			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void musicFreeContentPlaybackValidation(String userType) throws Exception {
		extent.HeaderChildNode("Free Content Playback Validation");

		verifyElementPresentAndClick(PWAMusicPage.objFreeMusicContentCard, "Free Content Card");
		mandatoryRegistrationPopUp(userType);

		waitTime(10000);
		if (BROWSER.equals("Firefox")) {
			waitForPlayerLoaderToComplete();
		}
		waitForPlayerAdToComplete("Video Player");

		if (BROWSER.equals("Chrome")) {
			pausePlayer();
		} else {
			firefoxpause();
		}

		// actions.moveToElement(player).build().perform();
		click(PWAPlayerPage.maximizeBtn, "Maximize button");
		waitTime(1000);
		click(PWAPlayerPage.minimizeBtn, "Minimize button");
		waitTime(1000);

		if (checkElementDisplayed(PWAMusicPage.objRecommendedVideos, "Recommended tray")) {
			logger.info("Recommended videos is displayed in consumption page");
			extent.extentLogger("Recommended tray", "Recommended videos is displayed in consumption page");
		} else {
			logger.info("Recommended videos  is not displayed in consumption page");
			extent.extentLogger("Recommended tray", "Recommended videos is not displayed in consumption page");
		}
		Back(1);
	}

	public void trayTitleAndContentValidationWithApiDataGuest(String tab, String api, String userType)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(tab + " page validation with Api response");
			navigateToAnyScreenOnWeb(tab);
			Actions actions = new Actions(getWebDriver());
			WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
			actions.moveToElement(menuOption).build().perform();

			String languageSmallText = allSelectedLanguages();
			System.out.println(languageSmallText);

			Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
			List<String> apiTitleList = new LinkedList<String>();
			String Tray_Title = resp.jsonPath().getString("buckets[1].title");
			System.out.println("The Title of the Tray is " + Tray_Title + "");
			List<String> contentList = resp.jsonPath().getList("buckets[1].items");
			System.out.println(contentList.size());
			// ScrollToElement(PWAMusicPage.objTrayTitle(Tray_Title), "Tray title");
			partialScrollDown();
			List<WebElement> card = getWebDriver().findElements(By.xpath("((//div[@class='slick-list'])[2]//img)"));
			System.out.println(card.size());
			for (int i = 0; i < card.size(); i++) {
				// API DATA
				String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
				String businessType = resp.jsonPath().getString("buckets[1].items[" + i + "].business_type");

				apiTitleList.add(title);

				WebElement contentCard = getWebDriver()
						.findElement(By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));
				actions.moveToElement(contentCard).build().perform();

				// to get metadata from content
				String contentMetadata = getAttributValue("title",
						By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));

				System.out.println("UI data : " + contentMetadata);
				System.out.println("api data : " + apiTitleList.get(i));

				logger.info("UI data " + contentMetadata);
				logger.info("API data " + apiTitleList.get(i));
				extent.extentLogger("UI data ", "UI data " + contentMetadata);
				extent.extentLogger("API data ", "API data " + apiTitleList.get(i));
				if (contentMetadata.equalsIgnoreCase(apiTitleList.get(i))) {
					logger.info("Metadata on the content card is validated with Api data");
					extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
				} else {
					logger.info("Metadata on the content card is not validated with Api data");
					extent.extentLoggerFail("Metadata", "Metadata on the content card is not validated with Api data");
				}

				// PREMIUM ICON CHECK
				waitTime(1000);
				if (businessType.contains("premium")) {
					if (checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i + 1),
							"Premium icon")) {
						logger.info("Premium icon is Present");
						extent.extentLogger("Premium icon", "Premium icon is Present");
					} else {
						logger.info("Premium icon is not Present");
						extent.extentLoggerFail("Premium icon", "Premium icon not Present");
					}

				} else if (businessType.contains("advertisement") || businessType.contains("free")) {
					if (!checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i),
							"Premium icon")) {
						logger.info("premium icon not present and Content is NonPremium");
						extent.extentLogger("Premium icon", "premium icon not present and Content is NonPremium");
					} else {
						logger.info("premium icon is present");
						extent.extentLoggerFail("Premium icon", "premium icon is present");
					}
				}

				waitTime(1000);
				if (checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Icon")) {
					logger.info("Play icon is displayed");
					extent.extentLogger("Play", "Play icon is displayed");
				} else {
					logger.info("Play icon is not displayed");
					extent.extentLogger("Play", "Play icon is not displayed");
				}
				waitTime(1000);
				if (checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Icon")) {
					logger.info("Share icon is displayed");
					extent.extentLogger("Share", "Share icon is displayed");
				} else {
					logger.info("Share icon is not displayed");
					extent.extentLogger("Share", "Share icon is not displayed");
				}
				waitTime(1000);
				if (checkElementDisplayed(PWAPremiumPage.objContentCardWatchlistBtn, "Watchlist Icon")) {
					logger.info("Watchlist icon is displayed");
					extent.extentLogger("Watchlist", "Watchlist icon is displayed");
				} else {
					logger.info("Watchlist icon is not displayed");
					extent.extentLogger("Watchlist", "Watchlist icon is not displayed");
				}
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	public void musicPageTrayTitleAndContentValidationWithApiData(String tab, String api, String userType)
			throws Exception {

		extent.HeaderChildNode(tab + " page validation with Api response");
		waitTime(5000);
		navigateToAnyScreenOnWeb(tab);
		waitTime(5000);
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(menuOption).build().perform();
		waitTime(5000);

		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();

		String Tray_Title = resp.jsonPath().getString("buckets[2].title");
		logger.info("The Title of the Tray is " + Tray_Title);
		extent.extentLogger("Title", "The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[2].items");
		System.out.println(contentList.size());

		ScrollToTheElementWEB(PWAMoviesPage.TextToXpath(Tray_Title));
		waitTime(2000);

		List<WebElement> card = findElements(PWAMusicPage.musicTrayContentCards(Tray_Title));
		System.out.println(card.size());
		for (int i = 0; i < card.size(); i++) {
			// API DATA
			String title = resp.jsonPath().getString("buckets[2].items[" + i + "].title");
			String businessType = resp.jsonPath().getString("buckets[2].items[" + i + "].business_type");

			apiTitleList.add(title);

			WebElement contentCard = findElement(PWAMusicPage.musicTrayContentCard(Tray_Title, i + 1));
			actions.moveToElement(contentCard).build().perform();

			// to get metadata from content
			String contentMetadata = getAttributValue("title",
					PWAMusicPage.musicTrayContentCardTitle(Tray_Title, i + 1));

			logger.info("UI data " + contentMetadata);
			logger.info("API data " + apiTitleList.get(i));
			extent.extentLogger("UI data ", "UI data " + contentMetadata);
			extent.extentLogger("API data ", "API data " + apiTitleList.get(i));
			if (contentMetadata.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.info("Metadata on the content card is not validated with Api data");
				extent.extentLoggerFail("Metadata", "Metadata on the content card is not validated with Api data");
			}

			// PREMIUM ICON CHECK
			waitTime(1000);
			if (businessType.contains("premium")) {
				if (checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i + 1),
						"Premium icon")) {
					logger.info("Premium icon is Present");
					extent.extentLogger("Premium icon", "Premium icon is Present");
				} else {
					logger.info("Premium icon is not Present");
					extent.extentLoggerFail("Premium icon", "Premium icon not Present");
				}

			} else if (businessType.contains("advertisement") || businessType.contains("free")) {
				if (!checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i), "Premium icon")) {
					logger.info("premium icon not present and Content is NonPremium");
					extent.extentLogger("Premium icon", "premium icon not present and Content is NonPremium");
				} else {
					logger.info("premium icon is present");
					extent.extentLoggerFail("Premium icon", "premium icon is present");
				}
			}

			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Icon")) {
				logger.info("Play icon is displayed");
				extent.extentLogger("Play", "Play icon is displayed");
			} else {
				logger.info("Play icon is not displayed");
				extent.extentLogger("Play", "Play icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Icon")) {
				logger.info("Share icon is displayed");
				extent.extentLogger("Share", "Share icon is displayed");
			} else {
				logger.info("Share icon is not displayed");
				extent.extentLogger("Share", "Share icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAMusicPage.musicTrayContentCardWatchListBtn(Tray_Title, i + 1),
					"Watchlist Icon")) {
				logger.info("Watchlist icon is displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is displayed");
			} else {
				logger.info("Watchlist icon is not displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is not displayed");
			}
		}
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

	}

	/**
	 * ================================VINAY Language and Language
	 * Settings==================================
	 * 
	 */

	public void LanguageModule(String userType) throws Exception {
		extent.HeaderChildNode("Language setting Module");
		// Validate language selection option is displayed
		// click on language button
		Thread.sleep(5000);

		partialScroll();
		partialScroll();
		boolean staleElement2 = true;
		while (staleElement2) {
			try {
				Thread.sleep(5000);
				verifyElementPresentAndClick(PWAHomePage.objLanguageBtn, "Language button");
				staleElement2 = false;
			} catch (StaleElementReferenceException e) {
				staleElement2 = true;
			}
		}

		// click(PWAHomePage.objLanguageBtn, "Language button");

		// Verify display language screen is displayed
		if (getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
				.contains("headerSelected")) {
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
							.contains("headerSelected"),
					true, "Display screen is displayed on tapping language option");
			extent.extentLogger("Verify Display language screen is displayed",
					"Display screen is displayed on tapping language option");
			logger.info("Display screen is displayed on tapping language option");
		} else {
			softAssert.assertAll();
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
							.contains("headerSelected"),
					false, "Display screen is not displayed on tapping language option");
			extent.extentLogger("Verify Display language screen is displayed",
					"Display screen is nt displayed on tapping language option");
			logger.info("Display screen is not displayed on tapping language option");
		}

		// Verify that default display language is English
		String defaultLang = getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang,
				"Default Language");
		if (defaultLang.contains("checkedHighlight")) {
			String selectedLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("English"), "Language");
			if (selectedLang.equals("English")) {
				softAssert.assertEquals(selectedLang.equals("English"), true,
						selectedLang + " language is selected by default");
				extent.extentLogger("Verify default language", "English is selected by defalut");
				logger.info(selectedLang + " language is selected by default");
			} else {
				softAssert.assertAll();
				extent.extentLoggerFail("Verify default language", "English is selected by defalut");
				logger.info("By default " + selectedLang + " is displayed");
			}
		}

		// Verify user can select desired display language
		// Verify user can Hindi language
		JSClick(PWALanguageSettingsPage.objLanguage("Hindi"), "Hindi display language");
		// Verify selected language
		String HindiLang = getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang,
				"Default Language");
		if (HindiLang.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Hindi"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}
		// Verify user can Marathi language
		JSClick(PWALanguageSettingsPage.objLanguage("Marathi"), "Marathi display language");
		// Verify selected language
		String MaratiLang = getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang,
				"Default Language");
		if (MaratiLang.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Marathi"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}
		// Verify user can Telugu language
		JSClick(PWALanguageSettingsPage.objLanguage("Telugu"), "Telugu display language");
		// Verify selected language
		getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang, "Default Language");
		if (MaratiLang.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Telugu"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}

		// Verify selected Display language is applied
		// Select Kannada display language
		JSClick(PWALanguageSettingsPage.objLanguage("Kannada"), "Kannada display language");
		// Verify selected language
		String selectedLangInDisplayScreen = getElementPropertyToString("class",
				PWALanguageSettingsPage.objSelectedLang, "Default Language");
		if (selectedLangInDisplayScreen.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Kannada"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}
		// Verify the selected language is applied in home page
		JSClick(PWALanguageSettingsPage.objApplyBtn, "Apply button");
		JSClick(PWALanguageSettingsPage.objApplyBtn, "Apply button");
		boolean staleElement = true;
		while (staleElement) {

			try {
				Thread.sleep(5000);
				verifyElementPresent(PWALanguageSettingsPage.objTrayHeader, "Tray title");

			} catch (StaleElementReferenceException e) {
				staleElement = true;
			}

			String trayHeader = getElementPropertyToString("class", PWALanguageSettingsPage.objTrayHeader,
					"Tray header");
			staleElement = false;
			if (trayHeader.contains("kn_regionalLang")) {
				softAssert.assertEquals(trayHeader.contains("kn_regionalLang"), true,
						"The selected display language is applied");
				extent.extentLogger(" Verify selected display Languge",
						"The selected display langguage is applied successfully");
				logger.info("The selected display language is applied successfully");
			} else {
				softAssert.assertAll();
				extent.extentLoggerFail(" Verify selected display Languge",
						"The selected display langguage is not applied successfully");
				logger.info("The selected display language is not applied successfully");
			}
		}
		// Click on Language button
		partialScroll();
		partialScroll();
		JSClick(PWAHomePage.objLanguageBtn, "Language button");
		// Select English
		JSClick(PWALanguageSettingsPage.objEnglishLang, "English language");
		JSClick(PWALanguageSettingsPage.objApplyBtn, "Apply button");
		JSClick(PWALanguageSettingsPage.objApplyBtn, "Apply button");
		Thread.sleep(5000);
		partialScroll();
		Thread.sleep(5000);
		partialScroll();
		Thread.sleep(5000);
		boolean staleElement1 = true;
		while (staleElement1) {
			try {

				JSClick(PWAHomePage.objLanguageBtn, "Language button");
				staleElement1 = false;
			} catch (StaleElementReferenceException e) {
				staleElement1 = true;
			}
		}

		// Click on Content language button
		JSClick(PWAHamburgerMenuPage.objContentLanguage, "Content language");
		// Verify user is navigated to Content Language screen post tapping content
		// language option
		if (getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
				.contains("headerSelected")) {
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
							.contains("headerSelected"),
					true, "Content language screen is displayed on tapping content language option");
			extent.extentLogger("Verify Content language screen is displayed",
					"Content screen is displayed on tapping Content language option");
			logger.info("Content screen is displayed on tapping Content language option");
		} else {
			softAssert.assertAll();
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
							.contains("headerSelected"),
					false, "Content language screen is not displayed on tapping content language option");
			extent.extentLoggerFail("Verify Content language screen is displayed",
					"Content language screen is not displayed on tapping content language option");
			logger.info("Content language screen is not displayed on tapping Content language option");
		}
		int sele = findElements(PWALanguageSettingsPage.objSelectedLang).size();
		for (int i = 0; i <= sele; i++) {
			Thread.sleep(2000);
			click(PWALanguageSettingsPage.objSelectedLang, "Selected language");
		}
//			JSClick(PWALanguageSettingsPage.objSelectedLang, "Selected language");
//			Thread.sleep(2000);
//			JSClick(PWALanguageSettingsPage.objSelectedLang, "Selected language");

		// Verify user can select multiple Content languages

		for (int i = 1; i <= 3; i++) {
			String language = getElementPropertyToString("innerText", PWALanguageSettingsPage.objAllLangByindex(i),
					"Language");
			Thread.sleep(1000);
			click(PWALanguageSettingsPage.objAllLangByindex(i), language + " Language");
		}
		Thread.sleep(5000);
		int size = getWebDriver().findElements(PWALanguageSettingsPage.objSelectedLang).size();
		if (size > 1) {
			softAssert.assertEquals(size > 1, true, "User can select multiple languages");
			extent.extentLogger("Selected content languages : ", "Selected content languages : " + size);
			extent.extentLogger("Verify user can select multiple content languages",
					"User can select multiple Content languages");
			logger.info("User can select multiple Content languages");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify user can select multiple content languages",
					"User can not select multiple Content languages");
			logger.info("User can not select multiple Content languages");
		}

		// Verify user should not be able to apply the changes if he deselect all the
		// language.
		int selectedlang = getWebDriver().findElements(PWALanguageSettingsPage.objSelectedLang).size();
		for (int i = 1; i <= selectedlang; i++) {
			click(PWALanguageSettingsPage.objSelectedLang, "Selected language");
		}

		// Verify apply button is disabled
		String disabledApplyBtn = getElementPropertyToString("class", PWALanguageSettingsPage.objDisabledApplyButton,
				"Apply button");
		if (disabledApplyBtn.contains("disable")) {
			softAssert.assertEquals(disabledApplyBtn.contains("disable"), true,
					"User can not apply changes if he deselect all the content languages");
			extent.extentLogger("Verify Content language screen",
					"User can not apply changes if he deselect all the content languages");
			logger.info("User can not apply changes if he deselect all the content languages");
		} else {
			softAssert.assertEquals(disabledApplyBtn.contains("disable"), false,
					"User can apply changes if he deselect all the content languages");
			extent.extentLogger("Verify Content language screen",
					"User can apply changes if he deselect all the content languages");
			logger.info("User can apply changes if he deselect all the content languages");
		}

		// Verify User able to Switch to Content Language section from Display Language
		// and Content language
		// click on Display language
		JSClick(PWAHamburgerMenuPage.objDisplayLang, "Display language");
		// Verify user is navigated to display screen
		if (getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
				.contains("headerSelected")) {
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
							.contains("headerSelected"),
					true, "Display screen is displayed on tapping language option");
			extent.extentLogger("Verify Display language screen is displayed",
					"Display screen is displayed on tapping language option");
			logger.info("Display screen is displayed on tapping language option");
		} else {
			softAssert.assertAll();
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
							.contains("headerSelected"),
					false, "Display screen is not displayed on tapping language option");
			extent.extentLogger("Verify Display language screen is displayed",
					"Display screen is nt displayed on tapping language option");
			logger.info("Display screen is not displayed on tapping language option");
		}
		// Verify user is navigated to content language screen post tapping content
		// language screen
		JSClick(PWAHamburgerMenuPage.objContentLanguage, "Content language");
		if (getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
				.contains("headerSelected")) {
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
							.contains("headerSelected"),
					true, "Content language screen is displayed on tapping content language option");
			extent.extentLogger("Verify Content language screen is displayed",
					"Content screen is displayed on tapping Content language option");
			logger.info("Content screen is displayed on tapping Content language option");
		} else {
			softAssert.assertAll();
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
							.contains("headerSelected"),
					false, "Content language screen is not displayed on tapping content language option");
			extent.extentLoggerFail("Verify Content language screen is displayed",
					"Content language screen is not displayed on tapping content language option");
			logger.info("Content language screen is not displayed on tapping Content language option");
		}

		// Verify user can close the pop up by clicking anywhere in the application
		// click on home button
		if (userType.equals("NonSubscribedUser")) {
			getWebDriver().findElement(By.xpath("//body")).click();
		} else {
			getWebDriver().findElement(By.xpath("//html")).click();
		}
//			 JSClick(PWALanguageSettingsPage.objRandomClick, "Random clicking");

		// Verify the Language pop up
		if (checkElementDisplayed(PWAHamburgerMenuPage.objDisplayLang, "Language Pop up") == false) {
			logger.info("Langugae Pop up is closed after clicking anywhere on the application");
			extent.extentLogger("Verify Pop up",
					"Langugae Pop up is closed after clicking anywhere on the application");
		} else {
			logger.info("Langugae Pop up did not closed after clicking anywhere on the application");
			extent.extentLoggerFail("Verify Pop up",
					"Langugae Pop up did not closed after clicking anywhere on the application");
			JSClick(PWAHomePage.objLanguageBtn, "Language button");
		}

		getWebDriver().get(URL);

	}

	/**
	 * ================================VINAY
	 * Kaltura==================================
	 * 
	 */

	public void Kaltura(String userType) throws Exception {
		extent.HeaderChildNode("Kaltura Playability");
		String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie4");
		searchvideoandselect(keyword1, userType, "Movie");

		Thread.sleep(2000);
		String keyword2 = getParameterFromXML("tvshow");
		searchvideoandselect(keyword2, userType, "ZEE5 Originals");

		Thread.sleep(2000);
		String keyword3 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("trailerOfPremiumMovie");
		searchvideoandselect(keyword3, userType, "trailer");

		Thread.sleep(2000);
		String keyword4 = getParameterFromXML("music");
		searchvideoandselect(keyword4, userType, "Music");

		Thread.sleep(2000);
		String keyword5 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeEpisode4");
		searchvideoandselect(keyword5, userType, "show");

		Thread.sleep(2000);
		String keyword6 = getParameterFromXML("news");
		searchvideoandselect(keyword6, userType, "news");

		String Value = null;
		waitTime(5000);

		partialScroll();
		partialScroll();

		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHomePage.objMoreMenuBtn);
		actions.moveToElement(menuOption).perform();
		// click(PWAHomePage.objTabName("Live TV"), "Live TV Tab");
		click(PWAHomePage.objLiveTVtab, "Live TV Tab");
		waitTime(5000);
		mandatoryRegistrationPopUp(userType);
		System.out.println("Selecting Free content from LIVETV tray and validating Kaltura playability");
		extent.extentLogger("Selecting Free content from LIVETV tray and validating Kaltura playability",
				"Selecting Free content from LIVETV tray and validating Kaltura playability");
		Value = checkPremiumORFreeFromLIVETVPageTrayAndSelect("FREE Channels", "FREE");
		System.out.println(Value);
		waitTime(5000);
		System.out.println("Selected Tumbnail Value : " + Value);
		if (Value != null) {
			PremiumFreeZeeOriginalKaltura(Value, userType);
		} else {
			System.out.println("No Tray");
			getWebDriver().get(URL);
		}

	}

	public void searchvideoandselect(String str, String userType, String type) throws Exception {
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, str, "Search Field");
		Thread.sleep(3000);
		if (type.equals("Movie")) {
			click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		}
		Thread.sleep(3000);
		waitTime(3000);
		if (type.equalsIgnoreCase("news")) {
			click(PWASearchPage.objSearchNewsTab, "SearchNewsTab");
			Thread.sleep(1000);
			click(PWASearchPage.objfirstdata, "data");
		} else {

			click(PWASearchPage.objspecificSearch, "Searched content");
		}

		Thread.sleep(5000);
		if (type.equals("ZEE5 Originals") || type.equals("Music")) {
			Thread.sleep(5000);
			if (type.equals("Music")) {
				if (checkElementDisplayed(PWAPlayerPage.objWhyRegister, "Why Register Popup")) {
					click(PWAPlayerPage.objCloseRegisterDialog, "Close button");
				}
			}

			Actions actions = new Actions(getWebDriver());
			WebElement menuOption = getWebDriver().findElement(PWAHomePage.objMoreMenuBtn);
			actions.moveToElement(menuOption).perform();
			System.out.println("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
			extent.extentLogger("Navigated to tab : " + getText(PWAHomePage.objSeletedTab),
					"Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
			logger.info("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));

		} else if (type.equals("trailer")) {
			extent.extentLogger("Verify Navigation", "User is navigated to Trailer consumption screen");
			logger.info("User is navigated to Trailer consumption screen");
		} else {
			System.out.println("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
			extent.extentLogger("Navigated to tab : " + getText(PWAHomePage.objSeletedTab),
					"Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
			logger.info("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
		}

		if (type.equals("ZEE5 Originals")) {
			if (checkElementDisplayed(PWAHomePage.objKalGetPremium, "Get Premium")) {
				click(PWAHomePage.objKalGetPremiumPlayicon, "Play Button");
			}
		}

		if (userType.equals("SubscribedUser")) {
			if (checkElementDisplayed(PWAHomePage.objKalGetFirstEpisode, "Get First Episode")) {
				click(PWAHomePage.objKalGetFirstEpisodePlayicon, "Play Button");
			}
		}

		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
		}

		if (userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(CompleteYourProfilePopUp.objCompleteYourProfileTxt,
					"Complete Your Profile pop up")) {
				click(CompleteYourProfilePopUp.objCloseBtn, "Close Button");
			}
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
		}
		
		waitTime(5000);

		if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
			extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");
		} else {
			extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			waitForPlayerAdToComplete("Video Player");
		}
		pausePlayer();
		if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
			System.out.println("Video is playing");
			extent.extentLogger("Verify video Playability", "User is able to play video");
			logger.info("User is able to play video");
		} else {
			System.out.println("Video is not playing");
			extent.extentLoggerFail("Verify video Playability", "Playback video failed");
			logger.info("Video playback failed");
		}

//		if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
//			click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
//		}
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//		}
		if (!checkElementDisplayed(PWAPlayerPage.objprogressBar, "Progress bar")) {
			logger.info("Progress bar for LiveTv is not present");
			extent.extentLogger("Progress bar", "Progress bar for LiveTv is not present");
		}
		getWebDriver().get(URL);

	}

	public String checkPremiumORFreeFromLIVETVPageTrayAndSelect(String str, String premiumORfree) throws Exception {
//		try {
//			ScrollToTheElement(TextToXpath(str));
//			waitTime(5000);
//			ScrollToTheElement(TextToXpath(str));
//			waitTime(8000);
//		} catch (Exception e) {
//			//Swipe("UP", 1);
//			ScrollToTheElementWEB(TextToXpath(str));
//			waitTime(8000);
//			//ScrollToTheElement(TextToXpath(str));
//		}
		String ValueOfPremiumTumbnail = null;
		System.out.println("Check premium and select");
		List<WebElement> tumnails = getWebDriver()
				.findElements(By.xpath("(((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
						+ "']))//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']"));
		System.out.println("Number of Tumbnails : " + tumnails.size());
		boolean flag = false;
		for (int j = 1; j <= 5; j++) {
			for (int i = 1; i <= tumnails.size(); i++) {
				WebElement specificTumbnail = getWebDriver().findElement(
						By.xpath("(((((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
								+ "']))//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']//figure//a[@class='noSelect content'])["
								+ i + "])"));
				if (checkElementDisplayed(PWAHomePage.objLIVETVIsPremiumTumbnail(str, i), "Premium") == true) {
					System.out.println("premium Tumbnail");
					// System.out.println(getAttributValue("title",
					// PWAHomePage.objTumbnailTitle(str, i)));
					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objLIVETvTumbnailTitle(str, i));
					System.out.println("Premium LIVETV Tumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("PREMIUM")) {
						clickByElement(specificTumbnail, "Specific Tumbnail from Premium");
						flag = true;
						break;
					}
				} else if (checkElementDisplayed(PWAHomePage.objLIVETVIsPremiumTumbnail(str, i), "Premium") == false) {
					System.out.println("No premium Tumbnail");
					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objLIVETvTumbnailTitle(str, i));
					System.out.println("Non-Premium LIVETV Tumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("FREE")) {
						clickByElement(specificTumbnail, "Specific Tumbnail from Free");
						flag = true;
						break;
					}
				}
			}
			if (flag == true) {
				break;
			}
			swipeLIVETVTumbnailToLeft(str);
		}
		return ValueOfPremiumTumbnail;
	}

	public void PremiumFreeZeeOriginalKaltura(String Value, String userType) throws Exception {
		// Thread.sleep(10000);
		if (checkElementDisplayed(PWAHomePage.objKalGetPremium, "Get Premium") == true) { // zee originals
																							// guest&nonSubscribed
			System.out.println("Navigated to Title : " + getText(PWAHomePage.objKalGetTitle));
			extent.extentLogger("Navigated to Title : " + getText(PWAHomePage.objKalGetTitle),
					"Navigated to Title : " + getText(PWAHomePage.objKalGetTitle));
			waitTime(5000);
			click(PWAHomePage.objKalGetPremiumPlayicon, "Play Button");
			waitTime(8000);
			waitTime(5000);
			if (userType.equals("Guest")) {
				if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup,
						"Register popup close button") == true) {
					click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				}
			}
//				waitForPlayerAdToComplete("Video Player");
//				pausePlayer();
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
				}
			}
			waitTime(5000);
			if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
				extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

				if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
					waitForPlayerAdToComplete("Video Player");
				}
				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}
				if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
					System.out.println("Video is playing");
					extent.extentLogger("User is able to play video", "User is able to play video");
					logger.info("User is able to play video");
				} else {
					System.out.println("Video is not playing");
					extent.extentLoggerFail("Playback video failed", "Playback video failed");
					logger.info("Video playback failed");
				}

			} else {
				extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
			}
			System.out.println("Playing Episode : " + getText(PWAHomePage.objKalconsumptionMetaDiv));
			System.out.println("Type :" + getText(PWAHomePage.objKalconsumptionMetainfo));
		} else if (checkElementDisplayed(PWAHomePage.objKalGetFirstEpisode, "Get First Episode") == true) { // zee
																											// originals
																											// subscribed
			System.out.println("Navigated to Title : " + getText(PWAHomePage.objKalGetTitle));
			extent.extentLogger("Navigated to Title : " + getText(PWAHomePage.objKalGetTitle),
					"Navigated to Title : " + getText(PWAHomePage.objKalGetTitle));
			waitTime(5000);
			click(PWAHomePage.objKalGetFirstEpisodePlayicon, "Play Button");
			waitTime(8000);
			waitTime(5000);
			if (userType.equals("Guest")) {
				if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup,
						"Register popup close button") == true) {
					click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				}
			}
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
				}
			}
			waitTime(5000);
			if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
				extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

				if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
					waitForPlayerAdToComplete("Video Player");
				}
				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}
				if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
					System.out.println("Video is playing");
					extent.extentLogger("User is able to play video", "User is able to play video");
					logger.info("User is able to play video");
				} else {
					System.out.println("Video is not playing");
					extent.extentLoggerFail("Playback video failed", "Playback video failed");
					logger.info("Video playback failed");
				}

			} else {
				extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
			}
			System.out.println("Playing Episode : " + getText(PWAHomePage.objKalconsumptionMetaDiv));
			System.out.println("Type :" + getText(PWAHomePage.objKalconsumptionMetainfo));
		} else { // MOVIE
			waitTime(8000);
			waitTime(5000);
			if (userType.equals("Guest")) {
				if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup,
						"Register popup close button") == true) {
					click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				}
			}
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
				}
			}
			// FOR MOVIE
			if (checkElementDisplayed(PWAHomePage.objPlaybackMovieTitle(Value), "Title") == true) {
				System.out.println("Navigated to Title : " + getText(PWAHomePage.objPlaybackMovieTitle(Value)));
				extent.extentLogger("Navigated to Title : " + getText(PWAHomePage.objPlaybackMovieTitle(Value)),
						"Navigated to Title : " + getText(PWAHomePage.objPlaybackMovieTitle(Value)));
				if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link") == true) { // guest
																													// or
																													// nonsubscribed
					waitTime(5000);
					if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
						extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

						if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
							waitForPlayerAdToComplete("Video Player");
						}
						if (BROWSER.equals("Chrome")) {
							pausePlayer();
						} else {
							firefoxpause();
						}
						if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
							System.out.println("Video is playing");
							extent.extentLogger("User is able to play video", "User is able to play video");
							logger.info("User is able to play video");
						} else {
							System.out.println("Video is not playing");
							extent.extentLoggerFail("Playback video failed", "Playback video failed");
							logger.info("Video playback failed");
						}

					} else {
						extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
					}
					System.out.println("Playing Movie: " + getText(PWAHomePage.objKalconsumptionMetaDiv));
					System.out.println("Type :" + getText(PWAHomePage.objKalconsumptionMetainfo));
				} else { // subscribed
					waitTime(5000);
					if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
						extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

						if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
							waitForPlayerAdToComplete("Live Player");
						}
						if (BROWSER.equals("Chrome")) {
							pausePlayer();
						} else {
							firefoxpause();
						}
						if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
							System.out.println("Video is playing");
							extent.extentLogger("User is able to play video", "User is able to play video");
							logger.info("User is able to play video");
						} else {
							System.out.println("Video is not playing");
							extent.extentLoggerFail("Playback video failed", "Playback video failed");
							logger.info("Video playback failed");
						}

					} else {
						extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
					}
					System.out.println("Playing Movie: " + getText(PWAHomePage.objKalconsumptionMetaDiv));
					System.out.println("Type :" + getText(PWAHomePage.objKalconsumptionMetainfo));
				}
			}
			// FOR LIVETV
			if (checkElementDisplayed(PWAHomePage.objPlaybackLIVETVTitle1, "LiveTV title") == true) {
				System.out.println("Navigated to Title : " + getText(PWAHomePage.objPlaybackLIVETVTitle1));
				extent.extentLogger("Navigated to Title : " + getText(PWAHomePage.objPlaybackLIVETVTitle1),
						"Navigated to Title : " + getText(PWAHomePage.objPlaybackLIVETVTitle1));
				if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link") == true) { // guest
																													// or
																													// nonsubscribed
					waitTime(5000);
					if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
						extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

						if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
							waitForPlayerAdToComplete("Video Player");
						}
						if (BROWSER.equals("Chrome")) {
							pausePlayer();
						} else {
							firefoxpause();
						}
						if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
							System.out.println("Video is playing");
							extent.extentLogger("User is able to play video", "User is able to play video");
							logger.info("User is able to play video");
						} else {
							System.out.println("Video is not playing");
							extent.extentLoggerFail("Playback video failed", "Playback video failed");
							logger.info("Video playback failed");
						}

					} else {
						extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
					}
					System.out.println("Playing : " + getText(PWAHomePage.objKalLivetvPlaying));
					System.out.println("Channel :" + getText(PWAHomePage.objKalLivetvChannel));
				} else { // subscribed
					waitTime(5000);
					if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
						extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

						if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
							waitForPlayerAdToComplete("Video Player");
						}
						if (BROWSER.equals("Chrome")) {
							pausePlayer();
						} else {
							firefoxpause();
						}
						if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
							System.out.println("Video is playing");
							extent.extentLogger("User is able to play video", "User is able to play video");
							logger.info("User is able to play video");
						} else {
							System.out.println("Video is not playing");
							extent.extentLoggerFail("Playback video failed", "Playback video failed");
							logger.info("Video playback failed");
						}

					} else {
						extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
					}
					System.out.println("Playing : " + getText(PWAHomePage.objKalLivetvPlaying));
					System.out.println("Channel :" + getText(PWAHomePage.objKalLivetvChannel));
				}
			}
		}
		waitTime(3000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register popup close button") == true) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}
		}
		Thread.sleep(3000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
		}
		try {
			// click(By.xpath("//div[@class='zeeLogo noSelect']//child::*"), "Zee Logo");
			getWebDriver().get(URL);
		} catch (Exception e) {
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup,
						"Register popup close button") == true) {
					click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				}
			}
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
				}
			}
			click(By.xpath("//div[@class='zeeLogo noSelect']//child::*"), "Zee Logo");
		}
		waitTime(3000);
	}

	public void checkDurationInLivetv(String userType) throws Exception {
		extent.HeaderChildNode("checkDurationInLivetv");
		waitTime(2000);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = getParameterFromXML("livetv");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(8000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch1(keyword), "Searched Show");
		waitTime(10000);
		waitForPlayerAdToComplete("Live Player");
		pausePlayer();
		if (checkElementDisplayed(PWAPlayerPage.objcurrenttime, "Current time")) {
			extent.extentLoggerFail("Current time is displayed", "Current time is displayed");
			logger.info("Current time is displayed");
		} else {
			extent.extentLogger("Current time is not displayed", "Current time is not displayed");
			logger.info("Current time is not displayed");
		}
		if (checkElementDisplayed(PWAPlayerPage.objtotaltime, "Total time")) {
			extent.extentLoggerFail("Total time is displayed", "Total time is displayed");
			logger.info("Total time is displayed");
		} else {
			extent.extentLogger("Total time is not displayed", "Total time is not displayed");
			logger.info("Total time is not displayed");
		}
	}

	public void checkDurationandProgressVideo(String userType) throws Exception {
		extent.HeaderChildNode("checkDurationandProgressVideo");
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie4");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(5000);
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWASearchPage.objfirstdata, "Searched result");
//		click(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		Thread.sleep(10000);
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Why Register Popup") == true) {
				click(PWAPlayerPage.objCloseBtn, "Close Register Popup");
			}
		}
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		// Content elapsed time should update with the content playback
		if (userType.equals("Guest")) {
			String currentDuration = getText(PWAPlayerPage.objcurrenttime);
			System.out.println("Current time: " + currentDuration);
		} else {
			String currentDuration = getText(PWAPlayerPage.objcurrenttime);
			System.out.println("Elapsed time: " + currentDuration);
		}
		String totalDuration = getText(PWAPlayerPage.objtotaltime);
		System.out.println("Total time: " + totalDuration);
		String progress = null;
		if (checkElementDisplayed(PWAPlayerPage.objprogressBar, "ProgressBar")) {
			progress = getAttributValue("style", PWAPlayerPage.objprogressProgress);
			System.out.println("Progress : " + progress);
		}
		Thread.sleep(5000);
		verifyElementPresentAndClick(PWAPlayerPage.forward10SecBtn, "10 sec forward");
		verifyElementPresentAndClick(PWAPlayerPage.playBtn, "Play button");
		// Waiting for some time
		Thread.sleep(10000);
		Thread.sleep(10000);
		System.out.println("Waited for 5 sec");
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		String currentDuration1 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time: " + currentDuration1);
		String totalDuration1 = getText(PWAPlayerPage.objtotaltime);
		System.out.println("Total time: " + totalDuration1);
		String progress1 = getAttributValue("style", PWAPlayerPage.objprogressProgress);
		System.out.println("Progress : " + progress1);
		// Validate the availability and functionality of progress bar button
		if (!progress.equals(progress1)) {
			System.out.println("Progress Bar is functional");
			extent.extentLogger("Progress Bar is functional", "Progress Bar is functional");
			logger.info("Progress Bar is functional");
		} else {
			System.out.println("Progress Bar is not functional");
			extent.extentLoggerFail("Progress Bar is not functional", "Progress Bar is not functional");
			logger.info("Progress Bar is not functional");
		}
	}

	public void swipeLIVETVTumbnailToLeft(String str) throws InterruptedException {
		try {
			WebElement sourceLocator = getWebDriver().findElement(
					By.xpath("(((((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
							+ "']))//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']//figure//div[@class='noSelect content'])[3])"));
			WebElement targetLocator = getWebDriver().findElement(
					By.xpath("(((((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
							+ "']))//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']//figure//div[@class='noSelect content'])[2])"));
			Thread.sleep(4000);
			Actions action = new Actions(getWebDriver());
			action.dragAndDrop(sourceLocator, targetLocator).build().perform();
		} catch (Exception e) {
			System.out.println("No trays to swipe");
		}
	}

	/**
	 * ================================SUSHMA
	 * MoviePage==================================
	 * 
	 */

	public void Moviepage(String usertype, String Tabname) throws Exception {

		landingPagesValidationMovie(Tabname, usertype);
		landingPagesTrailerAndPopUpValidationMovie(usertype, Tabname);
		trayTitleAndContentValidationWithApiDataMovie(Tabname, "movies");
		premiumAndFreeMovie(usertype, Tabname);

	}

	public void landingPagesValidationMovie(String tabName, String userType) throws Exception {
		extent.HeaderChildNode(tabName + " Page Validation");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objActiveTab, "Active tab")) {
			String tab = getText(PWAHomePage.objActiveTab);
			System.out.println(tab);
			logger.info(tab + " tab is highlighted");
			extent.extentLogger("Tab", tab + " tab is highlighted");
		} else {
			logger.error(tabName + " tab is not highlighted");
			extent.extentLoggerFail("Tab", tabName + " tab is highlighted");
		}

		// check if tray is loaded

		for (int i = 1; i <= 2; i++) {
			if (checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray")) {
				System.out.println("Tray is loaded for " + i + " scroll");
				logger.info("Tray is loaded for " + i + " scroll");
				extent.extentLogger("Tray load", "Tray is loaded for " + i + " scroll");
			} else {
				ScrollToTheElement(PWAPremiumPage.objTrayTitle(i));
				checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray");
			}
		}

		// partialScrollDown();

		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");

		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");

		}

		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");

		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");

			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}

		Back(1);

		waitTime(2000);

		for (int i = 0; i < 5; i++) {
			if (findElements(PWAPremiumPage.objMinuteContent).size() > 0) {
				logger.info("Minute content is displayed");
				extent.extentLogger("Minute content", "Minute content is displayed");
				break;

			} else {
				logger.info("Minute content is not displayed");
				extent.extentLogger("Minute content", "Minute content is not displayed");
				partialScrollDown();
			}

		}

//		dismissDisplayContentLanguagePopUp();
		waitTime(5000);
		partialScrollDown();
		partialScrollDown();
		Back_TO_TopArrow_Web(userType);

		for (int i = 0; i < 5; i++) {
			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
				break;

			} else {
				logger.info("Premium tag is not displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				partialScrollDown();
			}

		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void landingPagesTrailerAndPopUpValidationMovie(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("Landing Page Carousel Validation");

		waitTime(5000);

		getWebDriver()
				.findElement(By.xpath("(//a[contains(@class,'noSelect')][contains(text(),'" + tabName + "')])[1]"))
				.click();
		waitTime(7000);
		// verifyElementPresentAndClick(PWAHomePage.objTabName(tabName), tabName);
		// waitTime(5000);
		waitForElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, 10);
		checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		mandatoryRegistrationPopUp(userType);
		click(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		waitTime(5000);
		if (BROWSER.equals("Firefox")) {
			waitForPlayerLoaderToComplete();
		}
		if (checkElementDisplayed(PWAPlayerPage.objPlayer, "player screen")) {
			logger.info("User is navigated to consumption page after tapping on content in listed collection");
			extent.extentLogger("Consumption page",
					"User is navigated to consumption page after tapping on content in listed collection");
		}

		if (userType.contains("NonSubscribedUser") || (userType.contains("Guest"))) {

			if (checkElementDisplayed(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
				mandatoryRegistrationPopUp(userType);
				JSClick(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
				waitTime(10000);
				if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
					verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");

				}
			} else {
				logger.info("Trailer is not available for the selected content");
				extent.extentLogger("Trailer", "Trailer is not available for the selected content");
				if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
					verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
				}
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void trayTitleAndContentValidationWithApiDataMovie(String tab, String api) throws Exception {
		extent.HeaderChildNode(tab + " page tray asset validation");
		waitTime(5000);
		getWebDriver().findElement(By.xpath("(//a[contains(@class,'noSelect')][contains(text(),'" + tab + "')])[1]"))
				.click();
		// waitTime(7000);
		// navigateToAnyScreenOnWeb(tab);
		waitForElementDisplayed(PWAMusicPage.objPremiumTag, 30);
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		for (int i = 0; i < 5; i++) {
			String titles = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			// System.out.println("Api data " +titles);
			logger.info("Api data " + titles);
			extent.extentLogger("Api data ", "Api data " + titles);
			apiTitleList.add(titles);
			Actions actions = new Actions(getWebDriver());
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();
			String trayTitle = apiTitleList.get(i);
			logger.info("UI data " + titles);
			extent.extentLogger("UI data ", "UI data " + titles);
			if (trayTitle.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.info("Metadata on the content card is not validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is not validated with Api data");
			}
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Button");
			waitTime(1000);
			verifyElementEnabled(PWAPremiumPage.objContentCardWatchlistBtn, "Add to Watchlist Button");
		}
	}

	public void premiumAndFreeMovie(String userType, String Tab) throws Exception {
		extent.HeaderChildNode("Verifing movies premium content");
		navigateToAnyScreenOnWeb("Movies"); // changed
		// navigateToAnyScreenOnWeb("Movies");
		Actions actions = new Actions(getWebDriver());
		WebElement contentCard = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(contentCard).build().perform();

		waitForElementDisplayed(PWAMoviesPage.objPremiumContentCard, 30);
		checkElementDisplayed(PWAMoviesPage.objPremiumContentCard, "PremiumContent");
		mandatoryRegistrationPopUp(userType);
		JSClick(PWAMoviesPage.objPremiumContentCard, "PremiumContent");
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			// getWebDriver().get("https://newpwa.zee5.com/kids/kids-movies/ramayana/0-0-72648");
			// // changed
			if (BROWSER.equals("Chrome")) {
				if (verifyElementPresent(PWAPlayerPage.objPlayerscreen, "Playback Overlay")) {
					// waitForPlayerLoaderToComplete();
					waitTime(5000);
					moviePausePlayer();
					WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
					waitTime(2000);
					Actions move = new Actions(getWebDriver());
					Action action = (Action) move.dragAndDropBy(scrubber, 580, 0).build();
					action.perform();
					JSClick(PWAPlayerPage.objPlayerPlay, "Play icon");
				}
			} else {
				waitForPlayerLoaderToComplete();
				if (verifyElementPresent(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay")) {
					firefoxpause();
					WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
					waitTime(10000);
					Actions move = new Actions(getWebDriver());
					Action action = (Action) move.dragAndDropBy(scrubber, 610, 0).build();
					action.perform();
					click(PWAPlayerPage.objPlayerPlay, "Play icon");
				}
			}
		}
		// JSClick(PWAMoviesPage.objPremiumContentCard, "PremiumContent"); // changed
		extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
		waitTime(15000);
		if (checkElementDisplayed(PWAPremiumPage.objPremiumPopUp, "Premium PopUp")) {
			verifyElementPresentAndClick(PWAPremiumPage.objClosePremiumPopup, "Premium PopUp Close icon");
			logger.info(
					"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
			extent.extentLogger("Maximize icon",
					"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
			Back(2);
		} else {
			waitTime(3000);
			// waitForPlayerAdToComplete2("Video Player");
			if (BROWSER.equals("Chrome")) {
				if (verifyElementPresent(PWAPlayerPage.objPlayerscreen, "Playback Overlay")) {
					moviePausePlayer();
				}
			} else {
				waitForPlayerLoaderToComplete();
				if (verifyElementPresent(PWAPlayerPage.objPlayerscreen, "Playback Overlay")) {
					firefoxpause();
				}
			}
			click(PWAPlayerPage.maximizeBtn, "Maximize icon");
			for (int i = 0; i < 5; i++) {
				if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
					if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
						logger.info("User is able to watch Trailer for premium content in landscape mode");
						extent.extentLogger("Landscape mode",
								"User is able to watch Trailer for premium content in landscape mode");
					} else {
						logger.info("User is able to watch premium content in landscape mode");
						extent.extentLogger("Landscape mode",
								"User is able to watch premium content in landscape mode");
					}

					waitTime(3000);
					click(PWAPlayerPage.minimizeBtn, "Minimize icon");
					break;
				} else {
					click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
				}
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			navigateToAnyScreenOnWeb("Movies");
			waitForElementDisplayed(PWAHomePage.objHighlightedTab("Movies"), 10);
		}
		waitTime(5000);
		extent.HeaderChildNode("Verifing free movie content");
		mandatoryRegistrationPopUp(userType);
		if (!chkPremiumORFreeFromVideosTabAndSelect("Trending Movies", "FREE", userType).equals("")) {
			waitTime(3000);
			if (userType.equalsIgnoreCase("Guest")) {
				if (checkElementDisplayed(PWAPlayerPage.objRegisterPopUp, "Register PopUp")) {
					verifyElementPresentAndClick(PWAPlayerPage.objCloseRegisterDialog, "Register popup close icon");
				}
			}
			if (userType.equalsIgnoreCase("Guest")) {
				if (checkElementDisplayed(PWAPlayerPage.objAdultView, "AdultContent")) {
					logger.info("Maximize icon is not displayed since the content is adult view");
					extent.extentLogger("Maximize icon",
							"Maximize icon is not displayed since the content is adult view");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
				} else {
					waitForPlayerAdToComplete2("Video Player");
					if (BROWSER.equals("Chrome")) {
						moviePausePlayer();
					} else {
						if (verifyElementPresent(PWAPlayerPage.objPlayerscreen, "Playback Overlay")) {
							firefoxpause();
						}
					}
					extent.HeaderChildNode("Verifing free movie content in landscape");
					click(PWAPlayerPage.maximizeBtn, "Maximize icon");
					for (int i = 0; i < 5; i++) {
						if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
							logger.info("User is able to watch free content in landscape mode");
							extent.extentLogger("Landscape mode",
									"User is able to watch free content in landscape mode");
							waitTime(3000);
							click(PWAPlayerPage.minimizeBtn, "Minimize icon");
							break;
						} else {
							click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
						}
					}
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
				}
			} else {
				waitForPlayerAdToComplete2("Video Player");
				if (BROWSER.equals("Chrome")) {
					moviePausePlayer();
				} else {
					if (verifyElementPresent(PWAPlayerPage.objPlayerscreen, "Playback Overlay")) {
						firefoxpause();
					}
				}
				extent.HeaderChildNode("Verifing free movie content in landscape");
				click(PWAPlayerPage.maximizeBtn, "Maximize icon");
				for (int i = 0; i < 5; i++) {
					if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
						logger.info("User is able to watch free content in landscape mode");
						extent.extentLogger("Landscape mode", "User is able to watch free content in landscape mode");
						waitTime(3000);
						click(PWAPlayerPage.minimizeBtn, "Minimize icon");
						break;
					} else {
						click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
					}
				}
			}
		} else {
			logger.info("No free movies displayed");
			extent.extentLoggerWarning("Landscape mode", "No free movies displayed");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/**
	 * Method to Pause the Player
	 */
	public boolean moviePausePlayer() throws InterruptedException {
		boolean playerPaused = false;
		for (int trial = 0; trial <= 4; trial++) {
			try {
				waitTime(3000);
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
				actions.moveToElement(menuOption).perform();
				click(PWAPlayerPage.objPlayerPause, "Player Pause");
				try {
					getWebDriver().findElement(PWAPlayerPage.playBtn);
					extent.extentLogger("playerPaused", "Paused the Player");
					logger.info("Paused the Player");
					playerPaused = true;
					break;
				} catch (Exception e) {
				}
			} catch (Exception e) {
				Thread.sleep(1000);
				if (trial == 4) {
					extent.extentLoggerFail("errorOccured", "Error when handling Player");
					logger.error("Error when handling Player");
				}
			}
		}
		return playerPaused;
	}

	/**
	 * Video Player or Live Player Ad verify
	 * 
	 * @param playerType
	 * @throws Exception
	 */
	public void waitForPlayerAdToComplete2(String playerType) throws Exception {
		boolean adWasDisplayed = false;
		boolean playerDisplayed = false;
		int confirmCount = 0;
		main: for (int trial = 0; trial < 90; trial++) {
			try {
				getWebDriver().findElement(PWAPlayerPage.objAd);
				adWasDisplayed = true;
				if (trial == 5) {
					logger.info("Ad play in progress");
					extent.extentLogger("AdPlayInProgress", "Ad play in progress");
				}
				if (Math.floorMod(trial, 10) == 0)
					System.out.println("Ad play in progress");
				Thread.sleep(1000);
			} catch (Exception e) {
				try {
					if (playerType.equals("Live Player")) {
						getWebDriver().findElement(PWAPlayerPage.objLivePlayerLiveTag);
					} else if (playerType.equals("Video Player")) {
						if (BROWSER.equals("Chrome")) {
							click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
							checkElementDisplayed(PWAPlayerPage.maximizeBtn, "Maximize icon");
							click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
						} else {
							Actions actions = new Actions(getWebDriver());
							WebElement menuOption = getWebDriver()
									.findElement(By.xpath("//div[@class='playkit-overlay-action']"));
							actions.moveToElement(menuOption).perform();
							checkElementDisplayed(PWAPlayerPage.maximizeBtn, "Maximize icon");
						}
						// getWebDriver().findElement(PWAPlayerPage.maximizeBtn);
					}
					playerDisplayed = true;
					// Thread.sleep(1000);
					confirmCount++;
					if (confirmCount == 1) {
						if (adWasDisplayed == false) {
							logger.info("Ad did not play");
							extent.extentLogger("AdDidNotPlay", "Ad did not play");
						} else {
							logger.info("Ad play complete");
							extent.extentLogger("AdPlayComplete", "Ad play complete");
						}
						break main;
					}
				} catch (Exception e1) {
					Thread.sleep(1000);
				}
			}
		}
		if (playerDisplayed == false && adWasDisplayed == false) {
			logger.error("Ad play failure");
			extent.extentLoggerFail("failedAd", "Ad play failure");
		}
	}

	public String chkPremiumORFreeFromVideosTabAndSelect(String str, String premiumORfree, String usertype)
			throws Exception {
		boolean foundContent = false;
		ScrollToTheElementWEB(PWAMoviesPage.TextToXpath(str));
		waitTime(5000);
		String ValueOfPremiumTumbnail = null;
		int p = 0;
		extent.extentLogger("", "Checking availability of " + premiumORfree + " content");
		logger.info("Checking availability of " + premiumORfree + " content");
		main: for (int j = 0; j < 5; j++) {
			List<WebElement> tumnails = findElements(By.xpath("//div[@class='trayHeader']/child::h2[contains(text(),'"
					+ str
					+ "')]/parent::*/following-sibling::*/child::*/child::div/child::*/child::*/child::*/child::*/child::a/child::figure"));
			System.out.println("numberofThumnails:" + tumnails.size());
			for (int i = 1 + p; i <= tumnails.size(); i++) {
				System.out.println(i);
				WebElement specificTumbnail = getWebDriver()
						.findElement(By.xpath("(//div[@class='trayHeader']/child::h2[contains(text(),'" + str
								+ "')]/parent::*/following-sibling::*/child::*/child::div/child::*/child::*/child::*/child::*/child::a/child::figure)["
								+ i + "]"));
				boolean elevisibility = checkElementDisplayed(PWAHomePage.objVideoIsPremiumTumbnail(str, i),
						"Premium Card");
				if (elevisibility == true) {
					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objVideoTumbnailTitle(str, i));
					System.out.println("Premium Tumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("PREMIUM")) {
						clickByElement(specificTumbnail, "Specific Tumbnail from Premium");
						foundContent = true;
						break main;
					}
				} else if (elevisibility == false) {
					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objVideoTumbnailTitle(str, i));
					System.out.println("Non-Premium Tumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("FREE")) {
						clickByElement(specificTumbnail, "Specific Tumbnail from Non-Premium");
						foundContent = true;
						break main;
					}
				}
			}
			if (foundContent) {
				p = tumnails.size();
				getWebDriver().findElement(By.xpath("//div[@class='trayHeader']/child::h2[contains(text(),'" + str
						+ "')]/parent::*/following-sibling::*/child::*/child::button[@class='slick-arrow slick-next']"))
						.click();
				waitTime(3000);
				return ValueOfPremiumTumbnail;
			}
		}
		return "";
	}

	/**
	 * ================================BINDU
	 * Search==================================
	 * 
	 */

	public void SearchResultsScreen(String UserType) throws Exception {

		switch (UserType) {
		case "Guest":
			extent.HeaderChildNode("Guest user");
			extent.extentLogger("Accessing as Guest User", "Accessing as Guest User");
			logger.info("Accessing as Guest User");
			landingOnSearchscreen();
			MicrophoneVoiceInput();
			liveTvsearch("Republic TV");
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovie");
			movieSearchResults(keyword);
			PartlySpeltAsset("natasaa", UserType);
			MultipleKeywordsSearch("Natasarvabhowma Kannada Drama");
			LanguageSearch("Kannada");
			GenreSearch("Comedy");

			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("NonSubscribedUser");
			extent.extentLogger("Accessing as NonSubscribedUser User", "Accessing as NonSubscribedUser User");
			logger.info("Accessing as NonSubscribedUser User");
			// ZeeWEBPWALogin("NonSubscribedUser");
			landingOnSearchscreen();
			MicrophoneVoiceInput();
			liveTvsearch("Republic TV");
			String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovie");
			movieSearchResults(keyword1);
			PartlySpeltAsset("Natasaa", UserType);
			MultipleKeywordsSearch("Natasarvabhowma Kannada Drama");
			LanguageSearch("Kannada");
			GenreSearch("Comedy");

			break;

		case "SubscribedUser":
			extent.HeaderChildNode("SubscribedUser");
			extent.extentLogger("Accessing as SubscribedUser User", "Accessing as SubscribedUser User");
			logger.info("Accessing as SubscribedUser User");
			// ZeeWEBPWALogin("SubscribedUser");
			landingOnSearchscreen();
			MicrophoneVoiceInput();
			liveTvsearch("Republic TV");
			String keyword2 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovie");
			movieSearchResults(keyword2);
			PartlySpeltAsset("Natasaa", UserType);
			MultipleKeywordsSearch("Natasarvabhowma Kannada Drama");
			LanguageSearch("Kannada");
			GenreSearch("Comedy");
			searchemptystateScreen("Natasarvabhowma");
		}
	}

	public void landingOnSearchscreen() throws Exception {
		extent.HeaderChildNode("Validating that user lands on search landing screen");
		waitForElementDisplayed(PWAHomePage.objSearchBtn, 10);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		checkElementDisplayed(PWASearchPage.objVoiceSearchButton, "Voice seach icon");

		if (checkElementDisplayed(PWASearchPage.objSearchEditBox, "Search EditBox")) {
			logger.info("User landed on Search landing screen post tapping on search icon");
			extent.extentLogger("Search landingscreen",
					"User landed on Search landing screen post tapping on search icon");
		}
	}

	public void MicrophoneVoiceInput() throws Exception {
		extent.HeaderChildNode("Validating that user is asked to give the voice input post tapping on microphone icon");
		if (BROWSER.equals("Chrome")) {
			click(PWASearchPage.objVoiceSearchButton, "Voice search icon");
			waitTime(2000);
			logger.info("Voice Search Icon is present in Chrome Browser and clicked on Voice Search Icon ");
			extent.extentLogger("Voice input",
					"Voice Search Icon is present in Chrome Browser and clicked on Voice Search Icon");

			Robot robot = new Robot();
			robot.keyPress(KeyEvent.VK_TAB);
			waitTime(1000);
			robot.keyPress(KeyEvent.VK_TAB);
			waitTime(1000);
			robot.keyPress(KeyEvent.VK_ENTER);

			waitTime(2000);
			click(PWASearchPage.objVoiceSearchButton, "Voice seach icon");
			String searchBarText = getAttributValue("placeholder", PWASearchPage.objSearchEditBox);
			logger.info("String displayed on search field :" + searchBarText);
			extent.extentLogger("", "String displayed on search field :" + searchBarText);
			if (searchBarText.equalsIgnoreCase("Speak to Search on ZEE5")) {
				logger.info("User is asked to give the voice input");
				extent.extentLogger("Voice input", "User is asked to give the voice input");
			} else {
				logger.error("User is not asked to give the voice input");
				extent.extentLoggerFail("Voice input", "User is not asked to give the voice input");
			}

		} else {
			logger.error("Voice Search Icon is not applicable for Firefox Browser");
			extent.extentLoggerFail("Voice Search icon", "Voice Search Icon is not applicable for Firefox Browser");
		}

		Back(1);
	}

	public void liveTvsearch(String title) throws Exception {
		extent.HeaderChildNode(
				"Validating that Live TV card is displayed when user searches by any On Going Live TV content name");
		waitTime(3000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		waitTime(10000);
		if (checkElementDisplayed(PWALiveTVPage.objLivelogo, "Live logo")) {
			logger.info("Live Channel card is displayed");
			extent.extentLogger("Live Channel card", "Live Tv card is displayed");
		} else {
			logger.info("Live Channel card is not displayed");
			extent.extentLogger("Live Channel card", "Live Tv card is not displayed");
		}
		waitTime(3000);
		click(PWALiveTVPage.objLivelogo, "Live logo");
		waitTime(3000);
		Back(2);

	}

	public void movieSearchResults(String title) throws Exception {

		extent.HeaderChildNode("Validating that user is able to search Movie");

		waitTime(4000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, title, "Search bar");

		waitTime(3000);

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");

			if (getWebDriver().findElements(By.xpath(
					"(//div[@class='listingGrid']//div[@class='metaData']//h3[contains(@class,'cardTitle')]//span[@class='highLight'])"))
					.size() > 0) {
				logger.info("Related search results are displayed");
				extent.extentLogger("Related search results", "Related search results are displayed");

			} else {
				logger.info("Related search results are not displayed");
				extent.extentLogger("Related search results", "Related search results are not displayed");
			}
		}

//	verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
//
//	clearField(PWASearchPage.objSearchEditBox, "Search Bar");

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		Back(1);

	}

	public void PartlySpeltAsset(String title, String userType) throws Exception {
		extent.HeaderChildNode("Validating that user is able to search Partly spelt asset name");

		waitTime(6000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);
		mandatoryRegistrationPopUp(userType);
		type(PWASearchPage.objSearchEditBox, title, "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");

			if (getWebDriver().findElements(By.xpath(
					"(//div[@class='listingGrid']//div[@class='metaData']//h3[contains(@class,'cardTitle')]//span[@class='highLight'])"))
					.size() > 0) {
				logger.info("Related search results are displayed");
				extent.extentLogger("Partlyspelt Asset search results", "Related search results are displayed");

			} else {
				logger.info("Related search results are not displayed");
				extent.extentLogger("Related search results", "Related search results are not displayed");
			}
		}

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		Back(1);

	}

	public void MultipleKeywordsSearch(String title) throws Exception {
		extent.HeaderChildNode("Validating that user is able to search through MultipleKeywords");

		waitTime(3000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, title, "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");

			if (getWebDriver()
					.findElements(
							By.xpath("//div[@class='clickWrapper']//div[@class='dateTime']//span[@class='items']"))
					.size() > 0)

			{
				waitTime(4000);
				logger.info("Related search results are displayed");
				extent.extentLogger("Related search Results", "Related search results are displayed");
			}

			else {
				logger.info("Related search results are not displayed");
				extent.extentLogger("Related search Results", "Related search  results are not displayed");
			}

		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");

		Back(1);

	}

	public void LanguageSearch(String language) throws Exception {
		extent.HeaderChildNode("Validating that user is able to search content by Language");

		waitTime(3000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, language, "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
//	 tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");
			int k = 1;
			for (k = 1; k <= 3; k++) {
				List<WebElement> AssetMetadata = getWebDriver().findElements(
						By.xpath("(//div[@class='clickWrapper'])[" + k + "]/child::div[@class='dateTime']/child::*"));
				// System.out.println(AssetMetadata.size());

				for (int j = 1; j <= AssetMetadata.size(); j++) {
					String metadata = getWebDriver().findElement(By.xpath("((//div[@class='clickWrapper'])[" + k
							+ "]/child::div[@class='dateTime']/child::*)[" + j + "]")).getText();
					// System.out.println(metadata);
					if (metadata.contains(language)) {
						logger.info("User can search a content by language");
						extent.extentLogger("Language search", "User can search a content by language");
					}

				}
			}
		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		Back(1);

	}

	public void GenreSearch(String genre) throws Exception {
		extent.HeaderChildNode("Validating that user is able to search content by Genre");

		waitTime(3000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, genre, "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		// tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			waitTime(4000);
			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");
			int k = 1;
			for (k = 1; k <= 3; k++) {
				List<WebElement> AssetMetadata = getWebDriver().findElements(
						By.xpath("(//div[@class='clickWrapper'])[" + k + "]/child::div[@class='dateTime']/child::*"));
				// System.out.println(AssetMetadata.size());

				for (int j = 1; j <= AssetMetadata.size(); j++) {
					String metadata = getWebDriver().findElement(By.xpath("((//div[@class='clickWrapper'])[" + k
							+ "]/child::div[@class='dateTime']/child::*)[" + j + "]")).getText();
					// System.out.println(metadata);
					if (metadata.contains(genre)) {
						logger.info("User can search a content by Genre");
						extent.extentLogger("Genre search", "User can search a content by Genre");
					}
				}
			}
		}
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		Back(1);
	}

//This method is only for Subscribed User
	public void searchemptystateScreen(String title) throws Exception {

		extent.HeaderChildNode("Validating that empty state screen is displayed");

		waitTime(3000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, title, "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");

			if (getWebDriver().findElements(By.xpath(
					"(//div[@class='listingGrid']//div[@class='metaData']//h3[contains(@class,'cardTitle')]//span[@class='highLight'])"))
					.size() > 0) {
				logger.info("Related search results are displayed");
				extent.extentLogger("Related search results", "Related search results are displayed");

			} else if (getWebDriver().findElements(By.xpath("//h3[contains(@class,'cardTitle')]")).size() > 0) {
				logger.info("Search results are displayed");
				extent.extentLogger("Search results", "Search results are displayed");
			} else {
				checkElementDisplayed(PWASearchPage.objEmptyStateScreenErrormsg, "Empty state screen");
			}
		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		Back(1);

	}

	/**
	 * ================================BINDU
	 * ZeeOriginals==================================
	 * 
	 */

	public void Zee5OriginalsScreen(String UserType, String Tabname) throws Exception {

		switch (UserType) {

		case "Guest":
			landingPagesValidationZeeoriginals(Tabname);
			zee5originalstrayvalidation(Tabname);
			mandatoryRegistrationPopUp(UserType);
			extent.HeaderChildNode("Web Series page tray asset validation");
			trayTitleAndContentValidationWithApiDataZeeoriginals(Tabname, "zeeoriginals");
			ValidatingPremiumTag(Tabname);
			mandatoryRegistrationPopUp(UserType);
			ConsumptionScreen(Tabname);
			Subscriptionpopup(UserType, Tabname, "ZEE5 Original Movies");
			break;

		case "NonSubscribedUser":
			landingPagesValidationZeeoriginals(Tabname);
			zee5originalstrayvalidation(Tabname);
			extent.HeaderChildNode("Web Series page tray asset validation");
			trayTitleAndContentValidationWithApiDataZeeoriginals(Tabname, "zeeoriginals");
			ValidatingPremiumTag(Tabname);
			mandatoryRegistrationPopUp(UserType);
			ConsumptionScreen(Tabname);
			Subscriptionpopup(UserType, Tabname, "ZEE5 Original Movies");
			break;

		case "SubscribedUser":
			landingPagesValidationZeeoriginals(Tabname);
			zee5originalstrayvalidation(Tabname);
			extent.HeaderChildNode("Web Series page tray asset validation");
			trayTitleAndContentValidationWithApiDataZeeoriginals(Tabname, "zeeoriginals");
			ValidatingPremiumTag(Tabname);
			mandatoryRegistrationPopUp(UserType);
			ConsumptionScreen(Tabname);
			Subscriptionpopup(UserType, Tabname, "ZEE5 Original Movies");
		}
	}

//public void dismissDisplayContentLanguagePopUp() throws Exception {
//		extent.HeaderChildNode("Dismiss Display and Content Language Pop Ups");
//		waitForElementAndClickIfPresent(PWAHomePage.objContinueDisplayContentLangPopup,90,"Continue on Display Language Pop Up");
//		Thread.sleep(5000);
//		waitForElementAndClickIfPresent(PWAHomePage.objContinueDisplayContentLangPopup,10,"Continue on Content Language Pop Up");
//	}

	public void landingPagesValidationZeeoriginals(String tabName) throws Exception {
		extent.HeaderChildNode("ZEE5 Originals Page Validation");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(3000);
		if (verifyElementEnabled(PWAHomePage.objActiveTab, "Active tab")) {
			String tab = getText(PWAHomePage.objActiveTab);
			System.out.println(tab);
			logger.info(tab + " tab is highlighted");
			extent.extentLogger("Tab", tab + " tab is highlighted");
		} else {
			logger.error(tabName + " tab is not highlighted");
			extent.extentLoggerFail("Tab", tabName + " tab is not highlighted");
		}

		waitTime(3000);
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");

		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");

		}

		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");

		waitTime(3000);
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");

			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}

		}

		Back(1);

		waitTime(2000);

		for (int i = 0; i < 5; i++) {
			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
				break;

			} else {
				logger.info("Premium tag is not displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				partialScrollDown();
			}

		}

		waitTime(2000);

		for (int i = 0; i < 5; i++) {
			if (findElements(PWAPremiumPage.objMinuteContent).size() > 0) {
				logger.info("Minute content is displayed");
				extent.extentLogger("Minute content", "Minute content is displayed");
				break;

			} else {
				logger.info("Minute content is not displayed");
				extent.extentLogger("Minute content", "Minute content is not displayed");
				partialScrollDown();
			}

		}

		waitTime(2000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Back To Top Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Back To Top Arrow icon");
		}

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void zee5originalstrayvalidation(String Tabname) throws Exception {
		extent.HeaderChildNode("Verifing the trays displayed in ZEE5 Originals Tab");

		// verifyElementPresentAndClick(PWAHomePage.objTabName(tabName), tabName);

		navigateToAnyScreenOnWeb(Tabname);
		String languageSmallText = allSelectedLanguagesWEB();
		System.out.println(languageSmallText);

		List<String> apiTitleList = new LinkedList<String>();

		int q = 1;
		for (int k = q; k <= 6; k++) {
			// System.out.println("q: "+q);
			Response resp = ResponseInstance.getResponseForPages2("zeeoriginals", languageSmallText, q);

			List<String> apitotaltrays = resp.jsonPath().getList("buckets");
			System.out.println(apitotaltrays.size());
			for (int i = 0; i < apitotaltrays.size(); i++) {
				String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
				System.out.println(traytitle);
				apiTitleList.add(traytitle);
			}
			q = q + 1;
		}
		System.out.println("api: " + apiTitleList);

		scrollToBottomOfPageWEB();
		// waitTime(6000);
		if (checkElementDisplayed(PWAZee5OriginalPage.objWhatWonderingPopUp, "Wondering popUp")) {
			waitTime(3000);
			click(PWAZee5OriginalPage.objWhatWonderingPopUpCloseIcon, "Close icon");
		}
		waitTime(3000);
		// checkElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to
		// Top");
		click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
		waitTime(5000);
		List<String> uiTitleList = new LinkedList<String>();
		List<WebElement> uitotaltrays = getWebDriver().findElements(By.xpath("//div[@class='trayHeader']"));
		System.out.println(uitotaltrays.size());

		int j = 0;
		for (j = 0; j < uitotaltrays.size() - 1; j++) {
			String trayTitle = findElement(By.xpath("(//div[@class='trayHeader'])[" + (j + 1) + "]/child::h2/child::*"))
					.getText();

			System.out.println(trayTitle);
			uiTitleList.add(trayTitle);
			// scrollDown();

			scrollToBottomOfPageWEB();
		}
		System.out.println("UI: " + uiTitleList);

		for (int l = 0; l < uitotaltrays.size() - 1; l++) {
			if (apiTitleList.get(l + 1).equalsIgnoreCase(uiTitleList.get(l))) {
				logger.info(
						"API title: " + apiTitleList.get(l + 1) + " is verified with UI title: " + uiTitleList.get(l));
				extent.extentLogger("Tray validation",
						"API title: " + apiTitleList.get(l + 1) + " is verified with UI title: " + uiTitleList.get(l));

			}
		}

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

	}

	public void trayTitleAndContentValidationWithApiDataZeeoriginals(String Tabname, String api) throws Exception {
		navigateToAnyScreenOnWeb(Tabname);
		String languageSmallText = allSelectedLanguagesWEB();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		logger.info("The Title of the Tray is " + Tray_Title + "");
		extent.extentLogger("Metadata", "The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		Actions actions = new Actions(getWebDriver());
		for (int i = 0; i < 5; i++) {
			String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			logger.info("Api data : " + title);
			extent.extentLogger("", "Api data : " + title);
			apiTitleList.add(title);
			waitTime(6000);
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();
			String trayTitle = apiTitleList.get(i);
			logger.info("UI data " + trayTitle);

			if (trayTitle.equalsIgnoreCase(title)) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.error("Metadata on the content card is not validated with Api data");
				extent.extentLoggerFail("Metadata", "Metadata on the content card is not validated with Api data");
			}
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Button");

		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void ValidatingPremiumTag(String Tabname) throws Exception {
		extent.HeaderChildNode("Validating Promo of the Premium Content ");

		navigateToAnyScreenOnWeb(Tabname);
		waitTime(3000);

//		for(int i=0;i<5;i++){
//			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) 
//			{
//				logger.info("Premium tag is displayed");
//				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
//				break;
//				
//			}
//			else
//			{
//				logger.info("Premium tag is not displayed");
//				extent.extentLoggerFail("Premium Tag", "Premium Tag is not displayed");
//				//PartialSwipe("UP",1);
//				JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
//			    jse.executeScript("window.scrollTo(0, 300)");
//				
//			}
//			
//		}

		waitTime(4000);
		if (checkElementDisplayed(PWAZee5OriginalPage.objPremiumCard, "Premium Card"))

		{

			click(PWAZee5OriginalPage.objPremiumCard, "Premium card");
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Register popup")) {
				waitTime(3000);
				click(PWAPlayerPage.objCloseRegisterDialog, "Register popup close icon");
			}
			if (checkElementDisplayed(CompleteYourProfilePopUp.objCompleteYourProfileTxt,
					"Complete Your Profile pop up")) {
				click(CompleteYourProfilePopUp.objCloseBtn, "Close Button");

			}

			if (checkElementDisplayed(PWAPlayerPage.objWatchPromo, "Watch Promo icon")) {

				click(PWAPlayerPage.objWatchPromo, "Watch Promo icon");
				waitTime(2000);
				checkElementDisplayed(PWAPlayerPage.objPlayerPromoMetadata, "Promo Content");
				logger.info("User can able to watch Promo from the selected content");
				extent.extentLogger("Popup Screen", "User can able to watch Promo from the selected content");
				Back(1);
			}

			Back(1);
		}

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void ConsumptionScreen(String Tabname) throws Exception {
		extent.HeaderChildNode("Validation of the Consumption Screen with content autoplaying");

		navigateToAnyScreenOnWeb(Tabname);
		Thread.sleep(4000);
		verifyElementPresentAndClick(PWAZee5OriginalPage.objCarousel, "Carousel Card");

		if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Why Register popup")) {
			waitTime(3000);
			click(PWAPlayerPage.objCloseRegisterDialog, "Register popup close icon");
		}

		if (checkElementDisplayed(PWAPlayerPage.objSubscriptionpopup, "Subscription popup")) {
			waitTime(3000);
			click(PWAPlayerPage.ObjSubscriptionpopupCloseIcon, "Subscription popup close icon");
		}
		if (checkElementDisplayed(CompleteYourProfilePopUp.objCompleteYourProfileTxt, "Complete Your Profile pop up")) {
			click(CompleteYourProfilePopUp.objCloseBtn, "Complete your profile popup Close Button");

		}

		waitTime(3000);

		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "User is navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "User is not navigated to Consumption Page");
		}

		Back(1);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	@SuppressWarnings("unused")
	public void Subscriptionpopup(String UserType, String tabName, String trayTitle) throws Exception {
		extent.HeaderChildNode("Validating the Subscription popup after some interval of time");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(20000);
		// handle mandatory pop up
		mandatoryRegistrationPopUp(UserType);
		boolean firstAssetClicked = swipeTillTrayAndClickFirstAsset(userType, 15, trayTitle,
				"\"" + trayTitle + "\" tray", tabName);
		waitTime(3000);
		String nextPageTitle = "";
		try {
			nextPageTitle = getText(PWAShowsPage.objShowsTitle);
			logger.info("Shows Details page is displayed " + nextPageTitle);
			extent.extentLogger("showDetails", "Shows Details page is displayed " + nextPageTitle);
			scrollDownByY(300);
			click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		} catch (Exception e) {
			try {
				nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				logger.info("Player screen is displayed " + nextPageTitle);
				extent.extentLogger("playerScreen", "Player screen is displayed " + nextPageTitle);
			} catch (Exception e1) {
				logger.error("Failed to fetch consumptions/details page titles");
				extent.extentLoggerFail("playerScreen", "Failed to fetch consumptions/details page titles");
			}
		}
		if (UserType.equals("Guest") || UserType.equals("NonSubscribedUser")) {
			if (waitForElement(PWASubscriptionPages.objGetPremiumPopupTitle, 20, "Subscribe Pop Up"))
				click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
		} else {
			if (checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Subscribe Pop Up")) {
				logger.error("Subscribe Pop Up should not be displayed for Subscribed User");
				extent.extentLoggerFail("", "Subscribe Pop Up should not be displayed for Subscribed User");
			} else {
				logger.info("Subscribe Pop Up not displayed is expected behavior for Subscribed User");
				extent.extentLogger("", "Subscribe Pop Up not displayed is expected behavior for Subscribed User");
			}
		}
		navigateHome();
		// handle mandatory pop up
		mandatoryRegistrationPopUp(UserType);
	}

	/**
	 * ====================SATISH - SUBSCRIPTION
	 * POPUPSCENARIOS==========================
	 * 
	 */

	/**
	 * Verify Subscription popup after trailer is played for 20 seconds
	 */
	public void zeePWAVerifySubscriptionPopUpAfterTwentySecondsPlayback(String userType) throws Exception {
		HeaderChildNode("Verify Subscription popup after trailer is played");
		System.out.println("Verify Subscription popup after trailer is played");
		click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieWithTrailer");
			zeeSearchForContentAndClickOnFirstResult(keyword);
			waitForElement(PWASubscriptionPages.objGetPremiumPopupTitle, 21, "Subscribe Pop Up");
			if (verifyElementPresent(PWASubscriptionPages.objGetPremiumPopupTitle, "Subscribe Pop Up")) {
				click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
			}
		}
	}

	/**
	 * Navigate to Subscription Flow From Subscription Popup full screen player
	 */
	public void zeePWAVerifyNavigationToSubscriptionFlowFromSubscriptionPopupFullscreenPlayer(String userType)
			throws Exception {
		HeaderChildNode("Navigate to Subscription Flow From Player Inline Subscription Link in full screen player");
		System.out.println("Navigate to Subscription Flow From Player Inline Subscription Link in full screen player");
		click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
			waitTime(10000);
			playerTap();
			verifyElementPresentAndClick(PWAPlayerPage.maximizeBtn, "Maximize window icon");
			verifyElementPresent(PWAPlayerPage.minimizeBtn, "Minimize window icon");
			if(userType.equalsIgnoreCase("Guest")) {
				if(waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button")) {
					waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button");
					waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
					waitForElementAndClick(PWASubscriptionPages.objContinueBtn, 20, "Continue Button");
					waitForElementAndClick(PWASubscriptionPages.objAccountInfoHighlighted, 20, "Account Info Page");
				}
			} else if(userType.equalsIgnoreCase("NonSubscribedUser")){
				if(waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button")) {
					waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button");
					waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
					waitForElement(PWASubscriptionPages.objPaymentHighlighted, 20, "Payment Section");
				}
			}
		}
	}

	/**
	 * Verify Subscription Popup After Trailer Playback Is Complete
	 */
	@SuppressWarnings("unused")
	public void zeePWAVerifySubscriptionPopupAfterTrailerPlaybackIsComplete(String userType) throws Exception {
		HeaderChildNode("Verify Player Inline Subscription Link After Completion Of Trailer Playback Is Complete");
		click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
		waitTime(5000);
		playerTap();
		String totalDuration = findElement(PWAPlayerPage.objPlayerTotalDuration).getText();
		extent.extentLogger("", "Total duration of the trailer: " + totalDuration);
		logger.info("Total duration of the trailer is: " + totalDuration);
		playerTap();
		String currentTime = findElement(PWAPlayerPage.objPlayerCurrentDuration).getText();
		logger.info("Current duration of the trailer is: " + currentTime);
		extent.extentLogger("", "Current duration of the trailer is: " + currentTime);
		for (int i = 0; !(totalDuration.equals(currentTime)); i++) {
			waitTime(5000);
			playerTap();
			currentTime = findElement(PWAPlayerPage.objPlayerCurrentDuration).getAttribute("innerText");
			logger.info("Current duration of the trailer is: " + currentTime);
			extent.extentLogger("", "Current duration of the trailer is: " + currentTime);
			waitTime(10000);
		}
		if(userType.equalsIgnoreCase("Guest")) {
			if(waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button")) {
				waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
				waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button");
				waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
				Back(1);
				waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
				waitForElement(PWASubscriptionPages.objTrailerTextAtConsumptionPage, 20, "Navigated to Next Content");
				Back(1);
				waitForElement(PWASubscriptionPages.objExistUserText, 20, "Are you a Zee5 Subscriber? - Text");
				waitForElementAndClick(PWASubscriptionPages.objLoginLink, 20, "Login Link");
				waitForElement(PWASubscriptionPages.objLoginPage, 20, "Navigated to Login page");
				Back(1);
			} 

		} else if(userType.equalsIgnoreCase("NonSubscribedUser")){
			if(waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button")) {
				waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
				waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button");
				waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
				Back(1);
				waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
				waitForElement(PWASubscriptionPages.objTrailerTextAtConsumptionPage, 20, "Navigated to Next Content");
				Back(1);
			}
		}
		Back(2);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	@SuppressWarnings("rawtypes")
	public void playerTap() throws Exception {

		if (getPlatform().equalsIgnoreCase("Android")) {
			int deviceWidth = getDriver().manage().window().getSize().width;
			int deviceHeight = getDriver().manage().window().getSize().height;
			int x = deviceWidth / 2;
			int y = deviceHeight / 4;
			TouchAction act = new TouchAction(getDriver());
			act.tap(PointOption.point(x, y)).perform();
			extent.extentLogger("playerTap", "Tapped on the Player");
			logger.info("Tapped on the Player");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			Actions action = new Actions(getWebDriver());
			action.moveToElement(findElement(PWAPlayerPage.objPlaybackVideoOverlay));
			action.perform();
		}

	}

	public void wouldYouLikeToPopupClose() throws Exception {
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
	}

	/**
	 * ====================SATISH - UserActions==========================
	 * 
	 */

	public void AddContentsToWatchList() throws Exception {

		// Adding Episodes to Watch list
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		// Enter an episode
		type(PWASearchPage.objSearchEditBox, "Grand Premiere - Comedy Khiladigalu Season 3", "Search edit box");
		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, " ", "Search bar");
		waitTime(5000);
		// Click on the first episode
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Episode");
		waitTime(3000);
		if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp, "Complete profile Popup") == true) {
			click(PWAAddToWatchListPage.objClosePopup, "Close button");
		}
		// Click on Add to watch list
		click(PWAPlayerPage.watchListBtn, "Add to Watch list");
		wouldYouLikeToPopupClose();
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		// Enter an episode
		type(PWASearchPage.objSearchEditBox, "Everyone delighted about Adya's pregnancy - Gattimela",
				"Search edit box");
		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, " ", "Search bar");
		waitTime(5000);
		wouldYouLikeToPopupClose();
		// Click on the first episode
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Episode");
		if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp, "Complete profile Popup") == true) {
			click(PWAAddToWatchListPage.objClosePopup, "Close button");
		}
		waitTime(3000);
		// Click on Add to watch list
		click(PWAPlayerPage.watchListBtn, "Add to Watch list");
		wouldYouLikeToPopupClose();
		// Adding movies to Watch list
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		// Enter a movie
		type(PWASearchPage.objSearchEditBox, "Ee Preethi Yeke Bhoomi Melide", "Search edit box");
		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, " ", "Search bar");
		wouldYouLikeToPopupClose();
		waitTime(5000);
		// Click on the first Movie
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Movie");
		if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp, "Complete profile Popup") == true) {
			click(PWAAddToWatchListPage.objClosePopup, "Close button");
		}
		waitTime(3000);
		// Click on Add to watch list
		click(PWAPlayerPage.watchListBtn, "Add to Watch list");

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		// Enter a Movie
		type(PWASearchPage.objSearchEditBox, "doddmane hudga", "Search edit box");
		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, " ", "Search bar");
		wouldYouLikeToPopupClose();
		waitTime(5000);
		// Click on the Movie
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Movie");
		if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp, "Complete profile Popup") == true) {
			click(PWAAddToWatchListPage.objClosePopup, "Close button");
		}
		waitTime(3000);
		// Click on Add to watch list
		click(PWAPlayerPage.watchListBtn, "Add to Watch list");

		// Adding Video clip
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		// Enter a Video clip
		type(PWASearchPage.objSearchEditBox, "Gravitas: Why are Sweden-China ties turning hostile?", "Search edit box");
		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, " ", "Search bar");
		waitTime(5000);
		// Click on the first Video
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Video clip");
		waitTime(3000);
		// Click on Add to watch list
		click(PWAPlayerPage.watchListBtn, "Add to Watch list");
		wouldYouLikeToPopupClose();
		// click on home page
		click(PWAHomePage.objTabName("Home"), "Home tab");
		if (checkElementDisplayed(PWAAddToWatchListPage.objCloseBtnForVideoClipPopup, "Pop up") == true) {
			click(PWAAddToWatchListPage.objCloseBtnForVideoClipPopup, "Close button");
		}
	}

	/*
	 * My Reminder section for subscribed user
	 */
	public void MyReminder() throws Exception {
		extent.HeaderChildNode("MyReminder Scenarios Validations");
		// Verify user is navigate to EPG section from Live TV
		if (getPlatform().equalsIgnoreCase("Android")) {
			navigateToAnyScreen("Live TV");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			navigateToAnyScreenOnWeb("Live TV");
		}
		wouldYouLikeToPopupClose();
		// Click on Channel guide
		click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide");
		if (findElement(PWALiveTVPage.objChannelGuideToggle).getAttribute("class").contains("active")) {
			extent.extentLogger("Verify Navigation", "User is navigated to EPG section post tapping Channel guide");
			logger.info("User is navigated to EPG section post tapping Channel guide");
		} else {
			extent.extentLoggerFail("Verify Navigation",
					"User did not navigated to EPG section post tapping Channel guide");
			logger.info("User did not navigated to EPG section post tapping Channel guide");
		}

		// Verify EPG section contains Title and the description of the respective show
		waitTime(5000);
		if (verifyElementPresent(PWALiveTVPage.objShowTitle, "Show title") == true) {
			String title = getElementPropertyToString("innerText", PWALiveTVPage.objShowTitle, "Show title");
			extent.extentLogger("Verify Show title", "The show tile is displayed and the show title is : " + title);
			logger.info("The show tile is displayed and the show title is : " + title);
		} else {
			extent.extentLoggerFail("Verify Show title", "The show tile is not displayed");
			logger.info("The show tile is not displayed");
		}
		// click on any show
		click(PWALiveTVPage.objFutureChannelInfo, "Show");
		if (checkElementDisplayed(PWALiveTVPage.objShowDesc, "Show description") == true) {
			extent.extentLogger("Verify descrption of the show", "The description of the show is :"
					+ getElementPropertyToString("innerText", PWALiveTVPage.objShowDesc, "Show title"));
			logger.info("The description of the show is :"
					+ getElementPropertyToString("innerText", PWALiveTVPage.objShowDesc, "Show title"));
		} else {
			extent.extentLoggerFail("Verify descrption of the show", "Show description is not displayed");
			logger.info("Show description is not displayed");
		}
		// Click on close button
		click(PWALiveTVPage.objPopupCloseButton, "Close button");
		// Click on date
		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");
		FilterLanguage("Bengali");
		// Verify Share and Reminder option is available
		click(PWALiveTVPage.objBanglaShow1, "Show detail");
		verifyElementPresent(PWALiveTVPage.objShareOption, "Share option");
		verifyElementPresent(PWALiveTVPage.objRemainderButton, "Reminder option for upcoming show ");

		// Verify user can click on Reminder option
		// click on Reminder option
		click(PWALiveTVPage.objRemainderButton, "Reminder option");
		if (getWebDriver().findElement(PWALiveTVPage.objRemainderButton).getAttribute("class")
				.contains("btnIconActive")) {
			extent.extentLogger("Verify user can Click on Reminder option", "User can click on Reminder option");
			logger.info("User can click on Reminder option");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify user can Click on Reminder option",
					"User can not click on Reminder option");
			logger.info("User can not click on Reminder option");
		}

		// Click on close button
		click(PWALiveTVPage.objPopupCloseButton, "Close button");
		waitTime(3000);
		scrollToTopOfPageWEB();
		FilterLanguage("Kannada");
		waitTime(3000);
		if (getPlatform().equalsIgnoreCase("Android")) {
			Swipe("Up", 1);
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			scrollUp();
		}
		waitTime(3000);
		// Verify user can not add Movies to Reminder
		// Select any movie
		click(PWALiveTVPage.objMovieShow, "Movie show");
		if (checkElementDisplayed(PWALiveTVPage.objRemainderButton, "Reminder button") == false) {
			extent.extentLogger("Verify Movie show don't have Reminder option",
					"Reminder option is not available for Movie show");
			logger.info("Reminder option is not available for Movie show");
		} else {
			extent.extentLoggerFail("Verify Movie show don't have Reminder option",
					"Reminder option is available for Movie show");
			logger.info("Reminder option is available for Movie show");

		}
		// Click on close button
		click(PWALiveTVPage.objPopupCloseButton, "Close button");

		if (getPlatform().equalsIgnoreCase("Android")) {
			Swipe("Down", 1);
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			scrollDownWEB();
		}
		getWebDriver().navigate().refresh();
		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");
		FilterLanguage("Malayalam");
		// Select any show to add Reminder
		waitTime(2000);
		click(PWALiveTVPage.objMalayalamShow, "Show ");
		// Click on Reminder
		click(PWALiveTVPage.objRemainderButton, "Reminder");
		click(PWALiveTVPage.objPopupCloseButton, "Close button");
		// Verify user is navigated Reminder screen from Home screen
		if (getPlatform().equalsIgnoreCase("Android")) {
			navigateToAnyScreen("Home");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			navigateToAnyScreenOnWeb("Home");
		}

		// Verify user is navigated to Reminder screen from Home page
		String activeTab = getWebDriver().findElement(PWAHomePage.objActiveTab).getText();
		if (activeTab.equals("Home")) {
			extent.extentLogger("Verify current tab", "User is in " + activeTab + " tab");
			logger.info("User is in Home tab");
		} else {
			extent.extentLoggerFail("Verify current tab", "User is not in Home tab");
			logger.info("User is not in Home tab");
		}
		if (getPlatform().equalsIgnoreCase("Android")) {
			// Click on Hamburger menu
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			// Click on My account
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My account");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			// Click on My account
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
		}
		// Click on My Reminders
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyRemainder, "My Reminder");
		// Verify user is navigated to My Reminder screen
		if (checkElementDisplayed(PWAMyRemindersPage.objMyReminderHeader, "My Reminder Header") == true) {
			extent.extentLogger("Verify the Navigation ",
					"User is Navigated to "
							+ getWebDriver().findElement(PWAMyRemindersPage.objMyReminderHeader).getText()
							+ " screen from " + activeTab + "page");
			logger.info("User is Navigated to "
					+ getWebDriver().findElement(PWAMyRemindersPage.objMyReminderHeader).getText() + " screen from "
					+ activeTab + "page");
		} else {
			extent.extentLoggerFail("Verify Navigation ",
					"User failed to navigate from Home page to My Reminders screen");
			logger.info("User failed to navigate from Home page to My Reminders screen");
		}
		// Verify that Remove all button is displayed
		if (checkElementDisplayed(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all option") == true) {
			extent.extentLogger("Verify Remove all option is displayed",
					"Remove all option is displayed in Reminder screen");
			logger.info("Remove all option is displayed in Reminder screen");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify Remove all option is displayed",
					"Remove all option is not displayed in Reminder screen");
			logger.info("Remove all option is not displayed in Reminder screen");
		}
		// Verify that added reminder contents contains title, start and end time
		// verify title is displayed

		int totalContentsInReminder = getWebDriver().findElements(PWAMyRemindersPage.objTotalContentsInReminder).size();
		System.out.println(totalContentsInReminder);
		for (int i = 0; i < totalContentsInReminder; i++) {
			if (findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).isDisplayed()) {
				extent.extentLogger("Verify title", "The content name at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).getText());
				logger.info("The content name at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).getText());
			} else {
				extent.extentLoggerFail("Verify title", "Content title is not displayed in Reminder screen");
				logger.info("Content title is not displayed in Reminder screen");
			}
		}
		// Verify Start and end time
		int dateTime = getWebDriver().findElements(PWAMyRemindersPage.objDateTime).size();
		for (int i = 0; i < dateTime; i++) {
			if (findElements(PWAMyRemindersPage.objDateTime).get(i).isDisplayed()) {
				extent.extentLogger("Verify date and time", "The date and time at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objDateTime).get(i).getText());
				logger.info("The date and time at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objDateTime).get(i).getText());
			} else {
				extent.extentLoggerFail("Verify date and time", "Date and time is not displayed in Reminder screen");
				logger.info("Date and time is not displayed in Reminder screen");
			}
		}
		// Verify user is able to delete the content by tapping on cancel button
		int contentsBeforeDeleting = getWebDriver().findElements(PWAAddToWatchListPage.objCancelBtn).size();
		click(PWAAddToWatchListPage.objCancelBtn(1), " Cancel button");
		int contentsAfterDeleting = getWebDriver().findElements(PWAAddToWatchListPage.objCancelBtn).size();
		if (contentsAfterDeleting < contentsBeforeDeleting) {
			extent.extentLogger("Verify cancel button", "User successfully deleted the content from Reminder screen");
			logger.info("User Successfully deleted the content from Reminder screen");
		} else {
			extent.extentLoggerFail("Verify cancel button",
					"User can not delete the contents from the reminder screen");
			logger.info("User can not delete the contents from the reminder screen");
		}
		// Verify the Remove all functionality
		// click on Remove all
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all");
		// Verify contents are deleted
		if (checkElementDisplayed(PWAMyRemindersPage.objNoReminderMessage, "No Reminder message") == true) {
			extent.extentLogger("Verify Remove all option",
					"User successfully deleted all the contents from the Reminder screen");
			logger.info("User successfully deleted all the contents from the Reminder screen");
		} else {
			softAssert.assertAll();
			extent.extentLogger("Verify Remove all option",
					"User can not  delete all the contents from the Reminder screen");
			logger.info("User can not  delete all the contents from the Reminder screen");
		}

		// Verify We have nothing to remind you message is displayed
		if (checkElementDisplayed(PWAMyRemindersPage.objNoReminderMessage, "No Reminder message") == true) {
			extent.extentLogger("Verify No reminder message",
					"The message " + getWebDriver().findElement(PWAMyRemindersPage.objNoReminderMessage).getText()
							+ " is displayed when there is no contents are available");
			logger.info("The message " + getWebDriver().findElement(PWAMyRemindersPage.objNoReminderMessage).getText()
					+ " is displayed when there is no contents are available");
		} else {
			softAssert.assertAll();
			extent.extentLogger("Verify No Reminder message",
					"The message We have nothing to remind you message is not displayed");
			logger.info("The message We have nothing to remind you message is not displayed");
		}

		// verify device back button functionality
		// Click on device back button
		getWebDriver().navigate().back();
		// Verify user is navigated to Home screen
		if (activeTab.equals("Home")) {
			extent.extentLogger("Verify current tab",
					"User is navigated to " + activeTab + " tab after pressing device back button");
			logger.info("User is navigated to previous page after clicking on device back button");
		} else {
			extent.extentLoggerFail("Verify current tab",
					"User did not navigate to previos page after clicking on device back button");
			logger.info("User did not navigate to previos page after clicking on device back button");
		}

	}

	/* ================Logged In user -User action================ */
	public void UserActionLoggedInUser(String userType) throws Exception {
		extent.HeaderChildNode("User Action module- NonSubscribed user Validations");
		watchlistCheck(userType);
		// Verify Continue watching tray is displayed
		extent.HeaderChildNode("Verifying Continue watching tray for NonSubscribed user");
		if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Coninue Watching tray") == true) {
			if (getPlatform().equalsIgnoreCase("Android")) {
				extent.extentLogger("Verify Continue watching tray ",
						getDriver().findElement(PWAHomePage.objContinueWatchingTray).getText()
								+ " tray is displayed for Non subscribed user");
				logger.info(getDriver().findElement(PWAHomePage.objContinueWatchingTray).getText()
						+ " tray is displayed for Non subscribed user");
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				extent.extentLogger("Verify Continue watching tray ",
						getWebDriver().findElement(PWAHomePage.objContinueWatchingTray).getText()
								+ " tray is displayed for Non subscribed user");
				logger.info(getWebDriver().findElement(PWAHomePage.objContinueWatchingTray).getText()
						+ " tray is displayed for Non subscribed user");
			}

		} else {
			extent.extentLoggerFail("Verify continue watching tray",
					"Continue watching tray is not displayed for Non subscribed user");
			logger.info("Continue watching tray is not displayed for Non subscribed user");
		}
		// Verify Add to Watch list is displayed in Content consumption screen
		// Search any content
		extent.HeaderChildNode("Verifying Add to Watch list in Content consumption screen for NonSubscribed user");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, "Ondh Kathe Hella", "Search box");
		waitTime(6000);
		// Click on content
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Content");
		String contentName = getElementPropertyToString("innerText", PWAPlayerPage.objContentName, "Title");
		verifyElementPresentAndClick(PWAPlayerPage.watchListBtn, "Add to Watchlist");
		if (getParameterFromXML("browserType").equalsIgnoreCase("Firefox")) {
			waitTime(100000);
		} else {
			waitTime(45000);
		}

		if (verifyElementPresent(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title")) {
			click(PWASubscriptionPages.objPopupCloseButton, "Popup close button");
		}
		if (getPlatform().equalsIgnoreCase("Android")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			click(PWAHamburgerMenuPage.objMyAccount, "My account");
			click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
//			click(PWAHamburgerMenuPage.objMyAccountWeb,"My account");
			click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		}

		click(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
		String ContentNameInWatchlist = getElementPropertyToString("innerText",
				PWAAddToWatchListPage.objFirstContentInWatchlist, "Content title");
		if (contentName.equals(ContentNameInWatchlist)) {
			extent.extentLogger("Verify Watchlist", "Added content is displayed in Watchlist screen");
			logger.info("Added content is displayed in Watchlist screen");
		} else {
			extent.extentLoggerFail("Verify Watchlist", "Added content is not displayed in Watchlist screen");
			logger.info("Added content is not displayed in Watchlist screen");
		}
		mouseHoverWatchlist();
		System.out.println(contentName);
		if (checkElementDisplayed(PWAAddToWatchListPage.objTooltip(contentName), "Tooltip")) {
			logger.info("Tooltip is verifed in watchlist page");
			extent.extentLogger("Tooltip", "Tooltip is verifed in watchlist page");
		}
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all");
	}

	public void FilterLanguage(String lang) throws Exception {
		click(PWALiveTVPage.objFilterLanguageChannelGuide, "Filter language");
		int size = findElements(PWALiveTVPage.objSelectedlang).size();
		for (int i = 1; i <= size; i++) {
			click(PWALiveTVPage.objSelectedlang, "Selected language");
		}
		click(PWALiveTVPage.objSelectLang(lang), lang + " language");
		click(PWALiveTVPage.objApplyBtn, "Apply button");
//		click(PWALiveTVPage.objApplyBtn,"Apply button");
	}

	/*
	 * ==========================Guest_User_User-Actions_Module====================
	 */

	public void UserActionGuestUser(String userType) throws Exception {
		extent.HeaderChildNode("User Action module- Guest user Validations");
		// Validate Continue watching tray is not displayed for Guest user
		waitTime(3000);
		watchlistCheck(userType);
		Watchlistlogin("NonSubscribe", "Gooli");
		Watchlistlogin("Subscribe", "Gooli");
//		registerandCheckCW();
		if (getPlatform().equalsIgnoreCase("Web")) {
			extent.HeaderChildNode("Validating Add to Watchlist icon on tray content card");
			scrollToTheElementWEB(PWAHomePage.objFirstContentCardOfTray("Trending on ZEE5"));
			if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Trending on ZEE5"),
					"First Content Card Of Trending on ZEE5 Tray")) {
				// validateDisplayLanguagePopup();
				Actions action = new Actions(getWebDriver());
				action.moveToElement(findElement(PWAHomePage.objFirstContentCardOfTray("Trending on ZEE5")));
				action.perform();

				if (checkElementDisplayed(PWAHomePage.objAddToWatchlistButtonOnTrayContentCard("Trending on ZEE5"),
						"Add To Watchlist icon on tray 1st content card")) {
					extent.extentLogger("Verify Add To Watchlist icon on tray content card",
							"Add To Watchlist icon on tray content card is displayed for guest user");
					logger.info("Add To Watchlist icon on tray content card is displayed for guest user");
				} else {
					extent.extentLoggerFail("Verify Add To Watchlist icon on tray content card",
							"Add To Watchlist icon on tray content card is not displaying for guest user");
					logger.info("Add To Watchlist icon on tray content card is not displaying for guest user");
				}

				extent.HeaderChildNode(
						"Validating Login popup after clicking on Add to Watchlist icon on tray content card");
				click(PWAHomePage.objAddToWatchlistButtonOnTrayContentCard("Trending on ZEE5"),
						"Add To Watchlist icon on tray 1st content card");
				if (checkElementDisplayed(PWAHomePage.objLoginRequiredPopUpHeader, "Login Required PopUp Header")) {
					extent.extentLogger(
							"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card",
							"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card for guest user");
					logger.info(
							"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card for guest user");
					click(PWAHomePage.objPopupCloseicon(), "Popup Close icon");
				} else {
					extent.extentLoggerFail(
							"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card",
							"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card");
					logger.info(
							"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card");
				}
			}
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee5 Logo");
		}
		extent.HeaderChildNode("Validating Continue Watching Tray for Guest User");
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue Watching tray") == false) {
			extent.extentLogger("Verify Continue Watching tray",
					"Continue watching tray is not displayed for guest user");
			logger.info("Continue watching tray is not displayed for guest user");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify Continue Watching tray",
					"Continue watching tray is displaying for guest user");
			logger.info("Continue watching tray is displaying for guest user");
		}
//		validateDisplayLanguagePopup();
		extent.HeaderChildNode("Validating Add to Reminder button for Guest User");
		// Verify Add to Reminder is not displayed for guest user
		// Click on live tv tab
		if (getPlatform().equalsIgnoreCase("Android")) {
			navigateToAnyScreen("Live TV");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			navigateToAnyScreenOnWeb("Live TV");
		}
		waitTime(5000);
		// click on channel guide
		click(PWALiveTVPage.objChannelGuideToggle, "Channel guide");
		// Verify Reminder option is not available
		// Click on date
		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");
		FilterLanguage();

		// Verify Reminder option is available
		click(PWALiveTVPage.objShowName, "Show detail");
		if (checkElementDisplayed(PWALiveTVPage.objRemainderButton, "Reminder option for upcoming show ") == false) {
			extent.extentLogger("Verify Reminder button for guest user ",
					"Reminder button is not displayed for the Guest user");
			logger.info("Reminder button is not displayed for the Guest user");
		} else {
			extent.extentLoggerFail("Verify Reminder button for guest user ",
					"Reminder button is displayed for the Guest user");
			logger.info("Reminder button is displayed for the Guest user");

		}
	}

	public void ContinueWatching() throws Exception {
		extent.HeaderChildNode(
				"User Action module- Subscribed User Validations - Validating Continue Watching Tray Scenarios");
		partialScroll();
		waitTime(3000);
		// Verify Progress bar is displayed for continue watching tray
		verifyElementPresent(PWAContinueWatchingTrayPage.objProgressBar, "Progress bar");
		// Verify Progress bar is updated accordingly
		String beforePlayingContent = getElementPropertyToString("style",
				PWAContinueWatchingTrayPage.objProgressBarProgress(2), "Progress bar");
		System.out.println(beforePlayingContent);
		String[] originalRatio = beforePlayingContent.split(":");
		String progress = originalRatio[1];
		String[] exactRatio = progress.split("%");
		float progressedTime = Float.parseFloat(exactRatio[0]);

		System.out.println(progressedTime);

		// Left watch time before playing content
		String leftWatchTime = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objTotalTimeLeft(2),
				"Left time before watching content");
		String[] leftTime = leftWatchTime.split("left");
		String timeBeforeWatchingContent = leftTime[0];
		System.out.println(timeBeforeWatchingContent);
		/*
		 * //Verify movie is added to continue watching tray after watching for X
		 * minutes //Click on search click(PWAHomePage.objSearchBtn,"Search box");
		 * //Enter movie name type(PWASearchPage.objSearchEditBox, "Ondh Kathe Hella",
		 * "Search edit"); waitTime(5000); //Click on the first episode
		 * click(PWASearchPage.objFirstContentCardNameAfterSearch1(1),"Movie");
		 * Thread.sleep(10000); //Tap on pause button //Tap on player pausePlayer();
		 * verifyElementPresent(PWAPlayerPage.progressBar, "Progress bar"); WebElement
		 * slider = getDriver().findElement(PWAPlayerPage.objScrubber); Actions move =
		 * new Actions(getDriver()); Action action = (Action) move.dragAndDropBy(slider,
		 * 30, 0).build(); action.perform();
		 */
		// Verify partially watched contents are added or updated
		// Play any content
		String playingContent = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objCardTitle(2),
				"Content");
		// Click on the content
		click(PWAContinueWatchingTrayPage.objCardTitle(2), "Content");
		Thread.sleep(180000);
		// Navigate to home page
		if (getPlatform().equalsIgnoreCase("Android")) {
			navigateToAnyScreen("Home");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			navigateToAnyScreenOnWeb("Home");
		}

		Thread.sleep(4000);
		String updatedContent = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objCardTitle(1),
				"Content");
		if (playingContent.equals(updatedContent)) {
			extent.extentLogger("Verify partially watched content",
					"Partially watched contents are added to Continue watching tray");
			logger.info("Partially watched contents are added to Continue watching tray");
		} else {
			extent.extentLoggerFail("Verify partially watched content",
					"Partially watched contents are not added to Continue watching tray");
			logger.info("Partially watched contents are not added to Continue watching tray");
		}

		// Verify Progress bar is updated after watching any content from CW tray
		String afterPlayingContent = getElementPropertyToString("style",
				PWAContinueWatchingTrayPage.objProgressBarProgress(1), "Progress bar");
		System.out.println(afterPlayingContent);
		String[] originalRatio1 = afterPlayingContent.split(":");
		String progress1 = originalRatio1[1];
		String[] exactRatio1 = progress1.split("%");
		float progressedTimeAfterWatching = Float.parseFloat(exactRatio1[0]);
		System.out.println(progressedTimeAfterWatching);
		if (progressedTime < progressedTimeAfterWatching) {
			extent.extentLogger("Verify progress bar", "Progress bar is updated from " + progress + " to " + progress1);
			logger.info("Progress bar is updated from " + progress + " to " + progress1);
		} else {
			extent.extentLoggerFail("Verify progress bar", "Progress bar is not updated after watching content");
			logger.info("Progress bar is not updated after watching content");
		}

		// Verify left watch time is updated accordingly

		// Left watch time after playing content
		String leftWatchTime1 = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objTotalTimeLeft(1),
				"Left time before watching content");
		String[] leftTime1 = leftWatchTime1.split("left");
		String timeAfterWatchingContent = leftTime1[0];
		System.out.println(timeAfterWatchingContent);
		if (!timeBeforeWatchingContent.equals(timeAfterWatchingContent)) {
			extent.extentLogger("Verify left watch time", "The left time Before watching content is " + leftTime[0]
					+ "and the left time after watching content for some time is " + leftTime1[0]);
			logger.info("The left time Before watching content is " + leftTime[0]
					+ "and the left time after watching content for some time is " + leftTime1[0]);
		} else {
			extent.extentLoggerFail("Verify Left watch time",
					"Left Watch time is not getting updated after watching content from Continue watching tray");
			logger.info("Left Watch time is not getting updated after watching content from Continue watching tray");
		}

	}

	/* =======User Action module ---> My Watchlist section for subscribed user */
	public void MyWatchlistSubscribedUser() throws Exception {
		extent.HeaderChildNode("MyWatchlist Scenarios Validations");
		String URL = "https://gwapi.zee5.com/user/v2/watchlist?country=IN&translation=en";
		String username = SubUsername;
		String pwd = SubPassword;
		AddContentsToWatchList();
		if (getPlatform().equalsIgnoreCase("Android")) {
			// Click on Hamburger menu
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			// Click on My account
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My account");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			// Click on My account
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
		}
		// Click on My Watchlist
		click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		// Verify My Watchlist header is displayed
		if (checkElementDisplayed(PWAAddToWatchListPage.objMyWatchlistHeader, "My Watchlist") == true) {
			extent.extentLogger("Verify My Watchlist header is displayed",
					getWebDriver().findElement(PWAAddToWatchListPage.objMyWatchlistHeader).getText()
							+ " text is displayed");
			logger.info(getWebDriver().findElement(PWAAddToWatchListPage.objMyWatchlistHeader).getText()
					+ " text is displayed");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify My Watchlist header is displayed", "My Watchlist text is not displayed");
			logger.info("My Watchlist text is not displayed");
		}

		// Verify remove all button is displayed
		verifyElementPresent(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
		// Verify cancel button is displayed
		int size = getWebDriver().findElements(PWAAddToWatchListPage.objCancelBtn).size();
		for (int i = 1; i <= size; i++) {
			verifyElementPresent(PWAAddToWatchListPage.objCancelBtn(i), "Cancel button for item " + i);
		}
		// Verify if clicking shows will display only the episodes in that episodes
		// fragment
		if (getElementPropertyToString("class", PWAAddToWatchListPage.objEpisodeTab, "Episode tab")
				.contains("active")) {
			extent.extentLogger("Verify Episode tab", "User is in Episode tab");
			logger.info("User is in Episode tab");
			ArrayList<String> asset = new ArrayList<String>();
			boolean value = false;
			responseWatchlist.getRECOResponse(URL, username, pwd);
			asset = responseWatchlist.WatchlistValidationEpisodesTab();
			for (int i = 0; i < asset.size(); i++) {
				if (asset.get(i).equals("episode")) {
					value = true;
				} else {
					value = false;
					break;
				}
			}
			if (value == true) {
				extent.extentLogger("Verify Episode fragment",
						"The contents displayed in Episode fragment are all in Episode format");
				logger.info("Episodes are displayed in Episode tab");
			} else {
				extent.extentLoggerFail("Verify Episode fragment",
						"The contents displayed in Episode fragment are not in Episode format");
				logger.info("The contents displayed in Episode fragment are not in Episode format");
			}
		} else {
			extent.extentLoggerFail("Verify user tab", "User is not in Episode tab");
			logger.info("User is not in Episode tab");
		}
		// Verify if clicking Movies will display only the Movies in that Movies
		// fragment
		// Click on Movies tab
		click(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
		if (getElementPropertyToString("class", PWAAddToWatchListPage.objMoviesTab, "Movies tab").contains("active")) {
			extent.extentLogger("Verify Movies tab", "User is in Movies tab");
			logger.info("User is in Movies tab");
			ArrayList<String> asset = new ArrayList<String>();
			boolean value = false;
			responseWatchlist.getRECOResponse(URL, username, pwd);
			asset = responseWatchlist.WatchlistValidationMoviesTab();
			for (int i = 0; i < asset.size(); i++) {
				if (asset.get(i).equals("movie")) {
					value = true;
				} else {
					value = false;
					break;
				}
			}
			if (value == true) {
				extent.extentLogger("Verify Movies fragment",
						"The contents displayed in Movies fragment" + " are all in Movies format");
				logger.info("Moives are displayed in Movies tab");
			} else {
				extent.extentLoggerFail("Verify Movies fragment",
						"The contents displayed in Movies fragment" + " are not in Movies format");
				logger.info("The contents displayed in Movies fragment are not in Movies format");
			}
		} else {
			extent.extentLoggerFail("Verify user tab", "User is not in Movies tab");
			logger.info("User is not in Movies tab");
		}

		// Verify if clicking Videos will display only the Videos in that Videos
		// fragment
		// Click on Videos tab
		click(PWAAddToWatchListPage.objVideoTab, "Video tab");
		if (getElementPropertyToString("class", PWAAddToWatchListPage.objVideoTab, "Video tab").contains("active")) {
			extent.extentLogger("Verify Video tab", "User is in Video tab");
			logger.info("User is in Video tab");
			ArrayList<String> asset = new ArrayList<String>();
			boolean value = false;
			responseWatchlist.getRECOResponse(URL, username, pwd);
			asset = responseWatchlist.WatchlistValidationVideoTab();
			System.out.println("Asset Size:" + asset.size());
			for (int i = 0; i < asset.size(); i++) {
				if (asset.get(i).equals("video")) {
					value = true;
				} else {
					value = false;
					break;
				}
			}
			if (value == true) {
				extent.extentLogger("Verify Video fragment",
						"The contents displayed in Video fragment" + " are all in Video format");
				logger.info("Videos are displayed in Videos tab");
			} else {
				extent.extentLoggerFail("Verify Videos fragment",
						"The contents displayed in Videos fragment" + " are not in Videos format");
				logger.info("The contents displayed in Videos fragment are not in Videos format");
			}
		} else {
			extent.extentLoggerFail("Verify user tab", "User is not in Video tab");
			logger.info("User is not in Videos tab");
		}

		// Verify user is navigated to respective show detail page
		String showName = getElementPropertyToString("innerText", PWAAddToWatchListPage.objFirstContentInWatchlist,
				"Show name");
		System.out.println(showName);
		click(PWAAddToWatchListPage.objFirstContentInWatchlist, "Show name");
		waitTime(5000);
		if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp, "Complete profile Popup") == true) {
			click(PWAAddToWatchListPage.objClosePopup, "Close button");
		}
		String showNameInShowdetailPage = getElementPropertyToString("innerText", PWAAddToWatchListPage.objContentName,
				"Content name");
		System.out.println(showNameInShowdetailPage);
		if (showName.equals(showNameInShowdetailPage)) {
			extent.extentLogger("Verify show name",
					"User is naviagted to respective show page and the show name is " + showNameInShowdetailPage);
			logger.info("User is navigated to respective show detail page from Watchlist screen");
		} else {
			extent.extentLoggerFail("Verify show name",
					"User did not naviagted to respective show page and the show name is " + showNameInShowdetailPage);
			logger.info("User did not navigated to respective show detail page from Watchlist screen");

		}
		if (getPlatform().equalsIgnoreCase("Android")) {
			// Click on Hamburger menu
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			// Click on My account
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My account");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			// Click on My account
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
		}
		// Click on My Watchlist
		click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "wouldyouliketowatch popup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		// Verify the Cancel button functionality
		int itemsBeforeClickingCancel = findElements(PWAAddToWatchListPage.objTotalContents).size();
		// Click on cancel button
		click(PWAAddToWatchListPage.objCancelBtn(1), "First content cancel button");
		int itemsAfterClickingCancel = findElements(PWAAddToWatchListPage.objTotalContents).size();
		if (itemsAfterClickingCancel < itemsBeforeClickingCancel) {
			extent.extentLogger("Verify cancel button", "The content is deleted successfully from the watch list");
			logger.info("The content is deleted successfully from the watch list");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify cancel button", "The content is not deleted from the watch list");
			logger.info("The content is not deleted from the watch list");
		}
		// click on remove all button
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
		// Verify all the contents are deleted
		int contentsAfterRemovedShowsSection = findElements(PWAAddToWatchListPage.objTotalContents).size();
		if (contentsAfterRemovedShowsSection == 0) {
			extent.extentLogger("Verify Remove all functionality",
					"The contents are removed from the Watch list for Shows fragment");
			logger.info("The Contents are removed from the Watch list for shows fragment");
		} else {
			extent.extentLoggerFail("Verify Remove all functionality",
					"The contents are not removed from the Watch list after clicking on remove all button for shows fragment");
			logger.info(
					"The Contents are not removed from the Watch list after clicking on remove all button for shows fragment");
		}
		// Verify the functionality of Remove all button
		click(PWAAddToWatchListPage.objMoviesTab, " Movies tab");
		// Click on Remove all button
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
		int contentsAfterRemovedMoviestab = findElements(PWAAddToWatchListPage.objTotalContents).size();
		if (contentsAfterRemovedMoviestab == 0) {
			extent.extentLogger("Verify Remove all functionality",
					"The contents are removed from the Watch list for Movies fragment");
			logger.info("The Contents are removed from the Watch list for Movies fragment");
		} else {
			extent.extentLoggerFail("Verify Remove all functionality",
					"The contents are not removed from the Watch list after clicking on remove all button for Movies fragment");
			logger.info(
					"The Contents are not removed from the Watch list after clicking on remove all button for Movies fragment");
		}

		click(PWAAddToWatchListPage.objVideoTab, "Video tab");
		// Click on Remove all button
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
		int contentsAfterRemovedVideotab = findElements(PWAAddToWatchListPage.objTotalContents).size();
		if (contentsAfterRemovedVideotab == 0) {
			extent.extentLogger("Verify Remove all functionality",
					"The contents are removed from the Watch list for Video fragment");
			logger.info("The Contents are removed from the Watch list for Video fragment");
		} else {
			extent.extentLoggerFail("Verify Remove all functionality",
					"The contents are not removed from the Watch list after clicking on remove all button for Video fragment");
			logger.info(
					"The Contents are not removed from the Watch list after clicking on remove all button for Video fragment");
		}

		// Verify the device back button functionality
	}

	/**
	 * ====================TEJAS Carousel==========================
	 * 
	 */

	public void ValidatingWebPwaCarousalinalltabs(String UserType) throws Exception {
		switch (UserType) {
		case "Guest":
			extent.HeaderChildNode("User Type Guest");
			System.out.println("User Type Guest");
			//enterURLInBrowser("chrome", "https://newpwa.zee5.com");
			carouseldots("carouselDots", "home");
			//carouseldots("carouselDots","kids");
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("User Type Loggedin User");
			System.out.println("User Type Loggedin User");
			//ZeePWALogin("Mobile", "Nonsubscribed");
			carouseldots("carouselDots", "home");
			carouseldots("carouselDots", "kids");
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("User Type Subcribed User");
			System.out.println("User Type Subcribed User");
			//ZeePWALogin("E-mail", "Subscribed");
			carouseldots("carouselDots", "home");
			carouseldots("carouselDots", "kids");
		}
	}

	public void carouseldots(String carouselDots, String page) throws Exception {
		extent.HeaderChildNode("Carousal dots functionality");
//System.out.println("22222");
		Response resp = ResponseInstance.getResponseForPages(page, "en,kn");
		if (resp == null) {
			System.out.println("No response");
		} else {
//System.out.println("33333");
//waitTime(3000);
			waitForElementDisplayed(PWAHomePage.objZeeLogo, 10);
//navigateToAnyScreen(page);
			int hits = getCountweb(TextToXpathusingclass(carouselDots));
			System.out.println(hits);
			if (hits == 7) {
				System.out.println("The number of carousal dots are equal to the number of carousals present");
			} else {
				System.out.println("The number of carousal dots are not equal to the number of carousals present");
			}
			for (int i = 1; i < 3; i++) {
				int j = i - 1;
				String Carouseltitle = resp.jsonPath().getString("buckets[0].items[" + j + "].title");
				verifyElementPresentAndClick(TextToXpathusingclasswithindex("carouselDots", i),
						"clicked on carousal dot");
				System.out.println("clicked on " + i + " carousal dot");
				if (checkElementDisplayed(Text_To_Xpath(Carouseltitle), "carousal metadata for " + i + " index ")) {
					System.out.println("The carousel dot for " + i
							+ "th index is navigating to the respective carousel and verified ");
				} else {
					System.out.println(
							"The carousel dot for " + i + "th index is not navigating to the respective carousel ");
				}
			}
		}
	}

	public By TextToXpathusingclass(String text) throws Exception {
		return By.xpath("//div[@class='" + text + "']");
	}

	public By TextToXpathusingclasswithindex(String text, int i) throws Exception {
		return By.xpath("(//*[@class='" + text + "'])[" + i + "]");
	}

	/**
	 * ====================BHAVANA Static==========================
	 * 
	 */

	/*
	 * Main method of staticPagesandFooterSectionValidation
	 */

	public void staticPagesandFooterSectionValidation(String userType) throws Exception {

		if (userType.contentEquals("Guest") || userType.contentEquals("NonSubscribedUser")) {
			extent.HeaderChildNode(userType + " scenarios");
			extent.extentLogger("Accessing as " + userType, "Accessing as " + userType);
			logger.info("Accessing as " + userType);
			if (userType.contentEquals("NonSubscribedUser")) {
//				ZeeWEBPWALogin("NonSubscribedUser");
			}
			AboutUsScreenValidation();
			HelpCenterScreenValidation();
			TermsOfUseValidation();
			PrivacyPolicyValidation();
			BulidVersionValidation();
			FooterSectionValidation();
			contentLanguagewithDisplayLanguage(userType);
		} else if (userType.contentEquals("SubscribedUser")) {
			extent.HeaderChildNode("subscribed scenarios");
			logger.info("Subscribed User");
//			ZeeWEBPWALogin("SubscribedUser");
			SubscribedUserAboutUsScreenValidation();
			HelpCenterScreenValidation();
			SubscribedUserTermsOfUseValidation();
			SubscribedUserPrivacyPolicyValidation();
			BulidVersionValidation();
			FooterSectionValidation();
			contentLanguagewithDisplayLanguage(userType);
		}
	}

	/**
	 * Function to verify the About Us screen
	 * 
	 */

	public void AboutUsScreenValidation() throws Exception {
		HeaderChildNode("About us screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		if (checkElementDisplayed(PWAHomePage.objWhatToWatchPopUp, "wondering what to watch pop up")) {
			verifyElementPresentAndClick(PWAHomePage.objWhatToWatchCloseButton, "Pop up close button");
		}
		JSClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objAboutUsTextInPage, "About Us Screen page")) {
			logger.info("User is navigated to About Us screen");
			extent.extentLogger("About Us", "User is navigated to About Us screen");
		}
		String aboutUsURL = getWebDriver().getCurrentUrl();
		if (aboutUsURL.contains("aboutus")) {
			logger.info("About Us screen is opened in webview");
			extent.extentLogger("About Us", "About Us screen is opened in webview");

		} else {
			logger.info("About Us screen is not opened in webview");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objAboutUsInfo, "Brief information of the application");
		Back(1);
	}

	/**
	 * Function to verify the About Us screen for Subscribed user
	 * 
	 */
	public void SubscribedUserAboutUsScreenValidation() throws Exception {
		HeaderChildNode("About us screen");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objAboutUsTextInPage, "About Us Screen page")) {
			logger.info("User is navigated to About Us screen");
			extent.extentLogger("About Us", "User is navigated to About Us screen");
		}
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String aboutUsURL = getWebDriver().getCurrentUrl();
		if (aboutUsURL.contains("aboutus")) {
			logger.info("About Us screen is opened in webview");
			extent.extentLogger("About Us", "About Us screen is opened in webview");

		}
		verifyElementPresent(PWAHamburgerMenuPage.objAboutUsInfo, "Brief information of the application");
		partialScroll();
		checkElementDisplayed(PWAHamburgerMenuPage.objHyperLink, "Hyperlink on About Us Screen");
		logger.info("Hyperlink present on About Us screen is" + getText(PWAHamburgerMenuPage.objHyperLink));
		if (checkElementDisplayed(PWAHamburgerMenuPage.objHyperLink, "Hyperlink in About Us screen")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHyperLink, "Hyperlink");
			logger.info("User is navigated to respective page " + getWebDriver().getCurrentUrl());
			extent.extentLogger("About Us", "User is navigated to respective page " + getWebDriver().getCurrentUrl());
		}
		Back(1);
		waitTime(4000);
		Back(1);
	}

	/**
	 * Function to verify the Help Center screen
	 */
	public void HelpCenterScreenValidation() throws Exception {
		HeaderChildNode("Help Center Screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		partialScroll();
//		if (checkElementDisplayed(PWAHomePage.objWhatToWatchPopUp, "wondering what to watch pop up")) {
//			verifyElementPresentAndClick(PWAHomePage.objWhatToWatchCloseButton, "Pop up close button");
//		}
		waitTime(2000);
		verifyElementPresent(PWAHamburgerMenuPage.objHelpCenterOption, "Help Center option");
		JSClick(PWAHamburgerMenuPage.objHelpCenterOption, "Help Center option");
		switchToWindow(2);
		if (verifyElementPresent(PWAHamburgerMenuPage.objHelpUsHeader, "Help Center screen")) {
			logger.info("User is navigated to Help Center screen");
			extent.extentLoggerPass("Help Center", "User is navigated to Help Center screen");
		}
		gettingStartedVerifications();
		myAccountVerifications();
		quickLinksVerifications();
		// Write to Us button
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objWritetous, "Write to us button");
		switchToWindow(3);
		if (verifyElementPresent(PWAHamburgerMenuPage.objContactUs, "Contact Us page")) {
			logger.info("User is navigated to Contact Us page");
			extent.extentLoggerPass("Contact Us", "User is navigated to Contact Us page");
		}
		WriteToUs();
		getWebDriver().close();
		waitTime(2000);
		switchToWindow(2);
		getWebDriver().close();
		switchToParentWindow();
	}

	/**
	 * Function to Validating Contact Us page in Help Center
	 * 
	 */

	public void WriteToUs() throws Exception {

		waitTime(3000);
		checkElementDisplayed(PWAHamburgerMenuPage.objContactUs, "Contact Us page");

		checkElementDisplayed(PWAHamburgerMenuPage.objSelectYourCountry, "Select your country field");

		checkElementDisplayed(PWAHamburgerMenuPage.objAutofilledcountry, "Auto filled country name");

		checkElementDisplayed(PWAHamburgerMenuPage.objDropDown, "Select your country drop down");

		checkElementDisplayed(PWAHamburgerMenuPage.objRegisteredMobileNumber, "Registered mobile number field");

		checkElementDisplayed(PWAHamburgerMenuPage.objCountryCode, "Auto filled country code");

		checkElementDisplayed(PWAHamburgerMenuPage.objEmailField, "Email ID field");

		checkElementDisplayed(PWAHamburgerMenuPage.objEmailIDAsterisk, "Email ID '*' symbol");

		checkElementDisplayed(PWAHamburgerMenuPage.objText, "Tell us more about you issue text message");

		checkElementDisplayed(PWAHamburgerMenuPage.objContentOption, "Content radio button");
		checkElementDisplayed(PWAHamburgerMenuPage.objProductOption, "Product radio button");

		checkElementDisplayed(PWAHamburgerMenuPage.objEnquiryOption, "Enquiry radio button");

		checkElementDisplayed(PWAHamburgerMenuPage.objFeedbackOption, "Feedback radio button");

		if (checkElementDisplayed(PWAHamburgerMenuPage.objContentAsDefault, "Content radio button")) {
			logger.info("Content radio option is enabled by default");
			extent.extentLogger("Content", "Content radio option is enabled by default");
		}

		checkElementDisplayed(PWAHamburgerMenuPage.objSelectCategory, "Select category field");

		checkElementDisplayed(PWAHamburgerMenuPage.objVideoNotPlaying, "Video not palying option as default");

		checkElementDisplayed(PWAHamburgerMenuPage.objErrorMessage, "Error message text");

		checkElementDisplayed(PWAHamburgerMenuPage.objErrorMessageAsterisk, "Error message '*' symbol");

		checkElementDisplayed(PWAHamburgerMenuPage.objSubmitButton, "SUBMIT button");

		checkElementDisplayed(PWAHamburgerMenuPage.objResetButton, "RESET button");

		if (getWebDriver().findElement(PWAHamburgerMenuPage.objSubmitButton).isEnabled() == false) {
			logger.info("Submit is disabled by default");
			extent.extentLogger("Submit", "Submit is disabled by default");
		}

		if (getWebDriver().findElement(PWAHamburgerMenuPage.objResetButton).isEnabled() == true) {
			logger.info("Reset is enabled by default");
			extent.extentLogger("Reset", "Reset is enabled by default");
		}

		verifyElementPresent(PWAHamburgerMenuPage.objErrorMessageAsterisk,
				"Mandatory Email ID field is highlighted by '*' symbol");

		verifyElementPresent(PWAHamburgerMenuPage.objErrorMessageAsterisk,
				"Mandatory Error message field is highlighted by '*' symbol");

		verifyElementPresent(PWAHamburgerMenuPage.objPlatformAsterisk,
				"Mandatory Platform drop down is highlighted by '*' symbol");

		type(PWAHamburgerMenuPage.objEmailField, "bhavana9518@gmail.com", "Email Id");

		type(PWAHamburgerMenuPage.objErrorMessageField, "Video couldn't play", "Error message");

		if (getWebDriver().findElement(PWAHamburgerMenuPage.objSubmitButton).isEnabled() == true) {
			logger.info("Submit is enabled by giving mandatory inputs");
			extent.extentLogger("Submit", "Submit is enabled by giving mandatory inputs");
		}

	}

	/**
	 * Function to verify the Terms of Use in Hamburger menu
	 * 
	 */

	public void TermsOfUseValidation() throws Exception {
		HeaderChildNode("Terms of Use screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");
		partialScroll();
		JSClick(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objTermsOfUseScreen, "Terms of Use screen")) {
			logger.info("User is navigated to Terms of Use screen");
			extent.extentLogger("Terms of Use", "User is navigated to Terms of Use screen");
		}
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String termsOfUseURL = getWebDriver().getCurrentUrl();
		if (termsOfUseURL.contains("termsofuse")) {
			logger.info("Terms of Use screen is opened in webview");
			extent.extentLogger("Terms of Use", "Terms of Use screen is opened in webview");

		}
		Back(1);
	}

	/**
	 * Function to verify the Terms of Use screen for Subscribed user
	 * 
	 */
	public void SubscribedUserTermsOfUseValidation() throws Exception {
		HeaderChildNode("Terms of Use screen");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");
		partialScroll();
		JSClick(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objTermsOfUseScreen, "Terms of Use screen")) {
			logger.info("User is navigated to Terms of Use screen");
			extent.extentLogger("Terms of Use", "User is navigated to Terms of Use screen");
		}
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String termsOfUseURL = getWebDriver().getCurrentUrl();
		if (termsOfUseURL.contains("termsofuse")) {
			logger.info("Terms of Use screen is opened in webview");
			extent.extentLogger("Terms of Use", "Terms of Use screen is opened in webview");

		}
		checkElementDisplayed(PWAHamburgerMenuPage.objTermsAndConditions, "Terms and conditions of application");
		checkElementDisplayed(PWAHamburgerMenuPage.objOfferTermsAndConditions, "Offers Terms and conditions");
		partialScroll();
		scrollDownWEB();
		checkElementDisplayed(PWAHamburgerMenuPage.objOfferDUration, "Offer duration");
		partialScroll();
		checkElementDisplayed(PWAHamburgerMenuPage.objCashbackByAmazonPay,
				"Steps to get Cashback for payment by Amazon pay");
		checkElementDisplayed(PWAHamburgerMenuPage.objCashbackByAnyBankCard,
				"Steps to get 30% Cashback on any Bank Credit/Debit card");
		checkElementDisplayed(PWAHamburgerMenuPage.objCashbackOnPaytm, "Steps to get 50% Paytm Cashback");
		Back(1);
	}

	/**
	 * Function to verify the Privacy Policy in Hamburger menu
	 * 
	 */
	public void PrivacyPolicyValidation() throws Exception {
		HeaderChildNode("Privacy Policy screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicy, "Privacy Policy option");
		partialScroll();
		JSClick(PWAHamburgerMenuPage.objPrivacyPolicy, "Privacy Policy option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objPrivacyPolicyScreen, "Privacy Policy screen")) {
			logger.info("User is navigated to Privacy Policy screen");
			extent.extentLogger("Privacy Policy", "User is navigated to Privacy Policy screen");
		}
		String privacyPolicyURL = getWebDriver().getCurrentUrl();
		if (privacyPolicyURL.contains("privacyPolicyURL")) {
			logger.info("Privacy Policy screen is opened in webview");
			extent.extentLogger("Privacy Policy", "Privacy Policy screen is opened in webview");

		}
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicyInfo, "Legal information of the application");
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objSecurityInfo, "Security Information of the application");
		Back(1);
	}

	/**
	 * Function to verify the Privacy Policy screen for Subscribed user
	 * 
	 */

	public void SubscribedUserPrivacyPolicyValidation() throws Exception {
		HeaderChildNode("Privacy Policy screen");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicy, "Privacy Policy option");
		partialScroll();
		JSClick(PWAHamburgerMenuPage.objPrivacyPolicy, "Privacy Policy option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objPrivacyPolicyScreen, "Privacy Policy screen")) {
			logger.info("User is navigated to Privacy Policy screen");
			extent.extentLogger("Privacy Policy", "User is navigated to Privacy Policy screen");
		}
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String privacyPolicyURL = getWebDriver().getCurrentUrl();
		if (privacyPolicyURL.contains("privacyPolicyURL")) {
			logger.info("Privacy Policy screen is opened in webview");
			extent.extentLogger("Privacy Policy", "Privacy Policy screen is opened in webview");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objLinkOnPrivacyPolicy, "Hyper link in Privacy Policy Screen");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLinkOnPrivacyPolicy, "Hyperlink");
		waitTime(5000);
		String link = getWebDriver().getCurrentUrl();
		if (link.contains("pagenotfound")) {
			logger.info("User is not able to navigate to the Contact Us page");
			extent.extentLoggerFail("Hyper link", "User is not able to navigate to the Contact Us page");
		}
		Back(1);
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicyInfo, "Legal information of the application");
		verifyElementPresent(PWAHamburgerMenuPage.objSecurityInfo, "Security Information of the application");
		partialScroll();
		Back(1);
	}

	/**
	 * Function to verify the Build version in Hamburger menu
	 * 
	 */

	public void BulidVersionValidation() throws Exception {
		HeaderChildNode("Build version");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		checkElementDisplayed(PWAHamburgerMenuPage.objBuildVersion, "Build Version");
		String version = getText(PWAHamburgerMenuPage.objBuildVersion);
		logger.info("Build version is : " + version);
		extent.extentLogger("version", "Build version is : " + version);
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
	}

	/**
	 * Function to verify the Footer Section of Home page
	 * 
	 */

	public void FooterSectionValidation() throws Exception {
		HeaderChildNode("Footer Section");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		JSClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		verifyElementPresent(PWAHomePage.objDownloadApps, "Download Apps text");
		verifyElementPresent(PWAHomePage.objAndroidPlayStoreIcon, "Android play store icon");
		// Instagram

		verifyElementPresent(PWAHomePage.objInstagramIcon, "Instagram icon");
		click(PWAHomePage.objInstagramIcon, "Instagram icon");
		switchToWindow(2);
		if (verifyElementPresent(PWAHomePage.objInstagramPage, "Instagram page follow button")) {
			logger.info("User is navigated to Instagram page");
			extent.extentLoggerPass("Instagram", "User is redirected to Instagram page");
		}
		getWebDriver().close();
		switchToParentWindow();
		// Twitter
		verifyElementPresentAndClick(PWAHomePage.objTwitterIcon, "Twitter icon");
		switchToWindow(2);
		if (verifyElementPresent(PWAHomePage.objTwitterPage, "Twitter page follow button")) {
			logger.info("User is navigated to Twitter page");
			extent.extentLoggerPass("Twitter", "User is redirected to Twitter page");
		}
		getWebDriver().close();
		switchToParentWindow();
		// Facebook
		verifyElementPresentAndClick(PWAHomePage.objFacebookIcon, "Facebook icon");
		switchToWindow(2);
		String facebook = getWebDriver().getCurrentUrl();
		if (facebook.contains("facebook")) {
			logger.info("User is redirected to facebook page");
			extent.extentLoggerPass("Facebook", "User is redirected to facebook page");
		}
		getWebDriver().close();
		switchToParentWindow();
		verifyElementPresent(PWAHomePage.objCopyRightText, "Copyright text");
		// Contact Us screen
		verifyElementPresentAndClick(PWAHomePage.objHelp, "Help Center in footer section");
		switchToWindow(2);
		verifyElementPresentAndClick(PWAHomePage.objwritetous, "Write to us");
		switchToWindow(3);
		if (verifyElementPresent(PWAHomePage.objcontactus, "Contact Us page")) {
			logger.info("User is navigated to Contact Us page");
			extent.extentLoggerPass("Contact Us", "User is naviagted to Contact Us page");

		}
		getWebDriver().close();
		waitTime(5000);
		switchToWindow(2);
		getWebDriver().close();
		switchToParentWindow();
		waitTime(5000);
		// android play store
		verifyElementPresentAndClick(PWAHomePage.objAndroidPlayStoreIcon, "Google play store icon");
		switchToWindow(2);
		if (verifyElementPresent(PWAHomePage.objGooglePlayLogo, "Android Google Play icon") == true) {
			logger.info("User is navigated to Android Google Play store");
			extent.extentLoggerPass("Google play store", "User is redirected to Google paly store page");
		}
		getWebDriver().close();
		switchToParentWindow();
		waitTime(5000);
		// iOS app store
		verifyElementPresentAndClick(PWAHomePage.objIoSAppStoreIcon, "iOS app store icon");
		switchToWindow(2);
		String iOSURL = getWebDriver().getCurrentUrl();
		if (iOSURL.contains("apple")) {
			logger.info("User is redirected to iOS app store page");
			extent.extentLoggerPass("iOS app store", "User is redirected to iOS app store page");
		}
		getWebDriver().close();
		switchToParentWindow();
	}

	/**
	 * Function to verify the FAQ's in Help Center Screen under Getting started
	 * category
	 */

	public void gettingStartedVerifications() throws Exception {
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Getting Started"),
				"Getting started tab");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("What is ZEE5"), "What is zee5");

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to What is ZEE5 page");
			extent.extentLoggerPass("Article", "User is navigated to What is ZEE5 page");
		}
		Back(1);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Registering with ZEE5"),
				"Registering with ZEE5");

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to Registeing with ZEE5 page");
			extent.extentLoggerPass("Article", "User is navigated to Registering with ZEE5 page");
		}
		Back(1);

		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How do I watch ZEE5 on my television?"),
				"How do I watch ZEE5 on my telivision");

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to How do I watch ZEE5 on my telivision page");
			extent.extentLoggerPass("Article", "User is navigated to How do I watch ZEE5 on my telivision page");
		}
		Back(1);
		
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Renting movies on ZEEPLEX"),
				"Renting Movies on ZEEPLEX");

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to Renting movies on ZEEPLEX page");
			extent.extentLoggerPass("Article", "User is navigated to Renting movies on ZEEPLEX page");
		}
		Back(1);
	}

	/**
	 * Function to verify the FAQ's in Help Center Screen under My Account category
	 */

	public void myAccountVerifications() throws Exception {
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("My Account"), "My Account tab");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Managing your Subscription"),
				"Managing your Subscription ");

		switchToWindow(3);
		
		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to Managing your Subscription  page");
			extent.extentLoggerPass("Article", "User is navigated to Managing your Subscription  page");
		}
//		Back(1);
		
		getWebDriver().close();
		switchToWindow(2);
		
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I can"),
				"I can't sign in to ZEE5 ");

		switchToWindow(3);
		
		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to I can't sign in to ZEE5 page");
			extent.extentLoggerPass("Article", "User is navigated to I can't sign in to ZEE5 page");
		}
//		Back(1);
		
		getWebDriver().close();
		switchToWindow(2);
		
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("My auto-renewal subscription has expired"),
				"My auto-renewal subscription has expired");

		switchToWindow(3);
		
		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info(
					"User is navigated to My auto-renewal subscription has expired page");
			extent.extentLoggerPass("Article",
					"User is navigated to My auto-renewal subscription has expired page");
		}
//		Back(1);
		
		getWebDriver().close();
		switchToWindow(2);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How many devices can I watch on?"),
				"I want to update my profile information");

		switchToWindow(3);
		
		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to I want to update my profile information  page");
			extent.extentLoggerPass("Article", "User is navigated to I want to update my profile information page");
		}
//		Back(1);

		getWebDriver().close();
		switchToWindow(2);
	}

	/**
	 * Function to verify the FAQ's in Help Center Screen under Quick Links category
	 */
	public void quickLinksVerifications() throws Exception {
		checkElementDisplayed(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Quick Links"), "Quick Links tab");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How Can I"), "How Can I ");

		if (checkElementDisplayed(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to How Can I page");
			extent.extentLogger("Article", "User is navigated to How Can I page");
		}
		Back(1);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Offers"),
				"Offers & Partnerships ");

		if (checkElementDisplayed(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to Offers & Partnerships page");
			extent.extentLogger("Article", "User is navigated to Offers & Partnerships page");
		}
		Back(1);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Partnerships"),
				"ZEE5 Partnerships");

		if (checkElementDisplayed(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to ZEE5 Partnerships");
			extent.extentLogger("Article", "User is navigated to ZEE5 Partnerships");
		}
		Back(1);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I am unable to watch the ZEEPLEX"), "I am unable to watch the ZEEPLEX");

		if (checkElementDisplayed(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to I am unable to watch the ZEEPLEX");
			extent.extentLogger("Article", "User is navigated to I am unable to watch the ZEEPLEX");
		}
		Back(1);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Cancel Subscription"),
				"Cancel Subscription");

		if (checkElementDisplayed(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to Cancel Subscription page");
			extent.extentLogger("Article", "User is navigated to Cancel Subscription page");
		}
		Back(1);
	}

	/**
	 * Function to verify the Display language and Static pages Content language
	 */
	public void contentLanguagewithDisplayLanguage(String userType) throws Exception {
		// Changing display language to Kannada
		verifyElementPresentAndClick(PWAHomePage.objLanguage, "Language button");
		verifyElementPresentAndClick(PWAHomePage.objKannadaWEB, "Kannada option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		// About Us
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		if (userType.contains("Guest")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objAboutUsinKannada, "About Us option in kannada");
		} else {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objAboutUsinKannada2, "About Us option in kannada");
		}
		String title1 = getText(PWAHamburgerMenuPage.objAboutUsTextInPage);
		System.out.println("Title " + title1);
		if (title1.contains("About Us")) {
			logger.info("Content of the About Us page is not according to the display language");
			extent.extentLoggerFail("About Us",
					"Content of the page About Us is not according to the display language");
		}
		Back(1);
		// Terms of Use
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		if (userType.contains("Guest")) {
			JSClick(PWAHamburgerMenuPage.objTermsInKannada, "Terms of Use option in Kannada");
		} else if (userType.contains("NonSubscribedUser") || userType.contains("SubscribedUser")) {
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objTermsInKannada2, "Terms of Use option in Kannada");
			JSClick(PWAHamburgerMenuPage.objTermsInKannada2, "Terms of Use option in Kannada");
		}
		String title2 = getText(PWAHamburgerMenuPage.objTermsOfUseScreen);
		System.out.println("Title " + title2);
		if (title2.contains("Terms of Use")) {
			logger.info("Content of the Terms of Use page is not according to the display language");
			extent.extentLoggerFail("Terms of Use",
					"Content of the Terms of Use page is not according to the display language");
		}
		Back(1);
		// Privacy Policy
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPrivacyPolicyInKannadA, "Privacy Policy option in Kannada");
//		if (userType.contains("Guest")) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPrivacyPolicyInKannadA,
//					"Privacy Policy option in Kannada");
//		} else {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPrivacyPolicyInKannadA2,
//					"Privacy Policy option in Kannada");
//		}
		String title3 = getText(PWAHamburgerMenuPage.objPrivacyPolicyScreen);
		System.out.println("Title " + title3);
		if (title3.contains("Privacy Policy")) {
			logger.info("Content of the Privacy Policy page is not according to the display language");
			extent.extentLoggerFail("Privacy Policy",
					"Content of the Privacy Policy page is not according to the display language");
		}
		Back(1);
		// Changing display language to English
		verifyElementPresentAndClick(PWAHomePage.objLanguage, "Language button");
		verifyElementPresentAndClick(PWAHomePage.objEnglishWEB, "English option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
	}

	/*
	 * =========================================BHAVANA External
	 * Links========================
	 */

	public void LinksValidation(String userType) throws Exception {
		if (userType.contains("Guest")) {
			extent.HeaderChildNode("Guest user scenarios");
			InternalLinksValidation();
			ExternalLinksValidation();
		}

		else if (userType.contains("NonSubscribedUser")) {
			extent.HeaderChildNode("NonSubscribed User scenarios");
			// ZeeWEBPWALogin("NonSubscribedUser");
			InternalLinksValidation();
			ExternalLinksValidation();
		} else if (userType.contains("SubscribedUser")) {
			extent.HeaderChildNode("subscribed scenarios");
			// ZeeWEBPWALogin("SubscribedUser");
			InternalLinksValidation();
			ExternalLinksValidation();
		}
	}

//
	public void InternalLinksValidation() throws Exception {

		extent.HeaderChildNode("Internal Links Validation");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		JSClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		waitTime(2000);
		verifyElementPresent(PWAHomePage.objAboutUsInFooterSection, "About Us in footer section");
		waitTime(2000);
		JSClick(PWAHomePage.objAboutUsInFooterSection, "About Us in footer section");
		waitTime(4000);
		if (checkElementDisplayed(PWAHomePage.objAboutUs, "About Us screen")) {
			logger.info("User is navigated to About Us Screen");
		}
		//Back(1);
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objHelp, "Help Center in footer section");
		JSClick(PWAHomePage.objHelp, "Help Center in footer section");
		waitTime(8000);
		switchToWindow(2);
		waitTime(5000);
		if (checkElementDisplayed(PWAHomePage.objHelpScreen, "Help Center screen")) {
			logger.info("User is navigated to Help Center Screen");
		}
		getWebDriver().close();
		switchToParentWindow();
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objPrivacyPolicyInFooterSection, "Privacy Policy in footer section");
		waitTime(5000);
		JSClick(PWAHomePage.objPrivacyPolicyInFooterSection, "Privacy Policy in footer section");
		if (checkElementDisplayed(PWAHomePage.objPrivacyPolicy, "Privacy Policy screen")) {
			logger.info("User is navigated to Privacy Policy Screen");
		}
		Back(1);
		waitTime(5000);
		verifyElementPresentAndClick(PWAHomePage.objTermsOfUseInfooterSection, "Terms of Use in footer section");
		if (checkElementDisplayed(PWAHomePage.objTerms, "Terms of Use screen")) {
			logger.info("User is navigated to Terms of Use Screen");
		}
		Back(1);
	}

	/**
	 * Function to verify external links
	 */

	public void ExternalLinksValidation() throws Exception {
		extent.HeaderChildNode("External Links Validation");
//		waitTime(5000);
		// Instagram
//		scrollDownWEB();
//		if (checkElementDisplayed(PWAHomePage.objWhatToWatchPopUp, "wondering what to watch pop up")) {
//			verifyElementPresentAndClick(PWAHomePage.objWhatToWatchCloseButton, "Pop up close button");
//		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		JSClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objInstagramIcon, "Instagram icon");
		JSClick(PWAHomePage.objInstagramIcon, "Instagram icon");
		waitTime(3000);
		switchToWindow(2);
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objInstagramPage, "Instagram page follow button")) {
			logger.info("User is navigated to Instagram page");
		}
		getWebDriver().close();
		switchToParentWindow();
		// Twitter
		partialScroll();
		scrollDownWEB();
		verifyElementPresent(PWAHomePage.objTwitterIcon, "Twitter icon");
		JSClick(PWAHomePage.objTwitterIcon, "Twitter icon");
		waitTime(3000);
		switchToWindow(2);
		if (checkElementDisplayed(PWAHomePage.objTwitterPage, "Twitter page follow button")) {
			logger.info("User is navigated to Twitter page");
		}
		getWebDriver().close();
		switchToParentWindow();
		partialScroll();
		scrollDownWEB();
		// Facebook
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objFacebookIcon, "Facebook icon");
		JSClick(PWAHomePage.objFacebookIcon, "Facebook icon");
		waitTime(3000);
		switchToWindow(2);
		String facebook = getWebDriver().getCurrentUrl();
		if (facebook.contains("facebook")) {
			logger.info("User is redirected to facebook page");
			extent.extentLogger("Facebook", "User is redirected to facebook page");
		}
		getWebDriver().close();
		switchToParentWindow();
		waitTime(5000);
		// android play store
		verifyElementPresent(PWAHomePage.objAndroidPlayStoreIcon, "Google play store icon");
		JSClick(PWAHomePage.objAndroidPlayStoreIcon, "Google play store icon");
		waitTime(3000);
		switchToWindow(2);
		if (checkElementDisplayed(PWAHomePage.objGooglePlayLogo, "Android Google Play icon") == true) {
			logger.info("User is navigated to Android Google Play store");
			extent.extentLogger("Google play store", "User is redirected to Google paly store page");
		}
		getWebDriver().close();
		switchToParentWindow();
		waitTime(5000);
		// iOS app store
		verifyElementPresent(PWAHomePage.objIoSAppStoreIcon, "iOS app store icon");
		JSClick(PWAHomePage.objIoSAppStoreIcon, "iOS app store icon");
		waitTime(3000);
		switchToWindow(2);
		String iOSURL = getWebDriver().getCurrentUrl();
		if (iOSURL.contains("apple")) {
			logger.info("User is redirected to iOS app store page");
			extent.extentLogger("iOS app store", "User is redirected to iOS app store page");
		}
		getWebDriver().close();
		switchToParentWindow();
	}

	/**
	 * ===============================BHAVANA CONTENT
	 * DETAILS============================
	 * 
	 */

	public void contentDetailsValidation(String userType) throws Exception {
		HeaderChildNode("Content Details Module");
		if (userType.contentEquals("Guest")) {
			extent.HeaderChildNode("Guest user scenarios");
			logger.info("Accessing as Guest User");
			ContentDetails("Guest");

		} else if (userType.contentEquals("NonSubscribedUser")) {
			extent.HeaderChildNode("Non subscribed scenarios");
			logger.info("Accessing as Non subscribed User");
			// ZeeWEBPWALogin("NonSubscribedUser");
			ContentDetails("NonSubscribedUser");
			checkDurationandProgressVideocontent("NonSubscribedUser");

		} else if (userType.contentEquals("SubscribedUser")) {
			extent.HeaderChildNode("Subscribed scenarios");
			logger.info("Accessing as Subscribed User");
			// ZeeWEBPWALogin("SubscribedUser");
			ContentDetails("SubscribedUser");
			checkDurationandProgressVideocontent("SubscribedUser");
		}
	}

	public void checkDurationandProgressVideocontent(String userType) throws Exception {
		extent.HeaderChildNode("checkDurationandProgressVideo");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtnWEB, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorEpisode");

		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
//	hideKeyboard();
		waitTime(3000);
		click(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(10000);
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		// Content elapsed time should update with the content playback
		if (userType.equals("Guest")) {
			String currentDuration = getText(PWAPlayerPage.objcurrenttime);
			System.out.println("Current time: " + currentDuration);
		} else {
			String currentDuration = getText(PWAPlayerPage.objcurrenttime);
			System.out.println("Elapsed time: " + currentDuration);
		}
		String totalDuration = getText(PWAPlayerPage.objtotaltime);
		System.out.println("Total time: " + totalDuration);
		String progress = null;
		if (checkElementDisplayed(PWAPlayerPage.objprogressBar, "ProgressBar")) {
			progress = getAttributValue("style", PWAPlayerPage.objprogressProgress);
			System.out.println("Progress : " + progress);
		}
		Thread.sleep(5000);
		verifyElementPresentAndClick(PWAPlayerPage.forward10SecBtn, "10 sec forward");
		verifyElementPresentAndClick(PWAPlayerPage.playBtn, "Play button");
		// Waiting for some time
		Thread.sleep(10000);
		Thread.sleep(10000);
		System.out.println("Waited for 5 sec");
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		String currentDuration1 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time: " + currentDuration1);
		String totalDuration1 = getText(PWAPlayerPage.objtotaltime);
		System.out.println("Total time: " + totalDuration1);
		String progress1 = getAttributValue("style", PWAPlayerPage.objprogressProgress);
		System.out.println("Progress : " + progress1);
		// Validate the availabilty and functionality of progress bar button
		if (!progress.equals(progress1)) {
			System.out.println("Progress Bar is functional");
			extent.extentLogger("Progress Bar is functional", "Progress Bar is functional");
			logger.info("Progress Bar is functional");
		} else {
			System.out.println("Progress Bar is not functional");
			extent.extentLoggerFail("Progress Bar is not functional", "Progress Bar is not functional");
			logger.info("Progress Bar is not functional");
		}
		// Content duration should be static on the player
		if (totalDuration.contains(totalDuration1)) {
			System.out.println("Content duration is static");
			extent.extentLogger("Content duration is static", "Content duration is static");
			logger.info("Content duration is static");
		} else {
			System.out.println("Content duration is not static");
			extent.extentLoggerFail("Content duration is not static", "Content duration is not static");
			logger.info("Content duration is not static");
		}
	}

	public void ContentDetails(String userType) throws Exception {

		extent.HeaderChildNode("Content details Validation");
		waitTime(5000);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtnWEB, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsShow");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(10000);
		System.out.println("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
		extent.extentLogger("Navigated to tab : " + getText(PWAHomePage.objSeletedTab),
				"Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
		logger.info("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
		waitTime(5000);
		if (checkElementDisplayed(PWAShowsPage.objShowdeatilPlayIcon, "ShowDetailPage")) {
			System.out.println("Navigated to ShowdetailPage");
			extent.extentLogger("Navigated to ShowdetailPage", "Navigated to ShowdetailPage"); // any
			logger.info("Navigated to ShowdetailPage");
		}
		if (checkElementDisplayed(PWAShowsPage.objEpisodeTrayinShowdetailPage, "Episode Tray below Feature carousel")) {
			System.out.println("Episode Tray below Feature carousel is present");
			extent.extentLogger("Episode Tray below Feature carousel is present",
					"Episode Tray below Feature carousel is present");
			logger.info("Episode Tray below Feature carousel is present");
		}
		if (checkElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown")) {
			click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
			waitTime(5000);
			List<WebElement> objShowDetailEpisodeDropdownValuesSize = getWebDriver().findElements(By.xpath(
					"(((//div[@class='AllEpisodesListDiv']//div[@class='allEpisodeSelect']//div)[6])[@aria-expanded='true']//div)//span"));
			waitTime(3000);
			System.out.println("DropDown Size : " + objShowDetailEpisodeDropdownValuesSize.size());
			ArrayList<String> Listofepisode = new ArrayList<String>();
			for (int i = 1; i < objShowDetailEpisodeDropdownValuesSize.size(); i++) {
				Listofepisode.add(getAttributValue("aria-label", PWAShowsPage.objShowDetailEpisodeDropdownValues(i)));
			}
			System.out.println("Episodes Listed in dropdown " + Listofepisode);
		}
		// To scroll elements in drop down
		List<WebElement> objShowDetailEpisodeDropdownValuesSize = getWebDriver().findElements(By.xpath(
				"(((//div[@class='AllEpisodesListDiv']//div[@class='allEpisodeSelect']//div)[6])[@aria-expanded='true']//div)//span"));
		waitTime(3000);
		if (objShowDetailEpisodeDropdownValuesSize.size() > 6) {
			JavascriptExecutor je = (JavascriptExecutor) getWebDriver();
			je.executeScript("arguments[0].scrollIntoView(true);",
					objShowDetailEpisodeDropdownValuesSize.get(objShowDetailEpisodeDropdownValuesSize.size() - 5));
		}
		waitTime(3000);
		System.out.println("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		extent.extentLogger("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown),
				"Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		logger.info("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		List<WebElement> objShowDetailNonSelectedEpisodeDropdownValues = getWebDriver().findElements(By.xpath(
				"((((//div[@class='AllEpisodesListDiv']//div[@class='allEpisodeSelect']//div)[6])[@aria-expanded='true']//div)//span[@aria-selected='false'])"));
		waitTime(3000);
		ArrayList<String> ListofNonSelectedEpisode = new ArrayList<String>();
		for (int i = 1; i < objShowDetailNonSelectedEpisodeDropdownValues.size(); i++) {
			ListofNonSelectedEpisode
					.add(getAttributValue("aria-label", PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(i)));
		}
		System.out.println("NON Selected Episode : " + ListofNonSelectedEpisode);
		JSClick(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Non-Selected Episode");
		JSClick(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		System.out.println("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		extent.extentLogger("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown),
				"Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		logger.info("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		JSClick(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		scrolltillBackToArrowAppears();
		if (checkElementDisplayed(PWAShowsPage.objShowdeatilPlayIcon, "ShowDetailPage")) {
			System.out.println("Navigated to Top");
			extent.extentLogger("Navigated to Top of page", "Navigated to Top of page");
			logger.info("Navigated to Top");
		}
		verifyElementPresent(PWAShowsPage.objShareIcon, "Share icon");
		waitTime(3000);
		click(PWAShowsPage.objShareIcon, "Share icon");
		WebShareFunctionalityContent();

		// Watchhistory is showing at back-end response properly
		Response resp = ResponseInstance
				.getResponse("https://gwapi.zee5.com/content/tvshow/0-6-1392?translation=en&country=IN");
		extent.extentLogger("BackEnd data : ", "BackEnd data : ");
		logger.info("BackEnd data : ");
		System.out.println("Show : " + resp.jsonPath().getString("original_title"));
		extent.extentLogger("Show : " + resp.jsonPath().getString("original_title"),
				"Show : " + resp.jsonPath().getString("id"));
		logger.info("Show : " + resp.jsonPath().getString("original_title"));
		System.out.println("id : " + resp.jsonPath().getString("id"));
		extent.extentLogger("id : " + resp.jsonPath().getString("id"), "id : " + resp.jsonPath().getString("id"));
		logger.info("id : " + resp.jsonPath().getString("id"));
		System.out.println("duration : " + resp.jsonPath().getString("duration"));
		extent.extentLogger("duration : " + resp.jsonPath().getString("duration"),
				"duration : " + resp.jsonPath().getString("duration"));
		logger.info("duration : " + resp.jsonPath().getString("duration"));
		System.out.println("asset_Type : " + resp.jsonPath().getString("asset_type"));
		extent.extentLogger("asset_Type : " + resp.jsonPath().getString("asset_type"),
				"asset_Type : " + resp.jsonPath().getString("asset_type"));
		logger.info("asset_Type : " + resp.jsonPath().getString("asset_type"));
		// check for reco trays

		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			checkElementDisplayed(PWAShowsPage.objWatchLatestCTA, "Watch latest episode CTA");// i tried this..but it is
																								// not clicking
			// waitTime(3000);
			click(PWAShowsPage.objWatchLatestCTAPlayicon, "Watch latest episode CTA"); // RUN NOW
			waitTime(15000);
			Response recoresp = null;
			if (userType.equals("NonSubscribedUser")) {
				recoresp = ResponseInstance.getRECOResponse(
						"https://gwapi.zee5.com/content/reco?asset_id=0-1-manual_2voun4m1qsh0&country=IN&translation=en&languages=en,kn&version=6&region=KA",
						NonSubUsername, NonSubPassword);
			} else if (userType.equals("SubscribedUser")) {
				recoresp = ResponseInstance.getRECOResponse(
						"https://gwapi.zee5.com/content/reco?asset_id=0-1-manual_2voun4m1qsh0&country=IN&translation=en&languages=en,kn&version=6&region=KA",
						SubUsername, SubPassword);
			}
			String recotray = recoresp.jsonPath().getString("buckets[0].title");
			waitTime(3000);
			System.out.println("recoTray : " + recotray);

			waitTime(3000);
			try {
				scrollToTheElementWEB(TextToXpath(recotray));
				if (checkElementDisplayed(TextToXpath(recotray), "tray")) {
					extent.extentLogger("RECO Tray", "RECO Tray");
					logger.info("RECO Tray");
				} else {
					extent.extentLoggerFail("RECO Tray", "NO RECO Tray");
					logger.info("NO RECO Tray");
				}

			} catch (Exception e) {
				extent.extentLoggerFail("RECO Tray", "NO RECO Tray");
				logger.info("NO RECO Tray");
			}
		}
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}
	}

	public void scrollToTheElementWEB(By element) throws Exception {
		JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
		waitTime(3000);
		jse.executeScript("arguments[0].scrollIntoView(true);", findElement(element));
		jse.executeScript("window.scrollBy(0,-50)", "");
	}

	public void scrolltillBackToArrowAppears() throws Exception {
		// scrollToBottomOfPage();
		scrollDownWEB();
		for (int i = 1; i <= 10; i++) {
			// Swipe("UP", 1);
			partialScroll();
			if (checkElementDisplayed(PWAShowsPage.objBackToTopArrow, "Back to Top Arrow")) {
				waitTime(2000);
				click(PWAShowsPage.objBackToTopArrow, "BackToTop Arrow");
				break;
			}
		}
	}

	/*
	 * Function to validate the Web Share functionality
	 */
	public void WebShareFunctionalityContent() throws Exception {
		// click on share Option

		// Verify Facebook share option
		Thread.sleep(2000);
		verifyElementPresent(PWAPlayerPage.facebookShareBtn, "Facebook share option");
		Thread.sleep(2000);
		// Verify Twitter share option
		verifyElementPresent(PWAPlayerPage.twitterShareBtn, "Twitter share option");
		Thread.sleep(2000);
		// Verify Email Share option
		verifyElementPresent(PWAPlayerPage.emailShareBtn, "Email share option");
		Thread.sleep(2000);
		// Click on Facebook Share option
		click(PWAPlayerPage.facebookShareBtn, "Facebook share option");
		Thread.sleep(2000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}
		// Switch to window
		verifyAlert();
		switchToWindow(2);
		Thread.sleep(2000);
		// Verify user is navigate to Facebook page
		if (checkElementDisplayed(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook")) {
			verifyElementPresentAndClick(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook");
			waitTime(3000);
			verifyAlert();
			switchToWindow(1);
			waitTime(3000);
		} else {
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookEmailField, "Facebook Email field");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
			getWebDriver().findElement(PWALiveTVPage.objFacebookEmailField).sendKeys("helloigs6@gmail.com");
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookPasswordField, "Facebook Password field");
			getWebDriver().findElement(PWALiveTVPage.objFacebookPasswordField).sendKeys("hello@12345");
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookLoginBtn, "Facebook Login button");
			waitTime(2000);
			verifyAlert();
			waitTime(2000);
			verifyElementPresentAndClick(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook");
			waitTime(3000);
			verifyAlert();
			switchToWindow(1);
			waitTime(3000);
		}

		// Click on Share option
		click(PWAPlayerPage.shareBtn, "Share Option");
		Thread.sleep(2000);

		// Click on Twitter share option
		click(PWAPlayerPage.twitterShareBtn, "Twitter share option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}
		Thread.sleep(2000);
		// Verify user is navigated to Twitter page
		switchToWindow(2);
		Thread.sleep(2000);
		verifyAlert();
		waitTime(3000);
		checkElementDisplayed(PWALiveTVPage.objTwitterEmailField, "Twitter Email field");
		waitTime(2000);
		click(PWALiveTVPage.objTwitterEmailField, "Twitter Email field");
		getWebDriver().findElement(PWALiveTVPage.objTwitterEmailField).sendKeys("zee5latest@gmail.com");
		waitTime(2000);
		verifyElementPresentAndClick(PWALiveTVPage.objTwitterPasswordField, "Twitter Password field");
		getWebDriver().findElement(PWALiveTVPage.objTwitterPasswordField).sendKeys("User@123");
		verifyElementPresentAndClick(PWALiveTVPage.objTwitterLoginButton, "Twitter Login button");
		waitTime(2000);
		verifyAlert();
		waitTime(2000);
		verifyElementPresentAndClick(PWALiveTVPage.objTweetButton, "Tweet button");
		waitTime(2000);
		verifyAlert();
		switchToParentWindow();
		Thread.sleep(2000);
	}

	/**
	 * ===============================YASHASWINI
	 * NewsPage============================
	 * 
	 */

	public void newsPageValidation(String tabName) throws Exception {
		extent.HeaderChildNode("News Page Validation");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objActiveTab, "Active tab")) {
			String tab = getText(PWAHomePage.objActiveTab);
			System.out.println(tab);
			logger.info(tab + " tab is highlighted");
			extent.extentLogger("Tab", tab + " tab is highlighted");
		} else {
			logger.error(tabName + " tab is not highlighted");
			extent.extentLoggerFail("Tab", tabName + " tab is highlighted");
		}
		waitTime(3000);
		click(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
		waitForElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, 10);
		waitForPlayerAdToComplete("Live Player");
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Not navigated to Consumption Page");
		}
		newsPlayerIconValidations();
		checkElementDisplayed(PWAPlayerPage.objLiveTag, "Live Tag");
		FullScreen();
		Back(1);
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		RotateTrayValidation();
		waitTime(3000);
		newsTrayValidation();
	}

	public void RotateTrayValidation() throws Exception {
		extent.HeaderChildNode("Tray Rotate Icon Validation");
		waitTime(5000);
		partialScrollDown();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
	}

	public void mouseHover() {
		Actions action = new Actions(getWebDriver());
		WebElement player = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
		action.moveToElement(player).build().perform();
	}

	public void newsPlayerIconValidations() throws Exception {
		extent.HeaderChildNode("Validation of Player Controls");
//	waitForPlayerAdToComplete("Video Player");
		waitTime(5000);
		mouseHover();
		click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
		waitTime(2000);
//	click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
		mouseHover();
		checkElementDisplayed(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon");
		checkElementDisplayed(PWAPlayerPage.pauseBtn, "Play/Pause icon");
		checkElementDisplayed(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon");
		checkElementDisplayed(PWAPlayerPage.settingsBtn, "Settings icon");
	}

	public void FullScreen() throws Exception {
		extent.HeaderChildNode("Validating full screen mode");
//		waitForPlayerAdToComplete("Video Player");
		try {
			mouseHover();
			waitTime(5000);
			JSClick(PWAPlayerPage.maximizeBtn, "Maximize button");
			waitTime(2000);
			mouseHover();
			JSClick(PWAPlayerPage.minimizeBtn, "Minimize button");
		} catch (Exception e) {
		}
	}

	public void newsTrayValidation() throws Exception {
		extent.HeaderChildNode("Verifing the trays displayed in News Tab");
		String languageSmallText = allSelectedLanguagesWEB();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages("news", languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		List<String> apitotaltrays = resp.jsonPath().getList("buckets");
		System.out.println(apitotaltrays.size());
		for (int i = 1; i < apitotaltrays.size(); i++) {
			String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
			apiTitleList.add(traytitle);
		}
		System.out.println("api: " + apiTitleList);
		List<String> uiTitleList = new LinkedList<String>();
		List<WebElement> uitotaltrays = findElements(By.xpath("//*[@class='titleLink']"));
		System.out.println(uitotaltrays.size());
		for (int j = 0; j < 4; j++) {
			// String trayTitle
			// =findElement(By.xpath("(//*[@class='titleLink'])["+(j+1)+"]")).getText();
			String trayTitle = apiTitleList.get(j);
			uiTitleList.add(trayTitle);
			partialScrollDown();
			if (apiTitleList.get(j).equalsIgnoreCase(uiTitleList.get(j))) {
				logger.info("API title: " + apiTitleList.get(j) + " is verified with UI title: " + uiTitleList.get(j));
				extent.extentLogger("Tray validation",
						"API title: " + apiTitleList.get(j) + " is verified with UI title: " + uiTitleList.get(j));
			}
		}
		System.out.println("UI: " + uiTitleList);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/**
	 * ===============================YASHASWINI
	 * LandingPage============================
	 * 
	 */

	public void ContinuewatchingTray(String userType) throws Exception {
		extent.HeaderChildNode("Landing page module: Continue watching tray");
		partialScroll();
		waitTime(2000);
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue watching tray") == false) {
				logger.info("Continue Watching tray is not displayed for Guest User");
				extent.extentLogger("Continue Watching tray", "Continue Watching tray is not displayed for Guest User");
			} else {
				logger.info("Continue Watching tray is displayed for Guest User");
				extent.extentLoggerFail("Continue Watching tray", "Continue Watching tray is displayed for Guest User");
			}
		}
		if ((userType.equals("NonSubscribedUser") || (userType.equals("SubscribedUser")))) {
			if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue watching tray")) {
				logger.info("Continue Watching tray is displayed for logged in User");
				extent.extentLogger("Continue Watching tray", "Continue Watching tray is displayed for logged in User");
			} else {
				logger.info("Continue Watching tray is not displayed for logged in user");
				extent.extentLogger("Continue Watching tray",
						"Continue Watching tray is not displayed for logged in user");
			}
		}
	}

	public void LandingPagegap(String text, String Moviename, String userType) throws Exception {
		HeaderChildNode("Validation functionality of MyProfile option,View All button");
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		if (checkElementDisplayed(PWAHomePage.objHomeInHambugerMenu, "Home button")) {
			logger.info("Home button is highlighted in Hamburger Menu");
			extent.extentLogger("Home", "Home button is highlighted in Hamburger Menu");
		}
		click(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		Actions actions = new Actions(getWebDriver());
		WebElement contentcard = getWebDriver().findElement(PWAHomePage.objTabName("TV Shows"));
		actions.moveToElement(contentcard).perform();
		waitTime(5000);
		if (checkElementDisplayed(PWAHomePage.objHoverMenu("TV Shows"), "TV Shows menu")) {
			logger.info("TV Shows tab overlay is displayed when mouse hover is performed");
			extent.extentLogger("TV Shows", "TV Shows tab overlay is displayed when mouse hover is performed");
		}
		verifyElementPresentAndClick(PWAHomePage.objOverlayTray, "Overlay Tray");
		String Tray = getText(PWAHomePage.objOverlayTray);
		System.out.println(Tray);
		if (checkElementDisplayed(PWAHomePage.objOverlayTrayActive(Tray), "Overlay Tray in tv shows page")) {
			logger.info("Clicked on overlay menu Tray option and tray is highlighted");
			extent.extentLogger("Tray", "Clicked on overlay menu Tray option and tray is highlighted");
		}
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, text, "Search field");
		waitTime(5000);
		click(PWASearchPage.objAssetTitleSearchNavigationTab, "Zee originals");
		waitTime(35000);
		if (verifyElementPresent(PWASubscriptionPages.objGetPremiumButton, "Player Inline Subscription Link")) {
//			checkElementDisplayed(PWASubscriptionPages.objLoginSectionInPopup, "Login section");
			verifyElementPresentAndClick(PWASubscriptionPages.objLoginLink, "Login button");
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, SubUsername, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, SubPassword, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(10000);
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
			verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
		}
		click(PWAHomePage.objZeelogo1, "Zee logo");
//		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
//			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
//		}
		verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
		JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My watchlist");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Reminders"), "My Reminders");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("Logout"), "Logout option");
		verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
		JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresent(PWAPremiumPage.objViewAllBtn, "View all button");
		JSClick(PWAPremiumPage.objViewAllBtn, "View all button");
		waitTime(5000);
		scrollByWEB();
		if (checkElementDisplayed(PWAHomePage.objUpArrow, "Up Arrow")) {
			logger.info("User is able to scroll in view all page");
			extentLogger("View all", "User is able to scroll in view all page");
		}
		click(PWAPremiumPage.obj1stContentInViewAllPage, "Content");
		if (!checkElementDisplayed(PWAPremiumPage.objViewAllPage, "Veiw all")) {
			logger.info("User is navigated from view all content to respective page");
			extentLogger("View all", "User is navigated from view all content to respective page");
		}
		click(PWAHomePage.objZeelogo1, "Zee logo");
		logout();
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, ExpiredUserName, "Email Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, ExpiredUserPassword, "Password field");

		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(7000);
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, Moviename, "Search field");
		waitTime(5000);
//		click(PWASearchPage.objAssetTitleSearchNavigationTab, "Movie");
		JSClick(PWASearchPage.objAssetTitleSearchNavigationTab, "Movie");
		waitTime(5000);
		if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
			logger.info("Premium contents are not played for expired user");
			extent.extentLogger("Premium", "Premium contents are not played for expired user");
			click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
		}
		click(PWAHomePage.objZeelogo1, "Zee logo");
		logout();
	}

	@SuppressWarnings("unused")
	public void guesttrayTitleAndContentValidationWithApiData(String tab, String api) throws Exception {
		extent.HeaderChildNode(tab + " page validation with Api response");
		navigateToAnyScreenOnWeb(tab);
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(menuOption).build().perform();

		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		List<WebElement> card = getWebDriver().findElements(By.xpath("((//div[@class='slick-list'])[2]//img)"));
		System.out.println(card.size());
		for (int i = 0; i < card.size(); i++) {
			// API DATA
			String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			String businessType = resp.jsonPath().getString("buckets[1].items[" + i + "].business_type");
			String minuteType_isDRM = null;
			minuteType_isDRM = resp.jsonPath().getString("buckets[1].items[" + i + "].is_drm");

			apiTitleList.add(title);
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();

			// to get metadata from content
			String contentMetadata = getAttributValue("title",
					By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));

			// String trayTitle = apiTitleList.get(i);
			System.out.println("UI data : " + contentMetadata);
			System.out.println("api data : " + apiTitleList.get(i));
			logger.info("UI data " + title);
			logger.info("API data " + apiTitleList.get(i));
			extent.extentLogger("UI data ", "UI data " + contentMetadata);
			extent.extentLogger("API data ", "API data " + apiTitleList.get(i));
			if (contentMetadata.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is valid with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is valid with Api data");
			} else {
				logger.info("Metadata on the content card is not valid with Api data");
				extent.extentLoggerFail("Metadata", "Metadata on the content card is not valid with Api data");
			}

			// MINUTELY CONTENT CHECK
			waitTime(1000);
//			System.out.println(minuteType_isDRM);
//			if (minuteType_isDRM == null) {
//				System.out.println("No minute content attached");
//			} else {
//				System.out.println("Minute content present");

			if (checkElementDisplayed(PWAPremiumPage.specificContentisMinuteimage(Tray_Title, i + 1),
					"Minute Content")) {
				logger.info("MinuteContent is Present");
				extent.extentLogger("MinuteContent", "MinuteContent is Present");
			} else {
				logger.info("MinuteContent is not Present");
				extent.extentLogger("MinuteContent", "MinuteContent is not Present");
			}
//			}

			// PREMIUM ICON CHECK
			waitTime(1000);
			if (businessType.contains("premium")) {
				if (checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i + 1),
						"Premium icon")) {
					logger.info("Premium icon is Present");
					extent.extentLogger("Premium icon", "Premium icon is Present");
				} else {
					logger.info("Premium icon is not Present");
					extent.extentLoggerFail("Premium icon", "Premium icon not Present");
				}

			} else if (businessType.contains("advertisement") || businessType.contains("free")) {
				if (!checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i), "Premium icon")) {
					logger.info("premium icon not present and Content is NonPremium");
					extent.extentLogger("Premium icon", "premium icon not present and Content is NonPremium");
				} else {
					logger.info("premium icon is present");
					extent.extentLoggerFail("Premium icon", "premium icon is present");
				}
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Icon")) {
				logger.info("Play icon is displayed");
				extent.extentLogger("Play", "Play icon is displayed");
			} else {
				logger.info("Play icon is not displayed");
				extent.extentLogger("Play", "Play icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Icon")) {
				logger.info("Share icon is displayed");
				extent.extentLogger("Share", "Share icon is displayed");
			} else {
				logger.info("Share icon is not displayed");
				extent.extentLogger("Share", "Share icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardWatchlistBtn, "Watchlist Icon")) {
				logger.info("Watchlist icon is displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is displayed");
			} else {
				logger.info("Watchlist icon is not displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is not displayed");
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void FreeContentAndPremiumContent(String userType) throws Exception {
		extent.HeaderChildNode("Landing page module:Free And Premium Content availability");
		verifyElementPresent(PWASearchPage.objSearchBtn, "Search button");
		JSClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(3000);
		click(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(10000);
		if (userType.equals("Guest")) {
			if (verifyElementPresent(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				JSClick(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}
		}
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
		Back(1);
		PremiumContent(userType);
	}

	public void PremiumContent(String userType) throws Exception {
		type(PWASearchPage.objSearchEditBox, "The Villain", "Search Field");
		JSClick(PWASearchPage.objSpecificSearch1("The Villain"), "Searched Content");
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.objGetPremium, "Teaser Button below the player");
		}
		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			if(checkElementDisplayed(PWASubscriptionPages.objGetPremiumButton, "Player Inline Subscription Link")) {
				logger.info("Navigated to Consumption Page without trailer content");
				extent.extentLogger("Consumption Page", "Navigated to Consumption Page without trailer content");
			}
			else {
				logger.info("Navigated to Consumption Page with trailer content");
				extent.extentLogger("Consumption Page", "Navigated to Consumption Page with trailer content");
			}
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void landingpagePropertiesValidation(String userType) throws Exception {
		extent.HeaderChildNode("Validating Homepage Properties");

		if (verifyElementPresent(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu")) {
			logger.info("HamburgerMenu icon is displayed");
			extent.extentLogger("HamburgerMenu", "HamburgerMenu icon is displayed");
		} else {
			logger.info("HamburgerMenu icon is not displayed");
			extent.extentLogger("HamburgerMenu", "HamburgerMenu icon is not displayed");
		}
		// Zee5Logo
		if (verifyElementPresent(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo")) {
			logger.info("Zee5 Logo is displayed");
			extent.extentLogger("Zee5 Logo", "Zee5 Logo is displayed");
		} else {
			logger.info("Zee5 Logo is not displayed");
			extent.extentLogger("Zee5 Logo", "Zee5 Logo is not displayed");
		}

		// Search button
		if (verifyElementPresent(PWALandingPages.obj_Pwa_SearchBtn, "Search")) {
			logger.info("Search button is displayed");
			extent.extentLogger("Search", "Search button is displayed");
		} else {
			logger.info("Search button is not displayed");
			extent.extentLogger("Search", "Search button is not displayed");
		}
		// Subscription_button
		waitTime(2000);
		if (checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button")) {
			logger.info("Subscription button is displayed");
			extent.extentLogger("Subscription", "Subscription button is displayed");
		} else {
			logger.info("Subscription button is not displayed");
			extent.extentLogger("Subscription", "Subscription button is not displayed");
		}

		partialScroll();

		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");

			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}

		Back(1);
		waitTime(2000);
		WebHomepageTrayTitleAndContentValidationWithApiData(ResponseInstance.getResponse());
	}

	public static void scrollUp() {
		js.executeScript("window.scrollBy(0,-250)", "");
	}

	public void BackWeb(int x) {

		try {

			for (int i = 0; i < x; i++) {
				getWebDriver().navigate().back();
				logger.info("Back button is tapped");
				extent.extentLogger("Back", "Back button is tapped");
			}
		} catch (Exception e) {
			logger.error(e);
		}
	}

	public boolean navigateToAnyScreen(String screen) throws Exception {
		for (int i = 0; i < 3; i++) {
			try {
				verifyElementPresentAndClick(PWAHomePage.objTabName(screen), " selected screen :" + screen);
				break;
			} catch (Exception e) {
				try {
					swipeOnTab("Left");
					verifyElementPresentAndClick(PWAHomePage.objTabName(screen), " selected screen :" + screen);
					break;
				} catch (Exception exc) {
					swipeOnTab("Right");
				}
			}
		}
		return false;
	}

	@SuppressWarnings("rawtypes")
	public void swipeOnTab(String dire) throws InterruptedException {
		extent.HeaderChildNode("Swipping on tab");
		touchAction = new TouchAction(getDriver());
		Dimension size = getDriver().findElement(PWAHomePage.objTabContBar).getSize();
		if (dire.equalsIgnoreCase("Left")) {
			int startx = (int) (size.width * 0.5);
			int endx = (int) (size.width * 0.1);
			int starty = size.height / 2;
			touchAction.press(PointOption.point(startx, starty))
					.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
					.moveTo(PointOption.point(endx, starty)).release().perform();
		} else if (dire.equalsIgnoreCase("Right")) {
			int startx = (int) (size.width * 0.5);
			int endx = (int) (size.width * 0.9);
			int starty = size.height / 2;
			touchAction.press(PointOption.point(startx, starty))
					.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
					.moveTo(PointOption.point(endx, starty)).release().perform();
		}
	}

	/**
	 * ===============================TEJAS ShowsPage============================
	 * 
	 */

	public void ShowsValidationWeb(String userType) throws Exception {
		HeaderChildNode("TV Shows page");
		if (userType.contentEquals("Guest")) {
			extent.HeaderChildNode("Guest user scenarios");
			logger.info("Accessing as Guest User");
			mandatoryRegistrationPopUp(userType);
			landingPagesValidationWeb("TV Shows");
			landingPagesTrailerAndPopUpValidationWeb("Guest", "TV Shows");
			verifyLandscapeforFreeContentWeb();
			navigateToHome();
			navigateToAnyScreen("TV Shows");
			verifyLandscapeforPremiumContentWeb();
			navigateToHome();
			navigateToAnyScreen("TV Shows");
			waitTime(5000);
			RotateTrayValidation();
			mandatoryRegistrationPopUp(userType);
		} else if (userType.contentEquals("NonSubscribedUser")) {
			extent.HeaderChildNode("Non subscribed scenarios");
			logger.info("Accessing as Non subscribed User");
			landingPagesValidationWeb("TV Shows");
			landingPagesTrailerAndPopUpValidationWeb("NonSubscribedUser", "TV Shows");
			verifyLandscapeforFreeContentWeb();
			navigateToHome();
			navigateToAnyScreen("TV Shows");
			verifyLandscapeforPremiumContentWeb();
			navigateToHome();
			navigateToAnyScreen("TV Shows");
			RotateTrayValidation();
			VerifyExternalLinkInShowsLandingPageWeb();
			mandatoryRegistrationPopUp(userType);
		} else if (userType.contentEquals("SubscribedUser")) {
			extent.HeaderChildNode("Subscribed scenarios");
			logger.info("Accessing as Subscribed User");
			landingPagesValidationWeb("TV Shows");
			landingPagesTrailerAndPopUpValidationWeb("SubscribedUser", "TV Shows");
			verifyLandscapeforFreeContentWeb();
			navigateToHome();
			navigateToAnyScreen("TV Shows");
			verifyLandscapeforPremiumContentWeb();
			navigateToHome();
			navigateToAnyScreen("TV Shows");
			RotateTrayValidation();
			VerifyExternalLinkInShowsLandingPageWeb();
			mandatoryRegistrationPopUp(userType);
		}
	}

//	public void selectLanguages() throws Exception {
//		click(PWAHamburgerMenuPage.objLanguageBtnWEB, "Language Button");
//		waitTime(2000);
//		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content Languages");
//		click(PWALanguageSettingsPage.objNonSelectedEng, "English");
//		click(PWALanguageSettingsPage.objNonSelectedHin, "Hindi");
//		click(PWALanguageSettingsPage.objNonSelectedKan, "Kannada");
//		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
//		waitTime(3000);
//	}
	
	public void selectLanguages() throws Exception {
		extent.extentLogger("", "Language selection");
		waitTime(5000);
		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content Languages");
		waitTime(2000);
		unselectAllContentLanguages();
		clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedKannadaContentLanguage);
		logger.info("Selected content language Kannada");
		extent.extentLogger("", "Selected content language Kannada");
		clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedHindiContentLanguage);
		logger.info("Selected content language Hindi");
		extent.extentLogger("", "Selected content language Hindi");
		clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedEnglishContentLanguage);
		logger.info("Selected content language English");
		extent.extentLogger("", "Selected content language English");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(3000);
	}

	public void landingPagesValidationWeb(String tabName) throws Exception {
		extent.HeaderChildNode("Landing Pages Validation");
		verifyElementPresentAndClick(PWAHomePage.objTabName(tabName), tabName);
		// waitTime(5000);
		String tab = getText(PWAHomePage.objActiveTab);
		System.out.println(tab);
		logger.info(tab + " tab is highlighted");
		extent.extentLogger("Tab", tab + " tab is highlighted");
		partialScroll();
		// check if tray is loaded

		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(4000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.error("Not navigated to View All Page");
				extent.extentLoggerFail("View All", "Not navigated to View All Page");
			}
		}
		waitTime(3000);
		Back(1);
		waitTime(4000);
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
				break;
			} else {
				logger.info("Premium tag is not displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				partialScroll();
			}
		}
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAPremiumPage.objMinuteContent).size() > 0) {
				logger.info("Minute content is displayed");
				extent.extentLogger("Minute content", "Minute content is displayed");
				break;

			} else {
				logger.info("Minute content is not displayed");
				extent.extentLogger("Minute content", "Minute content is not displayed");
				partialScroll();
			}
		}
		partialScroll();
		partialScroll();
		verifyElementPresentAndClick(PWAMusicPage.objArrowToNavigateTop, "Back to Top arrow");
		// waitTime(2000);

	}

//public static void partialScroll() {
//		JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
//		jse.executeScript("window.scrollBy(0,250)", "");
//	}

	public void landingPagesTrailerAndPopUpValidationWeb(String userType, String tabName) throws Exception {
		mandatoryRegistrationPopUp(userType);
		extent.HeaderChildNode("Landing Page Carousel Validation");
		waitTime(2000);
		JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
		if (tabName.equals("Shows")) {
			for (int i = 0; i <= 10; i++) {
				try {
					WebElement premiumText = getWebDriver().findElement(PWAHomePage.objWEBShowsPagePlayCarousel);
					executor.executeScript("arguments[0].click();", premiumText);
					logger.info("Clicked on Carousel card");
					extent.extentLogger("", "Clicked on Carousel card");
					break;
				} catch (Exception e) {
					Thread.sleep(2000);
					try {
						getWebDriver().findElement(PWAHomePage.objWEBShowsPagePlayCarousel).click();
						logger.info("Clicked on Carousel card");
						extent.extentLogger("", "Clicked on Carousel card");
						break;
					} catch (Exception e1) {
						logger.error("Failed to click on Carousel card");
						extent.extentLoggerFail("", "Failed to click on Carousel card");
					}
				}
			}
		} else {
			verifyElementPresentAndClick(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		}
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Not navigated to Consumption Page");
		}
		if (checkElementDisplayed(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
			watchTrailerButtonFunctionalityShows(userType);
		} else {
			logger.info("Trailer is not available for the selected content");
			extent.extentLogger("Trailer", "Trailer is not available for the selected content");
		}
		click(PWAHomePage.objZeelogo1, "Zee Logo");
	}

	public void watchTrailerButtonFunctionalityShows(String userType) throws Exception {
		extent.HeaderChildNode("Watch Trailer Button Validation");
		click(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
		waitTime(4000);
		if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
			logger.error("Watch Trailer Button functionality failed");
		}
	}

	public void verifyLandscapeforFreeContentWeb() throws Exception {
		String userType = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(userType);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
		.getParameter("consumptionsShow");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(4000);
		partialScroll();
		checkElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(5000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		waitForPlayerAdToComplete("Video Player");
		mouseHover();
		click(PWAPlayerPage.pauseBtn, "Pause button");
		click(PWAPlayerPage.maximizeBtn, "Maximize button");
		waitTime(2000);
		mouseHover();
		click(PWAPlayerPage.minimizeBtn, "Minimize button");
		click(PWAHomePage.objZeelogo1, "Zee Logo");
		}

	public void verifyLandscapeforPremiumContentWeb() throws Exception {
		String userType = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, "Baarish" + "\n", "Search Edit box Baarish");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult("Baarish"), "Search Result");
		waitTime(8000);
		partialScroll();
		click(PWAShowsPage.objEpisodeCardTwo, "Second Episode Card");
		waitForPlayerAdToComplete("Video Player");
		mouseHover();
		click(PWAPlayerPage.pauseBtn, "Pause button");
		click(PWAPlayerPage.maximizeBtn, "Maximize button");
		waitTime(2000);
		mouseHover();
		click(PWAPlayerPage.minimizeBtn, "Minimize button");
		click(PWAPlayerPage.playBtn, "Play button");
		if (checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Subscribe Pop Up Title")) {
			click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close Button");
		} else {
			logger.info("Trailer is playing");
			extent.extentLogger("", "Trailer is playing");
		}
	}

	public void VerifyExternalLinkInShowsLandingPageWeb() throws Exception {
		HeaderChildNode("Verify ExternalLink In ShowsLanding Page");
		boolean foundTray = false;
		int i = 0, j = 0;
		String trayTitleInUI = "";
		int noOfSwipes = 70;
		main: for (i = 0; i <= noOfSwipes; i++) {
			ArrayList<WebElement> trays = new ArrayList<WebElement>();
			trays = (ArrayList<WebElement>) getWebDriver().findElements(PWALandingPages.objTrayTitle);
			for (int traycount = 0; traycount < trays.size(); traycount++) {
				if (trays.get(traycount).getAttribute("innerText").equalsIgnoreCase("Play & Win")) {
					trayTitleInUI = trays.get(traycount).getText();
					foundTray = true;
					System.out.println("found in xpath");
					break main;
				}
			}
			scrollDownByY(300);
			waitTime(2000);
			logger.info("Scrolled down");
			extent.extentLogger("scrolled", "Scrolled down");
			if (i == noOfSwipes) {
				logger.error("Play & Win is not displayed");
				extent.extentLoggerFail("failedToLocate", "Play & Win is not displayed");
			}
		}
		if (foundTray == true) {
			for (j = i; j <= noOfSwipes; j++) {
				if (waitForElementPresence(PWAShowsPage.objPlayAndWinFirstItem, 1, trayTitleInUI + " tray")) {
					System.out.println("found");
					break;
				} else {
					scrollDownByY(250);
					waitTime(2000);
					logger.info("Scrolled down");
					extent.extentLogger("scrolled", "Scrolled down");
					if (j == noOfSwipes) {
						logger.error("First item is not displayed");
						extent.extentLoggerFail("failedToLocate", "First item is not displayed");
					}
				}
			}
		}
		if (checkElementDisplayed(PWAShowsPage.objPlayAndWin, "Tray Play & Win")) {
			Set<String> totalHandles = getWebDriver().getWindowHandles();
			String originalHandle = getWebDriver().getWindowHandle();
			System.out.println("Total handles: " + totalHandles.size());
			click(PWAShowsPage.objPlayAndWin, "Play and Win tray");
			waitTime(4000);
			click(PWAShowsPage.objPlayAndWinViewAllFirstItem, "First item");
			waitTime(4000);
			Set<String> totalHandlesAfterClick = getWebDriver().getWindowHandles();
			System.out.println("Total handles after click: " + totalHandlesAfterClick.size());
			System.out.println("now: " + getWebDriver().getWindowHandle());
			if (totalHandlesAfterClick.size() > totalHandles.size()) {
				logger.info("External Window is opened after click");
				extent.extentLogger("New web page loaded", "External Window is opened after click");
			} else {
				logger.info("External Window failed to open");
				extent.extentLogger("New web page is not loaded", "External Window failed to open");
			}
			getWebDriver().switchTo().window(originalHandle);
			navigateToHome();

		} else {
			logger.info("Play and Win tray is not displayed");
		}
	}

//public void RotateTrayValidation() throws Exception {
//	extent.HeaderChildNode("Tray Rotate Icon Validation");
//		partialScroll();
//	verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
//	if(checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button"))
//	{
//		logger.info("Tray is rotated");
//		extent.extentLogger("Tray is rotated", "Tray is rotated");
//		}else {
//			logger.info("Tray is not rotated");
//			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
//		}
//		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
//}

//public void navigateToAnyScreen(String screen) throws Exception {
//	for (int i = 0; i < 3; i++) {
//		try {
//			verifyElementPresentAndClick(PWAHomePage.objTabName(screen), " selected screen :" + screen);
//			break;
//		} catch (Exception e) {
//			try {
//				swipeOnTab("Left");
//				verifyElementPresentAndClick(PWAHomePage.objTabName(screen), " selected screen :" + screen);
//				break;
//			} catch (Exception exc) {
//				swipeOnTab("Right");
//			}
//		}
//	}
//}

	public void navigateToHome() {
		String url = getParameterFromXML("url");
		getWebDriver().get(url);
	}

	/**
	 * Modified reco scripts
	 */

	/**
	 * ===============================Tanisha Recommendation
	 * Web============================
	 * 
	 */

	public void verificationOfRecoTalamoosWeb(String userType) throws Exception {
		if (userType.equals("Guest")) {
			playContentsToTriggerRecoApiWeb(userType);
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "Trending on ZEE5");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Shows", "Trending Shows");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Movies", "Trending Movies");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Music", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "News", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Premium", "Trending Now");
			verifyRecoTrayAndPlayContentInDetailsPage(userType, "consumptionsPage");
		} else if (userType.equals("NonSubscribedUser")) {
			playContentsToTriggerRecoApiWeb(userType);
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "Trending on ZEE5");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Premium", "Trending Now");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Shows", "Trending Shows");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Movies", "Trending Movies");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Music", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "News", "Recommended for you");
			verifyRecoTrayAndPlayContentInDetailsPage(userType, "consumptionsPage");
		} else if (userType.equals("SubscribedUser")) {
			playContentsToTriggerRecoApiWeb(userType);
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "Trending on ZEE5");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "You may also like");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Shows", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "Because you watched");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Premium", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Movies", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "News", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Music", "Recommended for you");
			verifyRecoTrayAndPlayContentInDetailsPage(userType, "consumptionsPage");
		} else {
			logger.error("Incorrect userType passed to method");
			extent.extentLogger("incorrectUser", "Incorrect userType passed to method");
		}
	}

	public void playContentsToTriggerRecoApiWeb(String userType) throws Exception {
		extent.HeaderChildNode("Play different contents to trigger Recommendation API");
		playAContentForRecoWeb("Music", getParameterFromXML("musicToTriggerReco"), userType);
		playAContentForRecoWeb("Movies", getParameterFromXML("movieToTriggerReco"), userType);
		playAContentForRecoWeb("Episode", Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("episodeToTriggerReco"), userType);
		playAContentForRecoWeb("News", getParameterFromXML("newsToTriggerReco"), userType);
	}

	public void verifyRecoTrayAndPlayContentWithoutAPIWeb(String userType, String tabName, String recoTrayTitle)
			throws Exception {
		extent.HeaderChildNode(tabName + " tab: Validation of \"" + recoTrayTitle + "\" tray");
		logger.info(tabName + " tab: Verification of " + recoTrayTitle);
		extent.extentLogger("recoverification", tabName + " : Verification of " + recoTrayTitle);
		String nextPageTitle = "";
		boolean firstAssetClicked = false;
		if (navigateToAnyScreenOnWeb(tabName)) {
			firstAssetClicked = swipeTillTrayAndClickFirstAsset(userType, 15, recoTrayTitle,
					"\"" + recoTrayTitle + "\" tray", tabName);
			if (firstAssetClicked) {
				try {
					nextPageTitle = getText(PWAShowsPage.objShowsTitle);
					logger.info("Shows Details page is displayed");
					extent.extentLogger("showDetails", "Shows Details page is displayed");
				} catch (Exception e) {
					try {
						nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
						logger.info("Player screen is displayed");
						extent.extentLogger("playerScreen", "Player screen is displayed");
					} catch (Exception e1) {
						nextPageTitle = "";
					}
				}
			}
			if (!nextPageTitle.equals("")) {
				logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
				extent.extentLogger("playerScreen",
						"Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
				if (!userType.equals("SubscribedUser"))
					try {
						getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
					} catch (Exception e) {
					}
				try {
					getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
				} catch (Exception e) {
				}
			} else {
				logger.error("Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
				extent.extentLoggerFail("playerScreen",
						"Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
			}
		}
	}

	public void verifyRecoTrayAndPlayContentInDetailsPage(String userType, String page) throws Exception {
		extent.HeaderChildNode("Verification of talamoos trays in : Consumptions page");
		String content = "";
		if (page.equals("detailsPage"))
			content = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("consumptionsShow");
		else
			content = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("musicToTriggerReco");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, content + "\n", "Search Edit box: " + content);
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		String contentPlayed = "";
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(content), "Search Result");
		if (page.equals("consumptionsPage")) {
			click(PWASearchPage.objCloseRegisterDialog, "Close in Pop Up");
			if (waitForElementPresence(PWAPlayerPage.objContentTitleInConsumptionPage, 30, "Player screen")) {
				contentPlayed = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				logger.info("Content played: " + contentPlayed);
				extent.extentLogger("contentPlayed", "Content played: " + contentPlayed);
			}
		}
		if (page.equals("detailsPage")) {
			if (waitForElementPresence(PWAShowsPage.objShowsTitle, 2, "Shows Details page")) {
				contentPlayed = getText(PWAShowsPage.objShowsTitle);
				logger.info("Show Details page displayed: " + contentPlayed);
				extent.extentLogger("showDetails", "Show Details page displayed: " + contentPlayed);
			}
		}
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		logger.info("Content ID fetched from URL: " + contentID);
		extent.extentLogger("contentPlayed", "Content ID fetched from URL: " + contentID);
		verifyRecoTraysFromDetailsPage(userType, contentID);
		try {
			getWebDriver().findElement(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn).click();
		} catch (Exception e) {
		}
	}

	public void playAContentForRecoWeb(String contentType, String searchKey, String userType) throws Exception {
		logger.info("Playing content to initiate Reco API: " + contentType);
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("contentplay", "Playing content to initiate Reco API: " + contentType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, searchKey + "\n", "Search Edit box: " + searchKey);
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(searchKey), 10, "Search Result");
		String contentPlayed = "";
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(searchKey), "Search Result");
		if (!userType.equals("SubscribedUser"))
			try {
				getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
			} catch (Exception e) {
			}
		if (waitForElementPresence(PWAPlayerPage.objContentTitleInConsumptionPage, 30, "Player screen")) {
			contentPlayed = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
			logger.info("Content played: " + contentPlayed);
			extent.extentLogger("contentPlayed", "Content played: " + contentPlayed);
			waitForPlayerAdToComplete("Video Player");
			logger.info("Playing content for some time to trigger Reco API");
			extent.extentLogger("contentPlayed", "Playing content for some time to trigger Reco API");
			waitTime(30000);
		}
	}

	public boolean swipeTillTrayAndClickFirstAsset(String userType, int noOfSwipes, String trayTitle, String message,
			String tab) throws Exception {
		int swipeCount = 0;
		String trayTitleInUI = "", temp = "";
		boolean found = false, titleDisplayed = false;
		List<WebElement> trays;
		ArrayList<String> titles = new ArrayList<String>();
		for (int i = 0; i <= noOfSwipes; i++) {
			trays = new ArrayList<WebElement>();
			trays = getWebDriver().findElements(PWALandingPages.objTrayTitle);
			for (int tr = 0; tr < trays.size(); tr++) {
				try {
					titles.add(trays.get(tr).getAttribute("innerText"));
				} catch (Exception e) {
				}
			}
			for (int traycount = 0; traycount < titles.size(); traycount++) {
				temp = titles.get(traycount);
				if (temp.toLowerCase().contains(trayTitle.toLowerCase())) {
					trayTitleInUI = temp;
					if (!titleDisplayed) {
						logger.info(trayTitleInUI + " is present in " + tab + " page");
						extent.extentLogger("trayfound", trayTitleInUI + " is present in " + tab + " page");
						titleDisplayed = true;
					}
					if (trayTitle.equals("Shows")) {
						try {
							// handle mandatory pop up
							mandatoryRegistrationPopUp(userType);
							getWebDriver().findElement(PWALandingPages.objFirstAssetInTrayIndex(trayTitleInUI)).click();
							found = true;
						} catch (Exception e) {
						}
					} else {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						try {
							JSClick(PWALandingPages.objFirstAssetInTrayIndex(trayTitleInUI), "First Asset");
							if (!userType.equals("SubscribedUser")) {
								try {
									getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
								} catch (Exception e) {
								}
							}
							found = true;
						} catch (Exception e1) {
						}
					}
					if (found == true) {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						waitTime(2000);
						return true;
					} else {
						scrollDownByY(150);
					}
				}
			}
			scrollDownByY(350);
			waitTime(5000);
			swipeCount++;
			logger.info("Scrolled down");
			extent.extentLogger("scrolled", "Scrolled down");
			if (swipeCount == noOfSwipes) {
				logger.error("Failed to locate reco tray " + trayTitle);
				extent.extentLoggerFail("failedToLocate", "Failed to locate reco card " + trayTitle);
				logger.error("Failed to locate first card");
				extent.extentLoggerFail("failedToLocate", "Failed to locate first card");
			}
		}
		return false;
	}

	public boolean swipeTillTrayAndClickFirstAssetType2(String userType, int noOfSwipes, String trayTitle,
			String message, String tab) throws Exception {
		int swipeCount = 0;
		String trayTitleInUI = "", temp = "";
		boolean found = false, titleDisplayed = false;
		List<WebElement> trays;
		ArrayList<String> titles = new ArrayList<String>();
		for (int i = 0; i <= noOfSwipes; i++) {
			trays = new ArrayList<WebElement>();
			trays = getWebDriver().findElements(PWALandingPages.objTrayTitle);
			for (int tr = 0; tr < trays.size(); tr++) {
				try {
					titles.add(trays.get(tr).getAttribute("innerText"));
				} catch (Exception e) {
				}
			}
			for (int traycount = 0; traycount < titles.size(); traycount++) {
				temp = titles.get(traycount);
				if (temp.toLowerCase().contains(trayTitle.toLowerCase())) {
					trayTitleInUI = temp;
					if (!titleDisplayed) {
						logger.info(trayTitleInUI + " is present in " + tab + " page");
						extent.extentLogger("trayfound", trayTitleInUI + " is present in " + tab + " page");
						titleDisplayed = true;
					}
					if (trayTitle.equals("Shows")) {
						try {
							// handle mandatory pop up
							mandatoryRegistrationPopUp(userType);
							getWebDriver().findElement(PWALandingPages.objFirstAssetInTrayIndexType2(trayTitleInUI))
									.click();
							found = true;
						} catch (Exception e) {
						}
					} else {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						try {
							JSClick(PWALandingPages.objFirstAssetInTrayIndexType2(trayTitleInUI), "First Asset");
							if (!userType.equals("SubscribedUser")) {
								try {
									getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
								} catch (Exception e) {
								}
							}
							found = true;
						} catch (Exception e1) {
						}
					}
					if (found == true) {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						waitTime(2000);
						return true;
					} else {
						scrollDownByY(150);
					}
				}
			}
			scrollDownByY(350);
			waitTime(5000);
			swipeCount++;
			logger.info("Scrolled down");
			extent.extentLogger("scrolled", "Scrolled down");
			if (swipeCount == noOfSwipes) {
				logger.error("Failed to locate reco tray " + trayTitle);
				extent.extentLoggerFail("failedToLocate", "Failed to locate reco card " + trayTitle);
				logger.error("Failed to locate first card");
				extent.extentLoggerFail("failedToLocate", "Failed to locate first card");
			}
		}
		return false;
	}

	public void verifyRecoTraysFromDetailsPage(String userType, String firstAssetID) throws Exception {
		Response recoResp = ResponseInstance.getRecoTraysInDetailsPage(userType, firstAssetID);
		ArrayList<String> recoTraysInDetailsPage = getAllRecoTraysFromDetails(recoResp);
		String trayTitleUI = "", title = "";
		for (int tray = 0; tray < recoTraysInDetailsPage.size(); tray++) {
			String trayTitleAPI = recoTraysInDetailsPage.get(tray);
			trayTitleUI = swipeTillTray(5, trayTitleAPI, "\"" + trayTitleAPI + "\" tray");
			if (tray == 0 && !trayTitleUI.equals("")) {// Verify content play for one reco tray in content details
				try {
					title = getWebDriver().findElement(PWALandingPages.objFirstAssetInTrayTitle(trayTitleUI))
							.getAttribute("data-minutelytitle").toString();
				} catch (Exception e) {
				}
				// handle mandatory pop up
				mandatoryRegistrationPopUp(userType);
				waitForElementAndClick(PWALandingPages.objFirstAssetInTrayIndex(trayTitleAPI), 5,
						"First asset " + title);
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
				String nextPageTitle = "";
				if (waitForElementPresence(PWAShowsPage.objShowsTitle, 2, "Shows Details page")) {
					nextPageTitle = getText(PWAShowsPage.objShowsTitle);
				} else if (waitForElementPresence(PWAPlayerPage.objContentTitleInConsumptionPage, 2, "Player screen")) {
					nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				}
				if (nextPageTitle.equals(title)) {
					logger.info("Navigated to the correct consumption/details page: \"" + title + "\"");
					extent.extentLogger("playerScreen",
							"Navigated to the correct consumption/details page: \"" + title + "\"");
				} else {
					logger.error("Failed to navigate to consumption/details page: \"" + title + "\"");
					extent.extentLoggerFail("playerScreen",
							"Failed to navigate to consumption/details page: \"" + title + "\"");
				}
				Back(1);
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
			}
		}
	}

	public ArrayList<String> getAllRecoTraysFromDetails(Response response) {
		int numberOfTrays = 0;
		ArrayList<String> recoTrays = new ArrayList<String>();
		try {
			numberOfTrays = response.jsonPath().get("buckets.size()");
		} catch (Exception e) {
			logger.error("API error observed");
			extent.extentLoggerFail("apValue", "API error observed");
			return null;
		}
		for (int tray = 0; tray < numberOfTrays; tray++) {
			recoTrays.add(response.jsonPath().get("buckets[" + tray + "].title").toString());

		}
		logger.info("Reco trays in details page fetched from API: " + recoTrays);
		extent.extentLogger("apValue", "Reco trays in details page fetched from API: " + recoTrays);
		return recoTrays;
	}

	public String swipeTillTray(int noOfSwipes, String trayTitle, String message) throws Exception {
		boolean foundTray = false;
		int i = 0, j = 0;
		String trayTitleInUI = "";
		main: for (i = 0; i <= noOfSwipes; i++) {
			ArrayList<WebElement> trays = new ArrayList<WebElement>();
			trays = (ArrayList<WebElement>) getWebDriver().findElements(PWALandingPages.objTrayTitle);
			for (int traycount = 0; traycount < trays.size(); traycount++) {
				if (trays.get(traycount).getAttribute("innerText").equalsIgnoreCase(trayTitle)) {
					trayTitleInUI = trays.get(traycount).getText();
					foundTray = true;
					break main;
				}
			}
			scrollDownByY(200);
			waitTime(2000);
			logger.info("Scrolled down");
			extent.extentLogger("scrolled", "Scrolled down");
			if (i == noOfSwipes) {
				logger.error(message + " is not displayed");
				extent.extentLoggerFail("failedToLocate", message + " is not displayed");
			}
		}
		if (foundTray == true) {
			for (j = i; j <= noOfSwipes; j++) {
				if (waitForElementPresence(PWALandingPages.objTrayTitleInUI(trayTitleInUI), 1,
						trayTitleInUI + " tray")) {
					break;
				} else {
					scrollDownByY(150);
					waitTime(2000);
					logger.info("Scrolled down");
					extent.extentLogger("scrolled", "Scrolled down");
					if (j == noOfSwipes) {
						logger.error(message + " is not displayed");
						extent.extentLoggerFail("failedToLocate", message + " is not displayed");
					}
				}
			}
		}
		if (!trayTitleInUI.equals("")) {// Scroll till first card of the tray
			for (int k = j; k <= noOfSwipes; k++) {
				try {
					getWebDriver().findElement(PWALandingPages.objFirstAssetInTrayIndex(trayTitleInUI));
					logger.info("Located first asset under " + trayTitleInUI);
					extent.extentLogger("firstAsset", "Located first asset under " + trayTitleInUI);
					scrollDownByY(150);
					return trayTitleInUI;
				} catch (Exception e) {
					scrollDownByY(150);
					waitTime(2000);
					logger.info("Scrolled down");
					extent.extentLogger("scrolled", "Scrolled down");
				}
			}
		}
		return "";
	}

	public void watchlistCheck(String userType) throws Exception {
		watchlistMovies("Gooli", userType);
		watchlistEpisode("Anika tries to be careful", userType);
		watchlistVideo("Top 10 funny life", userType);
		watchlistMusic("Yennenu soda", userType);
	}

	public void watchlistMovies(String text, String userType) throws Exception {
		extent.HeaderChildNode("Validation of Watchlist icon in Movies Consumption Page for " + userType + " User");
		click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, text, "Search field");
		waitTime(5000);
		click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(text), "Search Result");
		waitTime(8000);
		if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
			click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
		}
		if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
			logger.info("Watchlist button is displayed in movie consumption page");
			extent.extentLogger("Watchlist", "Watchlist button is displayed in movie consumption page");
			if (userType.equals("Guest")) {
				click(PWAPlayerPage.watchListBtn, "Watchlist");
				checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
						"When guest user tries to click on watchlist login popup");
				click(PWAPlayerPage.watchListLoginPopupCloseButton, "Close button in popup");
			}
			click(PWAHomePage.objZeelogo1, "Zee logo");
		}

	}

	public void watchlistEpisode(String text, String userType) throws Exception {
		extent.HeaderChildNode("Validation of Watchlist icon in Episode Consumption Page for " + userType + " User");
		click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, text, "Search field");
		waitTime(5000);
		click(PWASearchPage.objAssetTitleSearchNavigationTab, "Episode");
		waitTime(8000);
		if (checkElementDisplayed(PWASearchPage.objMandatoryPopup, "SignIn popup")) {
			click(PWASearchPage.objMandatoryPopupCloseButton, "close button");
		}
		if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
			logger.info("Watchlist button is displayed in Episode consumption page");
			extent.extentLogger("Watchlist", "Watchlist button is displayed in Episode consumption page");
			if (userType.equals("Guest")) {
				click(PWAPlayerPage.watchListBtn, "Watchlist");
				checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
						"When guest user tries to click on watchlist login popup");
				click(PWAPlayerPage.watchListLoginPopupCloseButton, "Close button in popup");
			}
			click(PWAHomePage.objZeelogo1, "Zee logo");
		}

	}

	public void watchlistVideo(String text, String userType) throws Exception {
		extent.HeaderChildNode("Validation of Watchlist icon in Video Consumption Page for " + userType + " User");
		click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, text, "Search field");
		waitTime(5000);
		click(PWASearchPage.objAssetTitleSearchNavigationTab, "Video");
		waitTime(8000);
		if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
			click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
		}
		if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
			logger.info("Watchlist button is displayed in Video consumption page");
			extent.extentLogger("Watchlist", "Watchlist button is displayed in Video consumption page");
			if (userType.equals("Guest")) {
				click(PWAPlayerPage.watchListBtn, "Watchlist");
				checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
						"When guest user tries to click on watchlist login popup");
				click(PWAPlayerPage.watchListLoginPopupCloseButton, "Close button in popup");
			}
			click(PWAHomePage.objZeelogo1, "Zee logo");
		}

	}

	public void watchlistMusic(String text, String userType) throws Exception {
		extent.HeaderChildNode("Validation of Watchlist icon in Music Consumption Page for " + userType + " User");
		click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, text, "Search field");
		waitTime(5000);
		click(PWASearchPage.objAssetTitleSearchNavigationTab, "Music");
		waitTime(8000);
		if (checkElementDisplayed(PWASearchPage.objMandatoryPopup, "SignIn popup")) {
			click(PWASearchPage.objMandatoryPopupCloseButton, "close button");
		}
		if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
			logger.info("Watchlist button is displayed in Music consumption page");
			extent.extentLogger("Watchlist", "Watchlist button is displayed in Music consumption page");
			if (userType.equals("Guest")) {
				click(PWAPlayerPage.watchListBtn, "Watchlist");
				checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
						"When guest user tries to click on watchlist login popup");
				click(PWAPlayerPage.watchListLoginPopupCloseButton, "Close button in popup");
			}
			click(PWAHomePage.objZeelogo1, "Zee logo");
		}

	}

	public void mouseHoverWatchlist() {
		Actions action = new Actions(getWebDriver());
		WebElement player = getWebDriver().findElement(PWAAddToWatchListPage.objFirstContentInWatchlist);
		action.moveToElement(player).build().perform();
	}

	public void Watchlistlogin(String userType, String searchText) throws Exception {
		extent.HeaderChildNode("Logging in as " + userType + " user on clicking Add to Watchlist icon");
		click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, searchText, "Search field");
		waitTime(5000);
		click(PWASearchPage.objAssetTitleSearchNavigationTab, "Movie");
		waitTime(8000);
		if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
			click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
		}
		if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
			logger.info("Watchlist button is displayed in movie consumption page");
			extent.extentLogger("Watchlist", "Watchlist button is displayed in movie consumption page");
			click(PWAPlayerPage.watchListBtn, "Watchlist");
			checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
					"When guest user tries to click on watchlist login popup");
			click(PWAPlayerPage.watchListLoginButton, "Login button");
			if (userType.equals("NonSubscribe")) {
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, NonSubUsername, "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, NonSubPassword, "Password field");

				waitTime(5000);
				click(PWALoginPage.objWebLoginButton, "Login Button");
				waitTime(5000);
				if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
					click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
				}
			} else if (userType.equals("Subscribe")) {
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, SubUsername, "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, SubPassword, "Password field");

				waitTime(5000);
				click(PWALoginPage.objWebLoginButton, "Login Button");
				waitTime(5000);
			}
			waitTime(5000);
			String contentName2 = getElementPropertyToString("innerText", PWAPlayerPage.objContentName, "Title");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
			waitTime(3000);
			click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
			if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
				click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
			}
			waitTime(3000);
			click(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
			String ContentNameAddedToWatchlist = null;

			List<WebElement> contentsInWatchlist = findElements(
					By.xpath("(//h3[contains(@class,'cardTitle overflowEllipsis')]//a)"));
			ArrayList<String> ContentNameInWatchlist = new ArrayList<String>();
			for (int i = 0; i < contentsInWatchlist.size(); i++) {
				ContentNameInWatchlist.add(contentsInWatchlist.get(i).getText());
			}
			for (int i = 0; i < ContentNameInWatchlist.size(); i++) {

				if (contentName2.equals(ContentNameInWatchlist.get(i))) {
					ContentNameAddedToWatchlist = ContentNameInWatchlist.get(i);
				}
			}
			if (contentName2.equals(ContentNameAddedToWatchlist)) {
				extent.extentLogger("Verify Watchlist", "Added content is displayed in Watchlist screen");
				logger.info("Added content is displayed in Watchlist screen");
			} else {
				extent.extentLoggerFail("Verify Watchlist", "Added content is not displayed in Watchlist screen");
				logger.info("Added content is not displayed in Watchlist screen");
			}
		}
		click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, searchText, "Search field");
		waitTime(5000);
		click(PWASearchPage.objAssetTitleSearchNavigationTab, "Movie");
		waitTime(5000);
		if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
			click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
		}
		String contentName2 = getElementPropertyToString("innerText", PWAPlayerPage.objContentName, "Title");
		click(PWAPlayerPage.watchListBtn, "Watchlist");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
		click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		click(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
		if (!checkElementDisplayed(PWAAddToWatchListPage.objTooltip(contentName2), "Added movie")) {
			logger.info(
					"Content is removed from My Watchlist when user taps on highlighted watchlist button in consumption page");
			extent.extentLogger("Watchlist",
					"Content is removed from My Watchlist when user taps on highlighted watchlist button in consumption page");
		}
		click(PWAHomePage.objZeelogo1, "Zee logo");
		logout();
	}

	public void registerandCheckCW() throws Exception {
		extent.HeaderChildNode("Registering as new user and checking Continue Watching Tray");
		click(PWALoginPage.objSignUpBtnWEB, "Sign up button");
		waitTime(3000);
		waitForElementDisplayed(PWALoginPage.objSignUpHeaderInSignUpPageWeb, 10);
		checkElementDisplayed(PWALoginPage.objSignUpHeaderInSignUpPageWeb, "SignUp Page");

		checkElementDisplayed(PWALoginPage.objEmailField, "Email/PhoneNo Field");

		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, RandomStringGenerator(5) + "@gmail.com", "Email Field");

		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, NonSubPassword, "Password field");
		calenderFunctionality();
		click(PWASignupPage.objGenderMaleBtn, "Gender Option");
		waitTime(5000);
		click(PWASignupPage.objSignUpButtonHighlightedWeb, "Sign up Button");
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue Watching tray") == false) {
			extent.extentLogger("Verify Continue Watching tray",
					"Continue watching tray is not displayed for guest user");
			logger.info("Continue watching tray is not displayed for guest user");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify Continue Watching tray",
					"Continue watching tray is displaying for guest user");
			logger.info("Continue watching tray is displaying for guest user");
		}
		logout();
	}

	public void audioTrackSelection() throws Exception {
		HeaderChildNode("Audio Track Functionality");
		click(PWAHomePage.objZeelogo1, "Zee logo");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, audioTrackContent + "\n", "Search");
		waitTime(5000);
//		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(audioTrackContent), "Search Result");
		click(PWASearchPage.objspecificSearch, "Searched content");
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		click(PWAPlayerPage.settingsBtn, "Settings icon");
		click(PWAPlayerPage.objPlayerAudioTrackIcon, "Audio Track icon");
		waitTime(5000);
		int size = getWebDriver().findElements(PWAPlayerPage.objPlayerAudioTracksAvailable).size();
		if (size == 0) {
			logger.info("Audio Tracks unavailable");
			extent.extentLogger("quality", "Audio Tracks unavailable");
		} else {
			for (int i = 1; i <= size; i++) {
				logger.info("Audio Tracks available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
				extent.extentLogger("audio", "Audio Tracks available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
			}
			// Select audio tracks
			List<WebElement> unselected = findElements(PWAPlayerPage.objPlayerUnSelectedAudioTrack);
			ArrayList<String> tracks = new ArrayList<String>();
			for (int i = 0; i < unselected.size(); i++) {
				tracks.add(unselected.get(i).getText());
			}
			for (int i = 0; i < tracks.size(); i++) {
				String selectedTrackBefore = getText(PWAPlayerPage.objPlayerSelectedAudioTrack);
				logger.info("Audio Track before selection: " + selectedTrackBefore);
				extent.extentLogger("quality", "Audio Track before selection: " + selectedTrackBefore);
				String track = tracks.get(i);
				waitTime(5000);
				click(PWAPlayerPage.objPlayerUnSelectedAudioTrack(track), "Audio Track " + track);
				waitTime(3000);
				click(PWAPlayerPage.settingsBtn, "Settings icon");
				waitTime(3000);
				click(PWAPlayerPage.objPlayerAudioTrackIcon, "Audio Track icon");
				waitTime(3000);
				String selectedTrackAfter = getElementPropertyToString("innerText",
						PWAPlayerPage.objPlayerSelectedAudioTrack, "Selected Audio Track");
				logger.info("Audio Track after selection : " + selectedTrackAfter);
				extent.extentLogger("quality", "Quality option after selection: " + selectedTrackAfter);
				if (selectedTrackBefore.equals(selectedTrackAfter)) {
					logger.error("Audio Track selection unsuccessful");
					extent.extentLoggerFail("quality", "Audio Track selection unsuccessful");
				} else {
					logger.info("Audio Track selection successful");
					extent.extentLogger("quality", "Audio Track selection successful");
				}
			}
		}
	}

	@SuppressWarnings("unused")
	public void trayTitleAndContentValidationWithApiDataNews(String tab, String api) throws Exception {

		extent.HeaderChildNode(tab + " page validation with Api response");
		navigateToAnyScreenOnWeb(tab);
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(menuOption).build().perform();

		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		List<WebElement> card = getWebDriver().findElements(By.xpath("((//div[@class='slick-list'])[2]//img)"));
		System.out.println(card.size());
		for (int i = 0; i < card.size(); i++) {
			// API DATA
			String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			String businessType = resp.jsonPath().getString("buckets[1].items[" + i + "].business_type");

			apiTitleList.add(title);
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();

			// to get metadata from content
			String contentMetadata = getAttributValue("title",
					By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));

			// String trayTitle = apiTitleList.get(i);
			logger.info("UI data " + title);
			logger.info("API data " + apiTitleList.get(i));
			extent.extentLogger("API data ", "API data " + apiTitleList.get(i));
			waitTime(2000);
			extent.extentLogger("UI data ", "UI data " + contentMetadata);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Icon")) {
				logger.info("Play icon is displayed");
				extent.extentLogger("Play", "Play icon is displayed");
			} else {
				logger.info("Play icon is not displayed");
				extent.extentLogger("Play", "Play icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Icon")) {
				logger.info("Share icon is displayed");
				extent.extentLogger("Share", "Share icon is displayed");
			} else {
				logger.info("Share icon is not displayed");
				extent.extentLogger("Share", "Share icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardWatchlistBtn, "Watchlist Icon")) {
				logger.info("Watchlist icon is displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is displayed");
			} else {
				logger.info("Watchlist icon is not displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is not displayed");
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void launchCheck(String userType) throws Exception {
		HeaderChildNode("Verify after launch user can see signup/login option");
		if (userType.equals("Guest")) {
//			if (checkElementDisplayed(PWALoginPage.objSignUpBtnWEB, "Sign Up button")) {
//				logger.info("Guest user can see Sign Up option after launch");
//				extentLoggerPass("Launch", "Guest user can see Sign Up option after launch");
//			} else {
//				logger.error("Guest user cannot see Sign Up option after launch");
//				extentLoggerFail("", "Guest user should see Sign Up option after launch");
//			}
			if (checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login button")) {
				logger.info("Guest user can see Login option after launch");
				extentLoggerPass("Launch", "Guest user can see Login option after launch");
			} else {
				logger.error("Guest user cannot see Login option after launch\"");
				extentLoggerFail("", "Guest user should see Login option after launch");
			}
		}
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			if (!checkElementDisplayed(PWALoginPage.objSignUpBtnWEB, "Sign up button")) {
				logger.info(userType + "cannot see option signup after launch");
				extentLoggerPass("Launch", userType + "cannot see option signup after launch");
			} else {
				logger.info("User should not see Sign Up option after launch");
				extentLoggerFail("", "User should not see Sign Up option after launch");
			}
			if (!checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login button")) {
				logger.info(userType + "cannot see option login after launch");
				extentLoggerPass("Launch", userType + "cannot see option login after launch");
			} else {
				logger.info("User should not see Login option after launch");
				extentLoggerFail("", "User should not see Login option after launch");
			}
		}
	}

	/**
	 * Author : Lakshmi
	 */
	public void landingPagesValidationclub(String tabName) throws Exception {
		extent.HeaderChildNode(tabName + "Pages Validation");
		verifyElementPresentAndClick(PWAHomePage.objTabName(tabName), tabName);
		// waitTime(5000);
		String tab = getText(PWAHomePage.objActiveTab);
		System.out.println(tab);
		logger.info(tab + " tab is highlighted");
		extent.extentLogger("Tab", tab + " tab is highlighted");

		for (int i = 1; i <= 2; i++) {
			if (checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray")) {
				System.out.println("Tray is loaded for " + i + " scroll");
				logger.info("Tray is loaded for " + i + " scroll");
				extent.extentLogger("Tray load", "Tray is loaded for " + i + " scroll");
			} else {
				ScrollToTheElement(PWAPremiumPage.objTrayTitle(i));
				checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray");
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		// check if tray is loaded
		scrollDownWEB();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(5000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		waitTime(2000);

		waitTime(2000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		waitTime(3000);
		Back(1);
		waitTime(4000);
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAMusicPage.objclubTag).size() > 0) {
				logger.info("club tag is displayed");
				extent.extentLogger("club Tag", "club Tag is displayed");
				break;
			} else {
				logger.info("club tag is not displayed");
				extent.extentLogger("club Tag", "club Tag is not displayed");
				partialScroll();
			}
		}
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAPremiumPage.objMinuteContent).size() > 0) {
				logger.info("Minute content is displayed");
				extent.extentLogger("Minute content", "Minute content is displayed");
				break;

			} else {
				logger.info("Minute content is not displayed");
				extent.extentLogger("Minute content", "Minute content is not displayed");
				partialScroll();
			}
		}
		partialScroll();
		partialScroll();
		verifyElementPresentAndClick(PWAMusicPage.objArrowToNavigateTop, "Back to Top arrow");
		// waitTime(2000);
		click(PWAHomePage.objZeelogo1, "Zee Logo");
	}

	public void trayTitleAndContentValidationWithApiDataClub(String tab, String api) throws Exception {
		extent.HeaderChildNode(tab + " page tray asset validation");
		waitTime(5000);
		getWebDriver().findElement(By.xpath("(//a[contains(@class,'noSelect')][contains(text(),'" + tab + "')])[1]"))
				.click();
		// waitTime(7000);
		// navigateToAnyScreenOnWeb(tab);
		waitForElementDisplayed(PWAMusicPage.objPremiumTag, 30);
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		for (int i = 0; i < 5; i++) {
			String titles = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			// System.out.println("Api data " +titles);
			logger.info("Api data " + titles);
			extent.extentLogger("Api data ", "Api data " + titles);
			apiTitleList.add(titles);
			Actions actions = new Actions(getWebDriver());
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();
			String trayTitle = apiTitleList.get(i);
			logger.info("UI data " + titles);
			extent.extentLogger("UI data ", "UI data " + titles);
			if (trayTitle.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.info("Metadata on the content card is not validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is not validated with Api data");
			}
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Button");
			waitTime(1000);
			verifyElementEnabled(PWAPremiumPage.objContentCardWatchlistBtn, "Add to Watchlist Button");
		}
	}

	public void landingPagesTrailerAndPopUpValidationClub(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(tabName + "Page Carousel Validation");

		waitTime(5000);

		getWebDriver()
				.findElement(By.xpath("(//a[contains(@class,'noSelect')][contains(text(),'" + tabName + "')])[1]"))
				.click();
		waitTime(7000);
		// verifyElementPresentAndClick(PWAHomePage.objTabName(tabName), tabName);
		// waitTime(5000);
		waitForElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, 10);
		checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		mandatoryRegistrationPopUp(userType);
		click(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		waitTime(5000);
		if (BROWSER.equals("Firefox")) {
			waitForPlayerLoaderToComplete();
		}
		if (checkElementDisplayed(PWAPlayerPage.objPlayer, "player screen")) {
			logger.info("User is navigated to consumption page after tapping on content in listed collection");
			extent.extentLogger("Consumption page",
					"User is navigated to consumption page after tapping on content in listed collection");
		}
		checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup");
		checkElementDisplayed(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen,
				"Subscribe CTA with Club Icon below the Player");
		checkElementDisplayed(PWAPremiumPage.objSubscribeNowAndGoAdFree, "Subscribe Now And Go Ad Free Message");
		if (userType.contains("NonSubscribedUser") || (userType.contains("Guest"))) {

			if (checkElementDisplayed(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
				mandatoryRegistrationPopUp(userType);
				JSClick(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
				waitTime(10000);
				if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
					verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");

				}
			} else {
				logger.info("Trailer is not available for the selected content");
				extent.extentLogger("Trailer", "Trailer is not available for the selected content");
				if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
					verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
				}
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		Playverification(userType);
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {

			extent.HeaderChildNode("Verification of buttons in other display language (PWA2_4352)");

			verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(2000);
			clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedKannadaContentLanguage);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton,
					"Apply button on content language screen");
			waitTime(3000);
			navigateToAnyScreenOnWeb("ಕ್ಲಬ್");
			// verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply
			// button on content language screen");
			// waitForElementAndClick(PWAHamburgerMenuPage.objgetclubinKannada, 20, "Get
			// club");
			verifyElementPresent(PWAHamburgerMenuPage.objgetclubinKannada, "Get club in kannada");
			JSClick(PWAHamburgerMenuPage.objgetclubinKannada, "Get club in kannada");
			waitTime(5000);
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
			verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(2000);

			clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedEnglishContentLanguage);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton,
					"Apply button on content language screen");
		}
	}

	public void Playverification(String userType) throws InterruptedException, Exception {

		if (userType.equalsIgnoreCase("Guest"))

		{
			extent.HeaderChildNode("Before TV content play verification (PWA24_423)");
			navigateToAnyScreenOnWeb("Club");
			Actions actions = new Actions(getWebDriver());
			WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
			actions.moveToElement(menuOption).build().perform();
			waitTime(5000);
			if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"),
					"First Content Card Of Before TV Tray")) {
				click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
				waitTime(10000);
				String a = getText(PWAHamburgerMenuPage.objeposidedate);
				System.out.println(a);
				// Boolean.parseBoolean(a);
				waitForElement(PWASubscriptionPages.objGetPremiumPopupTitle, 40, "Get Premium Popup Title");
				waitTime(2000);
				checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title");
				waitTime(2000);
				verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
				waitTime(2000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPopup99Plan, "99 Plan in Popup");
				waitTime(2000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Popup Proceed Button");

				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, "sharath@mailnesia.com", "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objproceedbtn, "Proceed button");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, "sharathdv", "Password field");
				waitTime(5000);
				click(PWAHamburgerMenuPage.objproceed2btn, "Proceed button");
				waitTime(3000);

				if (waitForElement(PWASubscriptionPages.objUpgradePopupTitle, 20, "Subscribe Pop Up")) {

					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");

				}
				String b = getText(PWAHamburgerMenuPage.objeposidedate);
				System.out.println(b);
				// Boolean.parseBoolean(b);
				if (a.equalsIgnoreCase(b)) {
					logger.info(" Navigated to Before tv eposide");
					extent.extentLogger("", " Navigated to Before tv eposide");
				} else {
					logger.info("Not Navigated to Before tv eposide");
					extent.extentLoggerFail("", "Not Navigated to Before tv eposide");
				}
				logout();
			}
		}
	}

	public void popupvalidationforCTAClubAnsPremium(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(tabName + " page Carousel validation");
		checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarouselgetclub, "Get Club on carousel banner");
		checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarouselPlay, "Play button  on carousel banner");

		if (userType.equals("SubscribedUser")) {

			if (tabName.equals("Club")) {
				logout();
				extent.HeaderChildNode("Login as club User");
				// String SubscribedUsername =
				// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedUserName");
				// String SubscribedPassword =
				// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedPassword");
				verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, "testzee5_6@gmail.com", "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, "123456", "Password field");
				waitTime(5000);
				click(PWALoginPage.objWebLoginButton, "Login Button");
				waitTime(3000);
				verifyElementExist(PWAZee5OriginalPage.objWEBMastheadCarouselPlay, "Play button  on carousel banner");
				logout();
				ZeeWEBPWALogin(userType);
				// verifyElementExist(PWAZee5OriginalPage.objWEBMastheadCarouselPlay, "Play
				// button on carousel banner");
				checkElementDisplayed(PWAHomePage.objSearchBtn, "Search button");
				click(PWAHomePage.objSearchBtn, "Search button");
				type(PWASearchPage.objSearchEditBox, "Bebaakee ", "Search field");
				click(PWASearchPage.objspecificSearch, "Searched content");
				if (checkElementDisplayed(PWAHomePage.objKalGetFirstEpisode, "Get First Episode")) {
					click(PWAHomePage.objKalGetFirstEpisodePlayicon, "Play Button");
				}
			}
			if (tabName.equals("Premium")) {
				// verifyElementExist(PWAZee5OriginalPage.objWEBMastheadCarouselPlay, "Play
				// button on carousel banner");
				checkElementDisplayed(PWAHomePage.objSearchBtn, "Search button");
				click(PWAHomePage.objSearchBtn, "Search button");
				type(PWASearchPage.objSearchEditBox, "Abhay ", "Search field");
				click(PWASearchPage.objspecificSearch, "Searched content");
				if (checkElementDisplayed(PWAHomePage.objKalGetFirstEpisode, "Get First Episode")) {
					click(PWAHomePage.objKalGetFirstEpisodePlayicon, "Play Button");
				}
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void validatingEduaraa(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(tabName + " page validation ");
		navigateToAnyScreenOnWeb("Kids");
		verifyElementExist(PWAHomePage.objTrayName, "EDR content ");

		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
		checkElementDisplayed(PWAPremiumPage.objTrayTitle(2), "Tray");
		actions.moveToElement(menuOption).perform();

		click(PWAShowsPage.objEpisodeCard, "First  Card");
		waitTime(5000);
		if (userType.contains("Guest")) {
			mandatoryRegistrationPopUp(userType);
			if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
				click(PWASearchPage.objCloseRegisterDialog, "Close Button");
			} else {
				logger.info("Why Register pop up is not displayed");
			}
		}
		if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
			verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
		}
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Not navigated to Consumption Page");
		}

	}

	public void validatingclaimCTA(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("validation claim CTA below the player");
		navigateToAnyScreenOnWeb("Kids");
		checkElementDisplayed(PWAHomePage.objTrayName, "EDR content ");
		
		waitTime(5000);
		verifyElementPresentAndClick(PWAHomePage.objFirstItemLearnWithEduauraaTray,
				"First card under Learn with Eduauraa tray");
		verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in View All page");
		String consumptionPageTitle = getText(PWAPlayerPage.objContentTitle);
		extent.extentLogger("", "Navigated to the Consumption page: " + consumptionPageTitle);
		logger.info("Navigated to the Consumption page: " + consumptionPageTitle);
		pausePlayer();
		waitTime(3000);
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			checkElementDisplayed(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer");
			extent.HeaderChildNode(
					"HLS_118: Verify on tapping on Claim offer CTA user should navigates to Select pack page.");
			click(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer");
			waitTime(3000);
			if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.info("Navigated to select pack Page");
				extent.extentLogger("Zee5 Subscription Page", "Navigated to select pack Page");
			} else {
				logger.info("Not navigated to select pack Page");
				extent.extentLoggerFail("Zee5 Subscription Page", "Not navigated to select pack Page");
			}
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		
		
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) 
		{
			extent.HeaderChildNode("Back button navigation verification (PWA2-4161)");
			navigateToAnyScreenOnWeb("Kids");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
			
			type(PWASearchPage.objSearchEditBox, "The Properties Of Magnetic Field ", "Search bar");
			waitTime(3000);
			verifyElementPresent(PWASearchPage.objfirstdata, "Searched result");
			waitTime(3000);
			click(PWASearchPage.objfirstdata, "Searched result");
			waitTime(3000);
			checkElementDisplayed(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer ");
			click(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer ");
			if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title")) {
				logger.info("Navigated to select pack Page");
				extent.extentLogger(" Zee5 Subscription Page", "Navigated to select pack Page");
			} else {
				logger.info("Not navigated to select pack Page");
				extent.extentLogger("Zee5 Subscription Page", "Not navigated to select pack Page");
			}
			Back(1);
			Back(1);
			waitTime(10000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Navigated back to the Eduauraa consumption page.");
				extent.extentLogger("Consumption Page", "Navigated back to the Eduauraa consumption page.");
			} else {
				logger.info("Not navigated back to the Eduauraa consumption page.");
				extent.extentLoggerFail("Consumption Page", "Not navigated back to the Eduauraa consumption page.");//update
			}

		
		}

		//verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		if (userType.equals("SubscribedUser")) {
			navigateToAnyScreenOnWeb("Kids");
		extent.HeaderChildNode("Eduauraa site navigation verification (PWA2_4311) ");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		
		type(PWASearchPage.objSearchEditBox, "The Properties Of Magnetic Field ", "Search bar");
		waitTime(3000);
		verifyElementPresent(PWASearchPage.objfirstdata, "Searched result");
		waitTime(3000);
		click(PWASearchPage.objfirstdata, "Searched result");
		waitTime(3000);
		
			checkElementDisplayed(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer ");
			click(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer ");
			checkElementDisplayed(PWAPlayerPage.objContinue, "Continue offer ");
			click(PWAPlayerPage.objContinue, "Continue offer ");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objEduauraaSignupPage, "EduauraaSign Up page")) {
				logger.info("User is navigated to EduauraaSign Up page");
				extent.extentLogger("Contact Us", "User is navigated to EduauraaSign Up page");
			} else {
				logger.info("Not navigated to EduauraaSign Up Page");
				extent.extentLoggerFail("Zee5 Subscription Page", "Not navigated to EduauraaSign Up Page");
			}
			Back(1);
			Back(1);
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		//Back(1);
		extent.HeaderChildNode("Play CTA validation on carousel (PWA2_4342)");
		navigateToAnyScreenOnWeb(tabName);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.Objnextarrowcarousel, "Next arrow ");
		waitTime(3000);
		
		verifyElementPresent(PWAKidsPage.objPlayButton, "Play text on Carousel card");

	}

	public void VerifyCTA(String userType) throws Exception {
		String clubShow = getParameterFromXML("clubShow");
		String premiumShow = getParameterFromXML("premiumShow");
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User: Verify Get Club CTA on Carousel banner for club content");
			navigateToAnyScreenOnWeb("Club");
			waitForElementPresence(PWAHomePage.objGetClubCta, 10, "\"Get Club\" CTA on Carousel banner");
			extent.HeaderChildNode("Guest User: Verify Get Premium CTA on Carousel banner for premium content");
			navigateToAnyScreenOnWeb("Premium");
			waitForElementPresence(PWAHomePage.objGetPremiumCta, 10, "\"Get Premium\" CTA on Carousel banner");
			extent.HeaderChildNode("Guest User: Verify Get Club CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAShowsPage.objGetClubCTAInShowDetails,
					"\"Get Club\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode("Guest User: Verify Get Premium CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAShowsPage.objGetPremiumCTAInShowDetails,
					"\"Get Premium\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			// Login with club user
			extent.HeaderChildNode("Club User: Verify Play CTA on Carousel banner for club content");
			// loginWithUserEmail("testzee5_6@gmail.com","123456");
			loginWithUserEmail("edpwa4@mailnesia.com", "1234567");
			navigateToAnyScreenOnWeb("Club");
			verifyElementPresent(PWAHomePage.objPlayBtn, "\"Play\" CTA on Carousel banner");
			extent.HeaderChildNode("Club User: Verify Upgrade CTA on Carousel banner for premium content");
			navigateToAnyScreenOnWeb("Premium");
			verifyElementPresent(PWAHomePage.objUpgradeBtn, "\"Upgrade\" CTA on Carousel banner");
			extent.HeaderChildNode(
					"Club User: Verify Watch First Episode CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAHomePage.objKalGetFirstEpisode,
					"\"Watch first episode\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode("Club User: Verify Upgrade CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAShowsPage.objUpgradeCTAInShowDetails,
					"\"Upgrade\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			logout();
		}
		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Non Subscribed User: Verify Get Club CTA on Carousel banner for club content");
			navigateToAnyScreenOnWeb("Club");
			waitForElementPresence(PWAHomePage.objGetClubCta, 10, "\"Get Club\" CTA on Carousel banner");
			extent.HeaderChildNode(
					"Non Subscribed User: Verify Get Premium CTA on Carousel banner for premium content");
			navigateToAnyScreenOnWeb("Premium");
			waitForElementPresence(PWAHomePage.objGetPremiumCta, 10, "\"Get Premium\" CTA on Carousel banner");
			extent.HeaderChildNode("Non Subscribed User: Verify Get Club CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAShowsPage.objGetClubCTAInShowDetails,
					"\"Get Club\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode(
					"Non Subscribed User: Verify Get Premium CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAShowsPage.objGetPremiumCTAInShowDetails,
					"\"Get Premium\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			extent.HeaderChildNode("Subscribed User: Verify Play CTA on Carousel banner for club content");
			navigateToAnyScreenOnWeb("Club");
			verifyElementPresent(PWAHomePage.objPlayBtn, "\"Play\" CTA on Carousel banner");
			extent.HeaderChildNode("Subscribed User: Verify Play CTA on Carousel banner for premium content");
			navigateToAnyScreenOnWeb("Premium");
			verifyElementPresent(PWAHomePage.objPlayBtn, "\"Play\" CTA on Carousel banner");
			extent.HeaderChildNode(
					"Subscribed User: Verify Watch first episode CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAHomePage.objKalGetFirstEpisode,
					"\"Watch first episode\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode(
					"Subscribed User: Verify Watch first episode CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAHomePage.objKalGetFirstEpisode,
					"\"Watch first episode\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	public void loginWithUserEmail(String userid, String pwd) throws Exception {
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "" + userid, "Email Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "" + pwd, "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(3000);
	}

//==========================================================================
	public void trayTitleAndContentValidationWithApiDataHome(String tabName, String api) throws Exception {
		// extent.HeaderChildNode(" HLS_020 :User mouse hovered on any thumbnail/Content
		// metadata is displayed");
		waitTime(2000);
		getWebDriver()
				.findElement(By.xpath("(//a[contains(@class,'noSelect')][contains(text(),'" + tabName + "')])[1]"))
				.click();
		// waitTime(7000);
		// navigateToAnyScreenOnWeb(tab);
		waitForElementDisplayed(PWAMusicPage.objPremiumTag, 30);
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		for (int i = 0; i < 5; i++) {
			String titles = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			// System.out.println("Api data " +titles);
			logger.info("Api data " + titles);
			extent.extentLogger("Api data ", "Api data " + titles);
			apiTitleList.add(titles);
			Actions actions = new Actions(getWebDriver());
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();
			String trayTitle = apiTitleList.get(i);
			logger.info("UI data " + titles);
			extent.extentLogger("UI data ", "UI data " + titles);
			if (trayTitle.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.info("Metadata on the content card is not validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is not validated with Api data");
			}

			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Button");
			waitTime(1000);
			verifyElementEnabled(PWAPremiumPage.objContentCardWatchlistBtn, "Add to Watchlist Button");
		}
	}

	public void Homepagevalidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(" HLS_012 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		navigateToAnyScreenOnWeb("Home");
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(5000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(5000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + " second content title :"
				+ secondCarouselTitle + " and third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + " second content title :" + secondCarouselTitle
				+ " and third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}
		extent.HeaderChildNode(" HLS_020 :User mouse hovered on any thumbnail/Content metadata is displayed");
		trayTitleAndContentValidationWithApiDataHome(tabName, "home");

		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(" HLS_013 : Verify Metadata and CTA's in carousels.");
			if (tabName.equals("Premium")) {
				verifyElementPresent(PWAHamburgerMenuPage.objplay, "Play button ");
				verifyElementPresent(PWAHamburgerMenuPage.objGetpremium, "Get premium button ");
				verifyMetadataOnCarousel("Premium", "premiumcontents");
			}
			if (tabName.equals("Club")) {
				verifyElementPresent(PWAHamburgerMenuPage.objplay, "Play button ");
				verifyElementPresent(PWAHamburgerMenuPage.objClub, "Get club button");
				// verifyMetadataOnCarousel("Club", "");
			}
		}
		/*
		 * extent.HeaderChildNode(" HLS_014 : Verify The Rails are displayed");
		 * 
		 * waitTime(3000); scrollDownWEB();
		 * verifyElementPresent(PWAHamburgerMenuPage.objrail, "Rails");
		 * 
		 * extent.HeaderChildNode("HLS_018 : Verify that user is able to rotate tray");
		 * JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		 * logger.info("Tray is rotated"); extent.extentLogger("Tray is rotated",
		 * "Tray is rotated"); JSClick(PWAPremiumPage.objPreviousArrowBtn,
		 * "Previous Arrow Button"); waitTime(2000);
		 * 
		 * extent.HeaderChildNode("HLS_015 : Verify View All button functionality"); if
		 * (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
		 * click(PWAPremiumPage.objViewAllBtn, "View All Button"); waitTime(5000); if
		 * (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
		 * logger.info("Navigated to View All Page"); extent.extentLogger("View All",
		 * "Navigated to View All Page"); Back(1); } else {
		 * logger.info("Not navigated to View All Page");
		 * extent.extentLogger("View All", "Not navigated to View All Page"); } }
		 */

		extent.HeaderChildNode(" HLS_014 : Verify The Rails are displayed");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode("HLS_018 : Verify that user is able to rotate tray");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(1000);
		logger.info("Tray is rotated");
		extent.extentLogger("Tray is rotated", "Tray is rotated");
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");

		extent.HeaderChildNode("HLS_015 : Verify View All button functionality");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(5000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
				Back(1);
			} else {
				logger.error("Not navigated to View All Page");
				extent.extentLoggerFail("View All", "Not navigated to View All Page");
			}
		}

		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(" HLS_016 : Verify the Continue Watching tray is not displayed ");
			waitTime(3000);
			if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue Watching tray") == false) {
				extent.extentLogger("Verify Continue Watching tray",
						"Continue watching tray is not displayed for guest user");
				logger.info("Continue watching tray is not displayed for guest user");
			} else {
				softAssert.assertAll();
				extent.extentLoggerFail("Verify Continue Watching tray",
						"Continue watching tray is displaying for guest user");
				logger.info("Continue watching tray is displaying for guest user");
			}
		}

		extent.HeaderChildNode(" HLS_017 : Verify the premium tag for all premium content card");
		waitTime(3000);
		for (int i = 0; i < 10; i++) {
			if (getWebDriver().findElements(PWAHamburgerMenuPage.objpremiumcard).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Tag", "Premium Tag is isplayed");
				break;
			} else {
				scrollDownByY(300);
				if (i == 4) {
					logger.info("Premium tag is not displayed");
					extent.extentLogger("Tag", "Premium Tag is not displayed");
				}
			}
		}
		click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");

		extent.HeaderChildNode(" HLS_019 : Availability and functionality of play, watch-list, Share icons");
		Actions actions = new Actions(getWebDriver());
		WebElement contentCard = getWebDriver()
				.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[" + 2 + "]"));
		actions.moveToElement(contentCard).build().perform();
		waitTime(1000);
		checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
		JSClick(PWAPremiumPage.objContentCardPlayBtn, "Play Button");

		waitTime(1000);
		checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Button");
		JSClick(PWAPremiumPage.objContentCardShareBtn, "Share Button");
		Back(1);
		waitTime(1000);
		verifyElementEnabled(PWAPremiumPage.objContentCardWatchlistBtn, "Add to Watchlist Button");
		JSClick(PWAPremiumPage.objContentCardWatchlistBtn, "Add to Watchlist Button");
		if (userType.equalsIgnoreCase("Guest")) {
			if (checkElementDisplayed(PWAHomePage.objLoginRequiredPopUpHeader, "Login Required PopUp Header")) {
				extent.extentLogger(
						"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card",
						"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card for guest user");
				logger.info(
						"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card for guest user");
				click(PWAHomePage.objPopupCloseicon(), "Popup Close icon");

			} else {
				extent.extentLoggerFail(
						"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card",
						"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card");
				logger.info(
						"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card");
			}
		}

//		extent.HeaderChildNode(" HLS_021 : Verify the availability of the Footer section at bottom");
//		boolean found=false;
//		for(int i=0;i<30;i++) {			
//			if(checkElementDisplayed(PWAHamburgerMenuPage.objfooter,"Footer")) {
//				found=true;
//				break;
//			}				
//			else {
//				scrollDownByY(300);
//				scrollDownByY(300);	
//				scrollDownByY(300);	
//			}
//		}
//		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section in Home Tab");

		extent.HeaderChildNode(" HLS_021 : Verify the availability of the Footer section at bottom ");
		waitTime(3000);
		scrollToBottomOfPageWEB();
		//scrollDownWEB();
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section");

	}

	public void movies(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_022: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode("HLS_023 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(6000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(6000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + " second content title :"
				+ secondCarouselTitle + " and third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + " second content title :" + secondCarouselTitle
				+ " and third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}

		partialScroll();
		extent.HeaderChildNode("HLS_033 :Verify that Play, share, watchlist CTA");
		trayTitleAndContentValidationWithApiDataMovie(tabName, "movies");

		extent.HeaderChildNode(" HLS_024 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode("HLS_027 : Previous,Next utton verification");
		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			waitTime(3000);
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		
		extent.HeaderChildNode(" HLS_025 : Verify On click View All");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);

		extent.HeaderChildNode(" HLS_026 : Verify the premium tag for all premium content card");
		scrollDownWEB();
		verifyElementPresent(PWAHamburgerMenuPage.objpremiumcard, "Premium Tag");

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("HLS_029 : Verify whether user is able to play Premium Movie Contents as a Guest/Non-Subscribed user");
			System.out.println("HLS_029 : Verify whether user is able to play Premium Movie Contents as a Guest/Non-Subscribed user");
		}
		if (userType.equals("ClubUser")) {
			extent.HeaderChildNode("HLS_031 : Verify weather user is able to play Premium Movie Contents as Club/RSVOD user");
			System.out.println("HLS_031 : Verify weather user is able to play Premium Movie Contents as Club/RSVOD user");
		}
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("HLS_030 : Verify the User can play the Premium Movie Contents as a Premium all access user");
			System.out.println("HLS_030 : Verify the User can play the Premium Movie Contents as a Premium all access user");
		}
		navigateToAnyScreenOnWeb("Movies"); 
		checkElementDisplayed(PWAMoviesPage.objPremiumContentCard, "Premium Content");
		mandatoryRegistrationPopUp(userType);
		JSClick(PWAMoviesPage.objPremiumContentCard, "Premium Content");
		waitTime(10000);
		waitTime(10000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser") || userType.equals("ClubUser")) {
			if (!verifyIsElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,"'You're watching a trailer' message on the player")) {
				verifyIsElementDisplayed(PWALiveTVPage.objPlayerInlineSubscriptionLink, "Inline Subscribe Link");
			}
		}
		String premiumMovieTitle = "";
		try {
			premiumMovieTitle = getElementPropertyToString("innerText", PWAMusicPage.objConsumptionPageTitle,
					"Premium Movie Title in Consumptions Page").toString();
			logger.info("Premium Movie Title in Consumptions Page: " + premiumMovieTitle);
			extent.extentLogger("", "Premium Movie Title in Consumptions Page: " + premiumMovieTitle);
		} catch (Exception e) {
			logger.error("Failed to fetch Premium Movie Title in Consumptions Page");
			extent.extentLoggerFail("", "Failed to fetch Premium Movie Title in Consumptions Page");
		}
		
		extent.HeaderChildNode("HLS_032 : Verify player Inline subscription link availability at the end of the play back");
		click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
			waitTime(10000);
			if(userType.equalsIgnoreCase("Guest")) {
				if(waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button")) {
					waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
					waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button");
					waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
					Back(1);
					waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
					waitForElement(PWASubscriptionPages.objTrailerTextAtConsumptionPage, 20, "Navigated to Next Content");
					Back(1);
					waitForElement(PWASubscriptionPages.objExistUserText, 20, "Are you a Zee5 Subscriber? - Text");
					waitForElementAndClick(PWASubscriptionPages.objLoginLink, 20, "Login Link");
					waitForElement(PWASubscriptionPages.objLoginPage, 20, "Navigated to Login page");
					Back(1);
				} 
						
			} else if(userType.equalsIgnoreCase("NonSubscribedUser")){
				if(waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button")) {
					waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
					waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button");
					waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
					Back(1);
					waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
					waitForElement(PWASubscriptionPages.objTrailerTextAtConsumptionPage, 20, "Navigated to Next Content");
					Back(1);
				}
			}
		}
		Back(2);

		extent.HeaderChildNode("HLS_034 :Verify the right side bottom arrow ");
		scrollToBottomOfPageWEB();
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}
	}

	public String verifyShowsDetailsMetaData() throws Exception {
		// Watchhistory is showing at back-end response properly
		String contentURL = getDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		logger.info("ContentID fetched from URL: " + contentID);
		extent.extentLogger("", "ContentID fetched from URL: " + contentID);
		Response resp = ResponseInstance
				.getResponse("https://gwapi.zee5.com/content/tvshow/" + contentID + "?translation=en&country=IN");
		extent.extentLogger("BackEnd data : ", "Backend data fetched: ");
		logger.info("Backend data fetched: ");
		String show = resp.jsonPath().getString("original_title");
		String id = resp.jsonPath().getString("id");
		String subtype = resp.jsonPath().getString("asset_subtype");
		String genre = resp.jsonPath().getString("genre[0].value");
		String totalSeasons = resp.jsonPath().getString("total_seasons");
		String totalEpisodes = resp.jsonPath().getString("seasons[0].total_episodes");
		String releaseDate = resp.jsonPath().getString("release_date");
		String ageRating = resp.jsonPath().getString("age_rating");
		extent.extentLogger("", "Show : " + show);
		logger.info("Show : " + show);
		extent.extentLogger("", "id : " + id);
		logger.info("Content ID : " + id);
		extent.extentLogger("", "Asset Type : " + subtype);
		logger.info("Asset Type : " + subtype);
		extent.extentLogger("", "Total Seasons : " + totalSeasons);
		logger.info("Total Seasons : " + totalSeasons);
		extent.extentLogger("", "Total Episodes : " + totalEpisodes);
		logger.info("Total Episodes : " + totalEpisodes);
		extent.extentLogger("", "Age Rating : " + ageRating);
		logger.info("Age Rating : " + ageRating);
		extent.extentLogger("", "Release Date : " + releaseDate);
		logger.info("Release Date : " + releaseDate);
		extent.extentLogger("", "Genre : " + genre);
		logger.info("Genre : " + genre);
		// Verification on front end
		String titleui = findElement(PWAPlayerPage.objContentShowTitle).getText();
		if (titleui.equals(show)) {
			extent.extentLogger("", "API Show Title: " + show + " is displayed in UI");
			logger.info("API Show Title: " + show + " is displayed in UI");
		} else {
			extent.extentLoggerFail("", "API fetched show title is " + show + " and UI displays title " + titleui);
			logger.info("API fetched show title is " + show + " and UI displays title " + titleui);
		}
		List<WebElement> meta = findElements(PWAShowsPage.metainfolist);
		ArrayList<String> metalist = new ArrayList<String>();
		for (int i = 0; i < meta.size(); i++) {
			metalist.add(meta.get(i).getText());
		}
		extent.extentLogger("", "Meta data fetched from front end : " + metalist);
		logger.info("Meta data fetched from front end : " + metalist);
		for (int i = 0; i < meta.size(); i++) {
			String currentmeta = meta.get(i).getText();
			if (i == 0) {
				if (currentmeta.contains(totalEpisodes)) {
					extent.extentLogger("", "Total Episodes : " + currentmeta + " is displayed in UI");
					logger.info("Total Episodes : " + currentmeta + " is displayed in UI");
				} else {
					extent.extentLoggerFail("",
							"API fetched number of episodes is " + totalEpisodes + " and UI displays " + currentmeta);
					logger.info(
							"API fetched number of episodes is " + totalEpisodes + " and UI displays " + currentmeta);
				}
			} else if (i == 1) {
				if (releaseDate.contains(currentmeta)) {
					extent.extentLogger("", "Release Year : " + currentmeta + " is displayed in UI");
					logger.info("Release Year : " + currentmeta + " is displayed in UI");
				} else {
					extent.extentLoggerFail("",
							"API fetched release year is " + releaseDate + " and UI displays " + currentmeta);
					logger.info("API fetched release year is " + releaseDate + " and UI displays " + currentmeta);
				}
			} else if (i == 2) {
				if (genre.contains(currentmeta)) {
					extent.extentLogger("", "Genre : " + currentmeta + " is displayed in UI");
					logger.info("Genre : " + currentmeta + " is displayed in UI");
				} else {
					extent.extentLoggerFail("", "API fetched genre is " + genre + " and UI displays " + currentmeta);
					logger.info("API fetched genre is " + genre + " and UI displays " + currentmeta);
				}
			}
		}
		if (metalist.contains(ageRating)) {
			extent.extentLogger("", "Age Rating : " + ageRating + " is displayed in UI");
			logger.info("Age Rating : " + ageRating + " is displayed in UI");
		} else {
			extent.extentLoggerFail("", "API fetched Age Rating is " + ageRating + " is not displayed in UI");
			logger.info("API fetched Age Rating is " + ageRating + " is not displayed in UI");
		}

		return contentID;
	}

	public void Shows(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_041: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_042 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + ", Second content title :"
				+ secondCarouselTitle + " and Third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + ", Second content title :" + secondCarouselTitle
				+ " and Third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}

		extent.HeaderChildNode(" HLS_043 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode("HLS_046,HLS_044 : Verify that user is able to rotate tray");
		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			waitTime(3000);
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		extent.HeaderChildNode(" HLS_045 : Verify the premium tag  for all premium content card");
		waitTime(3000);
		for (int i = 0; i < 10; i++) {
			if (getWebDriver().findElements(PWAHomePage.objClubTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is isplayed");
				break;
			} else {
				scrollDownByY(300);
				if (i == 4) {
					logger.info("Premium tag is not displayed");
					extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				}
			}
		}
		click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
		extent.HeaderChildNode(" HLS_047 : Navigate to the TV show Details Screen");
		mandatoryRegistrationPopUp(userType);
		String nextPageTitle = "";
		boolean firstAssetClicked = swipeTillTrayAndClickFirstAsset(userType, 15, "Trending Shows",
				"Trending Shows tray", tabName);
		if (firstAssetClicked) {
			try {
				nextPageTitle = getText(PWAShowsPage.objShowsTitle);
				logger.info("Shows Details page is displayed: " + nextPageTitle);
				extent.extentLogger("showDetails", "Shows Details page is displayed: " + nextPageTitle);
			} catch (Exception e) {
				try {
					nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
					logger.info("Player screen is displayed: " + nextPageTitle);
					extent.extentLogger("playerScreen", "Player screen is displayed: " + nextPageTitle);
				} catch (Exception e1) {
					nextPageTitle = "";
				}
			}
		}
		if (!nextPageTitle.equals("")) {
			logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			screencapture();
			if (!userType.equals("SubscribedUser"))
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
			try {
				getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
			} catch (Exception e) {
			}
		} else {
			logger.error("Failed to navigate to Details page: \"" + nextPageTitle + "\"");
			extent.extentLoggerFail("playerScreen", "Failed to navigate to Details page: \"" + nextPageTitle + "\"");
		}

		extent.HeaderChildNode(" HLS_049 : Verify play Free content from the show page");
		mandatoryRegistrationPopUp(userType);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsShow");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Shows"), "Shows Tab");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(4000);
		partialScroll();
		checkElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(2000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		click(PWAHomePage.objZeelogo1, "Zee Logo");

		extent.HeaderChildNode(" HLS_050 : Verify play Premium content from the show page");
		verifyLandscapeforPremiumContentWeb();

		navigateToAnyScreenOnWeb("Shows");

		extent.HeaderChildNode(" HLS_051 : Verify the Play, share and add to watch list CTA buttons ");
		trayTitleAndContentValidationWithApiDataMovie(tabName, "tvshows");

		extent.HeaderChildNode("HLS_052 :Verify the right side bottom arrow ");
		scrollToBottomOfPageWEB();
		logger.info("Scrolled Up the page");
		if (scrollToElement(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn)) {
			click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon");
		} else {
			logger.error("Back to Top Arrow icon is not displayed");
			extent.extentLoggerFail("", "Back to Top Arrow icon is not displayed");
		}

		extent.HeaderChildNode(
				" HLS_053 :Verify the Before TV are available, HLS_054 :Verify the  Before TV content playback");
		waitTime(2000);
		// Before Zee TV
		mandatoryRegistrationPopUp(userType);
		nextPageTitle = "";
		firstAssetClicked = swipeTillTrayAndClickFirstAssetType2(userType, 15, "Premiere Episodes | Before Zee TV",
				"Before Zee TV tray", tabName);
		if (firstAssetClicked) {
			try {
				nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				logger.info("Player screen is displayed");
				extent.extentLogger("playerScreen", "Player screen is displayed");
			} catch (Exception e1) {
				nextPageTitle = "";
			}
		}
		if (!nextPageTitle.equals("")) {
			logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			if (!userType.equals("SubscribedUser"))
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
			try {
				getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
			} catch (Exception e) {
			}
		} else {
			logger.error("Failed to navigate to Consumptions page: \"" + nextPageTitle + "\"");
			extent.extentLoggerFail("playerScreen",
					"Failed to navigate to Consumptions page: \"" + nextPageTitle + "\"");
		}
	}

	public void silentRegistrationViaEmail(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("HLS_003 : Silent registration via email");
			navigationToMyPlanFromHome("NewRegister");
		}
	}

	public void SocialLogin(String userType) throws Exception {

		switch (userType) {
		case "Guest":
			extent.HeaderChildNode("HLS_004 : login via User Social Login Credentials");
			extent.HeaderChildNode("Guest user ");
			if (checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
				extent.extentLogger("Not Logged in", "User is not logged in");
				logger.info("User is not logged in");
				noLogoutOption();

				waitTime(5000);
				getWebDriver().get(URL);
				facebookLogin();
//	twitterLogin();
				if (!checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
					logout();
				}
				waitTime(4000);
				// SANITY
//	phoneNumberRegistration();
//	forgotPasswordMobileNumber();

			}

			break;
		case "NonSubscribedUser":
			extent.HeaderChildNode("Non-Subscribed user ");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon");
			JSClick(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
			click(PWAHamburgerMenuPage.objProfileTextWEB, "profile");

			changePasswordFuncionality();
		}

	}

	public void Carouselcontent(String userType) throws Exception {
		extent.HeaderChildNode("HLS_008 : Verify play content from the carousel");
		navigateToAnyScreenOnWeb("Movies");
		verifyElementPresent(PWAHamburgerMenuPage.objplay, "Play button");
		JSClick(PWAHamburgerMenuPage.objplaybtncarousel, "Play button");
		navigateToAnyScreenOnWeb("Home");
		verifyElementPresent(PWAHamburgerMenuPage.objplay, "Play button");
		JSClick(PWAHamburgerMenuPage.objplaybtncarousel, "Play button");
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
			Back(1);
		} else {
			logger.error("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
		extent.HeaderChildNode("HLS_0011 : Verify play content from the collection page");
		String trayTitleUI = swipeTillTray(5, "Top Movies", "Top Movies tray");
		click(PWALandingPages.objViewAllOfTray(trayTitleUI), "View all button for tray " + trayTitleUI);
		waitTime(5000);
		JSClick(PWAHamburgerMenuPage.objFirstCard, "First card in View All page");
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.error("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
	}

	public void clublogin() throws Exception {

		extent.HeaderChildNode("Login as club User");
		// String SubscribedUsername =
		// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedUserName");
		// String SubscribedPassword =
		// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedPassword");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "testzee5_6@gmail.com", "Email Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "123456", "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(3000);
	}

	public void newsValidation(String userType, String tabName) throws Exception {

		extent.HeaderChildNode("HLS_055: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode("HLS_062 :  Verify the Play, share and add to watch list CTA buttons");
		waitTime(3000);
		trayTitleAndContentValidationWithApiDataNews(tabName, "news");

		extent.HeaderChildNode(" HLS_056 : Verify The carousels are Auto scrolled in landing pages.");
		navigateToAnyScreenOnWeb(tabName);

		verifyAutoroatingOnCarousel(tabName);
		extent.HeaderChildNode(" HLS_057 : Verify the trays displayed in the News page.");
		PWAPagesNavigationAndTabHighlight(tabName);

//		extent.HeaderChildNode(
//				" HLS_058 : Verify the content which have Autoplay tag in news Carousel should Autoplay .");
//		boolean autoPlayed = verifyAutoPlay(tabName);
//		extent.HeaderChildNode("HLS_059 : Verify the player control Autoplay carousel content");
//
//		if (autoPlayed == true) {
//			verifyElementPresent(PWANewsPage.objLive, "LIVE badge on Autoplaying carousel");
//			verifyElementPresent(PWANewsPage.objVolume, "Volume Control on Autoplaying carousel");
//			if (verifyElementDisplayed(PWAPlayerPage.pauseBtn)) {
//				logger.error("Pause button on Autoplaying carousel should not be displayed");
//				extent.extentLoggerFail("Autoplay", "Pause button on Autoplaying carousel should not be displayed");
//			} else {
//				logger.info("Pause button on Autoplaying carousel is not be displayed, expected behavior");
//				extent.extentLogger("Autoplay",
//						"Pause button on Autoplaying carousel is not displayed, expected behavior");
//			}
//			if (verifyElementDisplayed(PWAPlayerPage.playBtn)) {
//				logger.error("Play button on Autoplaying carousel should not be displayed");
//				extent.extentLoggerFail("Autoplay", "Play button on Autoplaying carousel should not be displayed");
//			} else {
//				logger.info("Play button on Autoplaying carousel is not be displayed, expected behavior");
//				extent.extentLogger("Autoplay",
//						"Play button on Autoplaying carousel is not displayed, expected behavior");
//			}
//			if (verifyElementDisplayed(PWAPlayerPage.forward10SecBtn)) {
//				logger.error("Forward button on Autoplaying carousel should not be displayed");
//				extent.extentLoggerFail("Autoplay", "Forward button on Autoplaying carousel should not be displayed");
//			} else {
//				logger.info("Forward button on Autoplaying carousel is not be displayed, expected behavior");
//				extent.extentLogger("Autoplay",
//						"Forward button on Autoplaying carousel is not displayed, expected behavior");
//			}
//			if (verifyElementDisplayed(PWAPlayerPage.rewind10SecBtn)) {
//				logger.error("Rewind button on Autoplaying carousel should not be displayed");
//				extent.extentLoggerFail("Autoplay", "Rewind button on Autoplaying carousel should not be displayed");
//			} else {
//				logger.info("Rewind button on Autoplaying carousel is not be displayed, expected behavior");
//				extent.extentLogger("Autoplay",
//						"Rewind button on Autoplaying carousel is not displayed, expected behavior");
//			}
//			if (verifyElementDisplayed(PWAPlayerPage.minimizeBtn)) {
//				logger.error("Autoplaying carousel should not be in full screen mode");
//				extent.extentLoggerFail("Autoplay", "Autoplaying carousel should not be in full screen mode");
//			} else {
//				logger.info("Autoplaying carousel is not in full screen mode, expected behavior");
//				extent.extentLogger("Autoplay", "Autoplaying carousel is not in full screen mode, expected behavior");
//			}
//		} else {
//			logger.info("Carousel card did not autoplay");
//			extent.extentLogger("Autoplay", "Carousel card did not autoplay");
//			logger.info("Player controls on Autoplaying carousel content could not be verified");
//			extent.extentLoggerWarning("Autoplay",
//					"Player controls on Autoplaying carousel content could not be verified");
//		}
		extent.HeaderChildNode(" HLS_060 : Verify On click View All/> ");

		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		extent.HeaderChildNode(" HLS_061 : Verify the button (>) rotate and functional");
		RotateTrayValidation();

		extent.HeaderChildNode("HLS_063 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		extent.HeaderChildNode(
				"HLS_064 : Verify whether user is navigate to Playback page when user tap on any Live News content");
		waitTime(2000);
		scrollDownByY(200);
		verifyElementPresent(PWALandingPages.trayCardImg("Live News"), "First Card under 'Live News' tray");
		JSClick(PWALandingPages.trayCardImg("Live News"), "First Card under 'Live News' tray");
		String nextPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleLiveTVname,
				"Content Title").toString();

		logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
		extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");

		extent.HeaderChildNode(
				"HLS_65 : Verify whether user is navigate to Playback page when user tap on any News VOD content");
		navigateToAnyScreenOnWeb(tabName);
		swipeTillTrayAndVerifyPlayback(userType, "News", "Trending News");
	}

	public void swipeTillTrayAndVerifyPlayback(String userType, String tabName, String trayTitle) throws Exception {
		String nextPageTitle = "";
		boolean firstAssetClicked = false;
		firstAssetClicked = swipeTillTrayAndClickFirstAsset(userType, 15, trayTitle, "\"" + trayTitle + "\" tray",
				tabName);
		if (firstAssetClicked) {
			try {
				nextPageTitle = getText(PWAShowsPage.objShowsTitle);
				logger.info("Shows Details page is displayed");
				extent.extentLogger("showDetails", "Shows Details page is displayed");
			} catch (Exception e) {
				try {
					nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
					logger.info("Player screen is displayed");
					extent.extentLogger("playerScreen", "Player screen is displayed");
				} catch (Exception e1) {
					nextPageTitle = "";
				}
			}
		}
		if (!nextPageTitle.equals("")) {
			logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			if (!userType.equals("SubscribedUser"))
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
			try {
				getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
			} catch (Exception e) {
			}
		} else {
			logger.error("Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
			extent.extentLoggerFail("playerScreen",
					"Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
		}
	}

	public boolean verifyAutoPlay(String Tabname) throws Exception {
		boolean autoplayingItemsPresent = false;
		boolean autoPlayed = false;
		int autoplayItem = 0;
		// String languageSmallText = allSelectedLanguages();
		Response tabResponse = ResponseInstance.getResponseForPages(Tabname.toLowerCase(), "en,hi,kn");
		int carouselItemsCount = tabResponse.jsonPath().get("buckets[0].items.size()");
		System.out.println(carouselItemsCount);
		if (carouselItemsCount > 7)
			carouselItemsCount = 7;
		for (int i = 0; i < carouselItemsCount; i++) {
			try {
				if (tabResponse.jsonPath().get("buckets[0].items[" + i + "].tags[0]").toString().equals("Autoplay")) {
					autoplayItem = i;
					autoplayingItemsPresent = true;
					break;
				}
			} catch (Exception e) {
			}
		}
		if (autoplayingItemsPresent == false) {
			logger.info("Autoplay could not be verified because no Autoplaying Carousel Items");
			extent.extentLoggerWarning("Autoplay",
					"Autoplay could not be verified because no Autoplaying Carousel Items");
		} else {
			navigateToAnyScreen(Tabname);
			click(PWAHamburgerMenuPage.carouselDot(autoplayItem + 1), "Carousel Dot " + (autoplayItem + 1) + "");
			waitTime(3000);
			if (verifyElementPresent(PWANewsPage.objRight, "Right facing arrow on Carousel")) {
				logger.info("Autoplay is begun and verified by presence of Right facing arrow");
				extent.extentLoggerPass("", "Autoplay is begun and verified by presence of Right facing arrow");
				autoPlayed = true;
			} else {
				logger.error("Autoplay has failed");
				extent.extentLoggerFail("", "Autoplay has failed");
				autoPlayed = false;
			}
			if (verifyElementPresent(PWANewsPage.objLeft, "Left facing arrow on Carousel")) {
				logger.info("Autoplay is begun and verified by presence of Left facing arrow");
				extent.extentLoggerPass("", "Autoplay is begun and verified by presence of Left facing arrow");
			} else {
				logger.error("Autoplay has failed");
				extent.extentLoggerFail("", "Autoplay has failed");

			}
		}
		if (autoPlayed)
			return true;
		else
			return false;
	}

	public void RSVODlogin() throws Exception {

		extent.HeaderChildNode("Login as club User");
		// String SubscribedUsername =
		// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedUserName");
		// String SubscribedPassword =
		// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedPassword");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "boat@mailnesia.com", "Email Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "123456", "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(3000);
	}

	public void Clubvalidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_066: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);
		extent.HeaderChildNode(" HLS_067 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + ", Second content title :"
				+ secondCarouselTitle + ", Third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + ", Second content title :" + secondCarouselTitle
				+ ", Third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}

		extent.HeaderChildNode(" HLS_068 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode(" HLS_069,HLS_07 : Verify On click View All/> ");

		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			waitTime(3000);
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		waitTime(2000);

		extent.HeaderChildNode(" HLS_071 : Verify the Club tag  for all Club content card");
		waitTime(3000);
		for (int i = 0; i < 10; i++) {
			if (getWebDriver().findElements(PWAHomePage.objClubTag).size() > 0) {
				logger.info("Club tag is displayed");
				extent.extentLogger("Premium Tag", "Club Tag is isplayed");
				break;
			} else {
				scrollDownByY(300);
				if (i == 4) {
					logger.info("Club tag is not displayed");
					extent.extentLogger("Premium Tag", "Club Tag is not displayed");
				}
			}
		}
		click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
		extent.HeaderChildNode(" HLS_073 : Verify user can play any club movie content");
		// navigateToAnyScreenOnWeb(tabName);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Ammana Mane", "Search Field");
		waitForElementDisplayed(PWASearchPage.objFirstSearchedAssetTitle, 20);
		waitTime(5000);
		String FirstSearchedAssetTitle1 = findElement(PWASearchPage.objFirstSearchedAssetTitle).getText();
		click(PWASearchPage.objFirstSearchedAssetTitle, "First Searched Asset Title: " + FirstSearchedAssetTitle1);
		waitTime(7000);
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player")) {
				logger.error("Trailer is not played");
				extent.extentLoggerFail("Trailer", "Trailer is not played");
			} else {
				logger.info("Trailer is played for club movie content");
				extent.extentLogger("", "Trailer is played for club movie content");
			}
		} else {
			if (pausePlayer()) {
				logger.info("User is able to play club movie content");
				extent.extentLogger("", "Club movie content failed to play");
			}
		}

		extent.HeaderChildNode(" HLS_074: Verify user can play any before tv content.");
		navigateHome();
		checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
		click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");

		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("content is able to play");
			extent.extentLogger("", "content is able to play");
		} else {
			logger.info("content is not able to play");

			extent.extentLogger("Consumption Page", "content is not able to play");
		}

		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("HLS_082 :Verify Subscribe CTA with Club Icon is displayed below the player");
			click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card");
			checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeWithClub,
					"Subscribe with Club Icon below the player");
		}
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			navigateToHome();
			extent.HeaderChildNode("HLS_079 :Subscription popup availability at the end of the play back");
			zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
			if (waitForElement(PWASubscriptionPages.objGetPremiumPopupTitle, 20, "Subscribe Pop Up for Club Movie")) {
				click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close Button");
			}
		}

		navigateToHome();
		navigateToAnyScreenOnWeb("Club");
		extent.HeaderChildNode("HLS_080 :Verify that Play, share, watchlist CTA");
		trayTitleAndContentValidationWithApiDataMovie(tabName, "club");

		extent.HeaderChildNode("HLS_081 :Verify the right side bottom arrow ");
		scrollToBottomOfPageWEB();
		logger.info("Scrolled Up the page");
		if (verifyElementPresent(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon")) {
			click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon");
		} else {
			logger.error("Back to Top Arrow icon is not displayed");
			extent.extentLoggerFail("", "Back to Top Arrow icon is not displayed");
		}
	}

	public void Premiumvalidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_083: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_084 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + " second content title :"
				+ secondCarouselTitle + " and third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + " second content title :" + secondCarouselTitle
				+ " and third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}

		extent.HeaderChildNode(" HLS_085 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode("HLS_087 : Next-Prvious functionality");
		scrollDownWEB();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(4000);
		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		
		extent.HeaderChildNode(" HLS_086 : Verify On click View All");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		waitTime(2000);

		extent.HeaderChildNode(" HLS_088 : Verify the Premium tag for content card");
		waitTime(3000);
		scrollDownWEB();
		waitTime(3000);		
		verifyElementPresent(PWAHamburgerMenuPage.objpremiumcard, "Premium Tag");
		
		
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(" HLS_089 : Verify guest user able to play any  Premium content ");
			navigateToAnyScreenOnWeb("Premium");
			Actions actions = new Actions(getWebDriver());
			WebElement element = getWebDriver().findElement(PWASubscriptionPages.objZEE5Logo);
			actions.moveToElement(element).perform();
			verifyElementPresentAndClick(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
			waitTime(3000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Content is able to play");
				extent.extentLogger("Consumption Page", "Content is able to play");
			} else {
				logger.info("Content is not able to play");
				extent.extentLoggerFail("Consumption Page", "Content is not able to play");
			}
			Back(1);
		}

		if (userType.equalsIgnoreCase("SubscribedUser")) {
			extent.HeaderChildNode(" HLS_090 : Verify Premium pack user can play any Premium content");
			navigateToAnyScreenOnWeb("Premium");
			Actions actions = new Actions(getWebDriver());
			WebElement element = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
			actions.moveToElement(element).perform();
			verifyElementPresentAndClick(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
			waitTime(3000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Content is able to play");
				extent.extentLogger("Consumption Page", "Content is able to play");
			} else {
				logger.info("Content is not able to play");
				extent.extentLogger("Consumption Page", "Content is not able to play");
			}
		}
		click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("HLS_094 : Verify player Inline subscription link availability at the end of the play back");
			click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
			if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
				zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
				waitTime(10000);
				if(userType.equalsIgnoreCase("Guest")) {
					if(waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button")) {
						waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
						waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button");
						waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
						Back(1);
						waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
						if(waitForElement(PWASubscriptionPages.objTrailerTextAtConsumptionPage, 20, "Navigated to Next Content")) {
							logger.info("User navigated to next content with trailer content");
							extent.extentLoggerPass("", "User navigated to next content with trailer content");
						}
						else if(waitForElement(PWASubscriptionPages.objSkipLink, 20, "Skip Link")){
							logger.info("User navigated to next content without trailer content");
							extent.extentLoggerPass("", "User navigated to next content without trailer content");							
						}						
						Back(1);
						waitForElement(PWASubscriptionPages.objExistUserText, 20, "Are you a Zee5 Subscriber? - Text");
						waitForElementAndClick(PWASubscriptionPages.objLoginLink, 20, "Login Link");
						waitForElement(PWASubscriptionPages.objLoginPage, 20, "Navigated to Login page");
						Back(1);
					}
							
				} else if(userType.equalsIgnoreCase("NonSubscribedUser")){
					if(waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button")) {
						waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
						waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button");
						Back(1);
						waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
						if(waitForElement(PWASubscriptionPages.objTrailerTextAtConsumptionPage, 20, "Navigated to Next Content")) {
							logger.info("User navigated to next content with trailer content");
							extent.extentLoggerPass("", "User navigated to next content with trailer content");
						}
						else if(waitForElement(PWASubscriptionPages.objSkipLink, 20, "Skip Link")){
							logger.info("User navigated to next content without trailer content");
							extent.extentLoggerPass("", "User navigated to next content without trailer content");
						}
						Back(1);
					}
				}
			}
			Back(2);
			navigateToAnyScreenOnWeb("Premium");
		extent.HeaderChildNode("HLS_095 :Verify that Play, share, watchlist CTA");
		trayTitleAndContentValidationWithApiDataMovie(tabName, "premium");

		extent.HeaderChildNode("HLS_096 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);

		logger.info("Scrolled Up the page");
		if (checkElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon")) {
			waitTime(2000);
			click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon");
			logger.info("Back to Top Arrow icon is displayed");
			extent.extentLoggerPass("", "Back to Top Arrow icon is displayed");
		} else {
			logger.error("Back to Top Arrow icon is not displayed");
			extent.extentLoggerFail("", "Back to Top Arrow icon is not displayed");
		}

		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("HLS_097 :Verify Get Premium CTA with crown Icon is displayed below the player");
			zeeSearchForContentAndClickOnFirstResult("Khaali Peeli");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objSubscribebtn, "Get Premium with Crown Icon below the player");
		}
	}
}

	public void Musicvalidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_123: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);
		extent.HeaderChildNode(" HLS_124 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);
		extent.HeaderChildNode("HLS_126 : Verify Tray Rotation functionality");
		scrollDownWEB();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		extent.HeaderChildNode(" HLS_125: Verify On click View All ");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(5000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		extent.HeaderChildNode(" HLS_129 : Verify user is navigate to consumption page ");
		waitTime(5000);
		click(PWAHamburgerMenuPage.objFirstCard, "First card");
		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
		Back(1);
		extent.HeaderChildNode("HLS_127 :Verify that Play, Share, Watchlist CTA");
		// validateTrayTitleAndTrayCards(tabName, "music");
		scrollDownByY(150);
		trayTitleAndContentValidationWithApiDataZeeoriginals(tabName, "music");
		// musicPageTrayTitleAndContentValidationWithApiData(tabName, "videos",
		// userType);
		navigateToAnyScreenOnWeb("Music");
		extent.HeaderChildNode("HLS_128 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}
		extent.HeaderChildNode("HLS_130 : Verify that Recommended Videos are displayed right side of the player");
		mandatoryRegistrationPopUp(userType);
		if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel card")) {
			click(PWAHomePage.objContTitleOnCarousel, "Carousel card");
		} else if (checkElementDisplayed(PWAMusicPage.objBannerPlusTrayCard, "Banner Tray Card")) {
//			click(PWAMusicPage.objBannerPlusTrayCard, "Banner Tray card");
			JSClick(PWAMusicPage.objBannerPlusTrayCard, "Banner Tray card");
		}
		if (checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Subscribe Pop Up")) {
			verifyElementPresentAndClick(PWAPremiumPage.objClosePremiumPopup, "Premium PopUp Close icon");
		}
		mandatoryRegistrationPopUp(userType);
		waitTime(5000);
		verifyElementPresent(PWAMusicPage.objRecommendedSongsVideosTray, "Recommended Songs Videos tray");
	}

	public boolean waitforLiveTabToLoad() throws Exception {
		for (int i = 0; i < 15; i++) {
			if (checkElementExist(PWAPlayerPage.objFirstCardFreeChnnelName)) {
				return true;
			} else {
				waitTime(10000);
			}
		}
		extent.extentLoggerFail("", "Live TV failed to load even after waiting for 2 minutes");
		logger.error("Live TV failed to load even after waiting for 2 minutes");
		return false;
	}

	public boolean waitforchannelguideToLoad() throws Exception {
		for (int i = 0; i < 15; i++) {
			if (checkElementExist(PWALiveTVPage.objChannelWrapper)) {
				return true;
			} else {
				waitTime(10000);
			}
		}
		extent.extentLoggerFail("", "channel guide failed to load even after waiting for 2 minutes");
		logger.error("channel guide failed to load even after waiting for 2 minutes");
		return false;
	}

	public void LiveTVValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(" Verify user navigation " + tabName + "page");

		navigateToAnyScreenOnWeb("Live TV");
		waitforLiveTabToLoad();
		// waitTime(30000);
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		String channelTitle;
		channelTitle = getWebDriver().findElement(PWALiveTVPage.objLiveChannelCardTitle).getText();
		System.out.println(channelTitle);
		extent.HeaderChildNode(
				"HLS_140 : Validating that user is navigated to respective Live Channel consumption screen post tapping on Live Channel Card");
		verifyElementPresentAndClick(PWALiveTVPage.objLiveChannelCardProgressBar, "Live Channel Card");
		waitTime(5000);
		if (checkElementDisplayed(PWALiveTVPage.objGoHomeLink, "GO HOME ") == true) {
			BackButton(1);
			Thread.sleep(5000);
			channelTitle = getWebDriver().findElement(PWALiveTVPage.objLiveChannelCardTitle1).getText();
			System.out.println(channelTitle);
			verifyElementPresentAndClick(PWALiveTVPage.objLiveChannelCard1, "Live Channel Card");
		}
		String playerPageChannelTitle = getWebDriver().findElement(PWALiveTVPage.objLiveChannelConsumptionPageTitle)
				.getText();
		System.out.println(playerPageChannelTitle);
		if (channelTitle.equalsIgnoreCase(playerPageChannelTitle)) {
			softAssert.assertEquals(channelTitle.equalsIgnoreCase(playerPageChannelTitle), false,
					"Navigated to respective Live Channel Consumption screen");
			logger.info("Navigated to respective Live Channel Consumption screen");
			extent.extentLogger("Live Channel Page", "Navigated to respective Live Channel Consumption screen");
		} else {
			softAssert.assertEquals(true, true, "Not navigated to respective Live Channel Consumption screen");
			softAssert.assertAll();
			logger.info("Not navigated to respective Live Channel Consumption screen");
			extent.extentLogger("Live Channel Page", "Not navigated to respective Live Channel Consumption screen");
		}
		waitTime(2000);
		BackButton(1);
		extent.HeaderChildNode("HLS_131 : Verifing whether user is able to navigate Live Tv landing page");
		if (verifyElementPresent(PWAHomePage.objActiveTab, "Live TV")) {
			logger.info("Live Tv tab is highlighted, user is able to navigate Live Tv landing page");
			extent.extentLogger("Live Tv landing page",
					"Live Tv tab is highlighted, user is able to navigate Live Tv landing page");
		}

		extent.HeaderChildNode("HLS_132 : Validating that user is navigated to channel guide screen");
		verifyElementPresentAndClick(PWALiveTVPage.objNothighlightedChannelGuideToggle, "Channel guide toggle");
		waitForElementDisplayed(PWALiveTVPage.objHighlightedChannelGuideToggle, 5);
		if (verifyElementPresent(PWALiveTVPage.objHighlightedChannelGuideToggle, "Channel guide toggle")) {
			logger.info("Channel guide toggle is highlighted, User is navigated to Channel guide screen");
			extent.extentLogger("Channel guide",
					"Channel guide toggle is highlighted, User is navigated to Channel guide screen");
		}

		navigateToAnyScreenOnWeb("Live TV");
		extent.HeaderChildNode(" HLS_133 : Verify the rails name and content are loaded for first 2 scroll");
		for (int i = 1; i <= 2; i++) {
			if (checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray")) {
				System.out.println("Tray is loaded for " + i + " scroll");
				logger.info("Tray is loaded for " + i + " scroll");
				extent.extentLogger("Tray load", "Tray is loaded for " + i + " scroll");
			} else {
				ScrollToTheElement(PWAPremiumPage.objTrayTitle(i));
				checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray");
			}

		}

		extent.HeaderChildNode(
				" HLS_134 :Verifing that on content card after mouse hovor, play, share buttons are displayed");
		Actions actions = new Actions(getWebDriver());
		WebElement contentcard = getWebDriver().findElement(PWALiveTVPage.objCardTitle);
		actions.moveToElement(contentcard).perform();
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objPlayiconAfterMouseHover, "Play icon");
		verifyElementPresent(PWAHomePage.objShareiconAfterMouseHover, "Share icon");

		extent.HeaderChildNode(
				"HLS_135 :Verifing that On tapping of 'Right side bottom arrow' user is navigated to top of screen");
		waitTime(2000);
		partialScroll();
		partialScroll();
		if (verifyElementPresent(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			logger.info("Back to Top arrow is displayed");
			extent.extentLoggerPass("", "Back to Top arrow is displayed");
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");

		} else {
			logger.error("Back to Top arrow is not displayed");
			extent.extentLoggerFail("", "Back to Top arrow is not displayed");
			navigateToHome();
			navigateToAnyScreenOnWeb("Live TV");
			waitTime(5000);
		}
		navigateToAnyScreenOnWeb("Live TV");
		waitTime(5000);
		extent.HeaderChildNode(
				"HLS_136 :verifying that multiple languages are given to select with apply and reset button");
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTvFilterOption, "Filter option");
		waitTime(2000);
		List<WebElement> languages = getWebDriver()
				.findElements(By.xpath("//div[contains(@class,'language noSelect')]"));
		languages.size();
		if (languages.size() > 1) {
			logger.info("Multiple languages are given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are given for selection");
		} else {
			logger.info("Multiple languages are not given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are not given for selection");
		}
		verifyElementPresent(PWALiveTVPage.objApplyBtn, "Apply button");
		verifyElementPresent(PWALiveTVPage.objResetBtn, "Reset button");
		verifyElementPresentAndClick(PWALiveTVPage.objCloseLanguagePopuUpBtn,
				"Close button of Filter language setting window");
		waitTime(3000);

		extent.HeaderChildNode(" HLS_137 :Validating that user is navigated to channel guide screen");
		verifyElementPresentAndClick(PWALiveTVPage.objNothighlightedChannelGuideToggle, "Channel guide toggle");
		waitforchannelguideToLoad();
		waitForElementDisplayed(PWALiveTVPage.objHighlightedChannelGuideToggle, 5);
		if (verifyElementPresent(PWALiveTVPage.objHighlightedChannelGuideToggle, "Channel guide toggle")) {
			logger.info("Channel guide toggle is highlighted, User is navigated to Channel guide screen");
			extent.extentLogger("Channel guide",
					"Channel guide toggle is highlighted, User is navigated to Channel guide screen");
		}

		extent.HeaderChildNode(" HLS_139 : Validating UI of Channel Guide Screen");
		click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide Toggle");
		checkElementDisplayed(PWALiveTVPage.objChannelDayStrip, "Channel/Day Strip");
		JSClick(PWALiveTVPage.objChannelDayStrip, "Channel/Day Strip");
		JSClick(PWALiveTVPage.objUpcomingLiveProgramDate, "Upcoming Live Program Date");

		extent.HeaderChildNode("HLS_138 : Validating Channel Guide Sort Option");
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideSortOption, "Sort Option");
		verifyElementPresent(PWALiveTVPage.objSortByPopularity, "Sort By Popularity Option");
		verifyElementPresent(PWALiveTVPage.objSortByAZ, "Sort by A-Z Option");

		extent.HeaderChildNode("HLS_140 :Validating Channel Guide Filter Option");
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideFilterOption, "Filter Option");
		verifyElementPresentAndClick(PWALiveTVPage.objHindiFiltrOptn, "Language Filter");
		String selectedLang = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
		System.out.println(selectedLang);
		verifyElementPresentAndClick(PWALiveTVPage.objResetBtn, "Reset Button");
		String selectedLang1 = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
		System.out.println(selectedLang1);
		verifyElementPresentAndClick(PWALiveTVPage.objApplyBtn, "Apply Button");
		waitTime(10000);

//	

		extent.HeaderChildNode("HLS_141 : Validating that On going live show cards are highlighted");
		waitForElementDisplayed(PWALiveTVPage.objFirstOngoingLiveTvShowCard, 20);
		checkElementDisplayed(PWALiveTVPage.objFirstOngoingLiveTvShowCard, "Ongoing Live Tv show card");
		String ongoingLiveTvcardClass = getAttributValue("class", PWALiveTVPage.objFirstOngoingLiveTvShowCard);
		if (ongoingLiveTvcardClass.contains("active")) {
			logger.info("On going live show cards are highlighted on channel guide screen");
			extent.extentLogger("On going live show card",
					"On going live show cards are highlighted on channel guide screen");
		} else {
			logger.info("On going live show cards are not highlighted on channel guide screen");
			extent.extentLogger("On going live show card",
					"On going live show cards are not highlighted on channel guide screen");
		}
		navigateToAnyScreenOnWeb("Live TV");
		extent.HeaderChildNode(
				"HLS_142, HLS_143 : Verify that Player Inline Subsription Link available when user click on premium content");
//	while (!(checkElementDisplayed(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content"))) {
//		scrollDownWEB();
//	}

		for (int scroll = 0; scroll <= 4; scroll++) {
			if (checkElementDisplayed(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content")) {
				break;
			} else
				scrollByWEB();
		}

		click(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content");
//		waitForElementDisplayed(PWAPremiumPage.objPremiumPopUp, 15);
		if (userType.equalsIgnoreCase("Guest")) {
//			click(PWALiveTVPage.objPlayerInlineSubscriptionLink, "Player inline Subscribtion link");
			if(waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button")) {
				waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
				waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button");
				waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
				Back(1);
				waitForElement(PWASubscriptionPages.objExistUserText, 20, "Are you a Zee5 Subscriber? - Text");
				waitForElementAndClick(PWASubscriptionPages.objLoginLink, 20, "Login Link");
				waitForElement(PWASubscriptionPages.objLoginPage, 20, "Navigated to Login page");
				Back(1);
			} else {
				logger.error("Guest user should not play premium live content");
				extent.extentLoggerFail("", "Guest user should not play premium live content");
			}			
		}
		else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			if(waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Get Premium Button")) {
				verifyElementPresent(PWASubscriptionPages.objPremiumText, "To Watch this Premium Content - Text");
				verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumButton,"Get Premium Button");
				verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Navigated to Subscription page");
				Back(1);
			} else {
				logger.error("NonSubscribed user should not play premium live content");
				extent.extentLoggerFail("", "NonSubscribed user should not play premium live content");
			}
		}
		if(userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
			if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20,
					"Player inline Subscribtion link")) {
				logger.info(
						"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
				extent.extentLogger("Maximize icon",
						"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
			}
		}
//		if (checkElementDisplayed(PWAPremiumPage.objPremiumPopUp, "Premium PopUp")) {
//			verifyElementPresentAndClick(PWAPremiumPage.objClosePremiumPopup, "Premium PopUp Close icon");
//			extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
//			if (checkElementDisplayed(PWALiveTVPage.objPlayerInlineSubscriptionLink,
//					"Player inline Subscribtion link")) {
//				logger.info(
//						"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
//				extent.extentLogger("Maximize icon",
//						"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
//			}
//		}
		
		else {
			extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
			waitForPlayerAdToComplete2("Video Player");
			waitForElementDisplayed(PWAPlayerPage.objPlayerscreen, 120);
			pause();
			// click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
//			if(checkElementDisplayed(PWAPlayerPage.objPlayerPause, "Pause icon"))
//			{
//				click(PWAPlayerPage.objPlayerPause, "Pause icon");
//			}
			verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize icon");
			click(PWAPlayerPage.maximizeBtn, "Maximize icon");
			for (int i = 0; i < 5; i++) {
				if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
					logger.info("User is able to watch Premium content in landscape mode");
					extent.extentLogger("Landscape mode", "User is able to watch Premium content in landscape mode");
					break;
				} else {
					click(PWAPlayerPage.objPlayer, "player screen");
				}
			}
		}
		Back(1);
		waitforLiveTabToLoad();
		extent.HeaderChildNode("HLS_144 : Verifing that user is able to watch the free Content");
		verifyElementPresentAndClick(PWALiveTVPage.objFilterOption("FREE Channels"), "Free Channels filter");
		waitForElementDisplayed(PWALiveTVPage.objFirstfreeContentCard, 5);
		verifyElementPresentAndClick(PWALiveTVPage.objFirstfreeContentCard, "Free Content card");
		// waitForElementDisplayed(PWAPremiumPage.objPremiumPopUp, 5);
		if (!(checkElementDisplayed(PWAPremiumPage.objPremiumPopUp, "Premium PopUp"))) {
			logger.info("user is able to watch the free Content");
			extent.extentLogger("Free content", "user is able to watch the free Content");
		}
		Back(1);
	}

	public void storiesvalidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_145: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_146 : Verify the rails name and content are loaded for first 2 scroll");
		dataValidationOnScrollForStories();

		extent.HeaderChildNode("HLS_147 :Verify the right side bottom arrow ");
		scrollDownByY(300);
		scrollDownByY(300);
		logger.info("Scrolled down the Stories page");
		verifyElementPresentAndClick(PWALandingPages.objNavigateToTopStories, "Back to Top arrow");

		extent.HeaderChildNode("HLS_148 : Verify user is navigate to Story consumption page/ article page");
		String cardTitle = getElementPropertyToString("innerText", PWAHomePage.objStoriesPageCardTitle,
				"Story title in Landing");
		logger.info("Title of the Story in Stories page: " + cardTitle);
		extent.extentLogger("", "Title of the Story in Stories page: " + cardTitle);
		JSClick(PWAHomePage.objStoriesPageCardTitle, "Story card");
		String cardTitleConsum = getElementPropertyToString("innerText", PWAHomePage.objStoriesPageConsumptionsTitle,
				"Story title in Consumptions");
		logger.info("Title of the Story in Article page: " + cardTitleConsum);
		extent.extentLogger("", "Title of the Story in Article page: " + cardTitleConsum);
		if (cardTitle.equals(cardTitleConsum)) {
			logger.info("Successful navigation to consumption page");
			extent.extentLogger("", "Successful navigation to consumption page");
		} else {
			logger.error("Navigation failed to consumption page");
			extent.extentLoggerFail("", "Navigation failed to consumption page");
		}
	}

	public void dataValidationOnScrollForStories() throws Exception {
		ArrayList<String> list1titles = new ArrayList<>();
		for (int j = 0; j < 5; j++) {
			try {
				String title = findElement(By.xpath("(//h3[@class='cardTitle'])[" + j + "]")).getText();
				list1titles.add(title);
			} catch (Exception e) {
				scrollDownByY(100);
			}
		}
		logger.info("Titles fetched from Stories page before Swiping down : " + list1titles);
		extent.extentLogger("", "Titles fetched from Stories page before Swiping down : " + list1titles);
		scrollDownByY(300);
		scrollDownByY(300);
		scrollDownByY(300);
		logger.info("Scrolled down the Stories page");
		extent.extentLogger("", "Scrolled down the Stories page");
		ArrayList<String> list2titles = new ArrayList<>();
		for (int j = 5; j < 10; j++) {
			try {
				String title = findElement(By.xpath("(//h3[@class='cardTitle'])[" + j + "]")).getText();
				list2titles.add(title);
			} catch (Exception e) {
				scrollDownByY(100);
			}
		}
		logger.info("Titles fetched from Stories page after Swiping down : " + list2titles);
		extent.extentLogger("", "Titles fetched from Stories page after Swiping down : " + list2titles);

		if (list1titles.equals(list2titles)) {
			logger.error("Titles fetched are same after swiping, contents failed to load");
			extent.extentLoggerFail("", "Titles fetched are same after swiping, contents failed to load");
		} else {
			logger.info("Titles fetched are different after swiping, contents have loaded successfully");
			extent.extentLoggerPass("",
					"Titles fetched are different after swiping, contents have loaded successfully");
		}
	}

	public void videoValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_149: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_150 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode(" HLS_151 : Verify On click View All/> ");
		scrollDownWEB();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.error("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");
		}
		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}

		extent.HeaderChildNode(" HLS_155 : erify whether user is navigate to consumption page  ");
		checkElementDisplayed(PWAHamburgerMenuPage.obj2ndcontentCard, "2nd card");
		click(PWAHamburgerMenuPage.objFirstCard, "First card");
		waitTime(3000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Not navigated to Consumption Page");
		}

		Back(1);
		// waitTime(2000);
		navigateToAnyScreenOnWeb("Videos");

		extent.HeaderChildNode("HLS_153 :Verify that Play, share, watchlist CTA");
		musicPageTrayTitleAndContentValidationWithApiData(tabName, "videos", userType);

		extent.HeaderChildNode("HLS_154 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		extent.HeaderChildNode("HLS_156 : Verify that Recommended Videos are displayed right side of the player");

//	Actions actions = new Actions(getWebDriver());
//	WebElement player = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
		if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel")) {
			click(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
			mandatoryRegistrationPopUp(userType);

			// actions.moveToElement(player).build().perform();
			// click(PWAPlayerPage.maximizeBtn, "Maximize button");
			// waitTime(1000);
			// click(PWAPlayerPage.minimizeBtn, "Minimize button");
			waitTime(1000);

			if (checkElementDisplayed(PWAMusicPage.objRecommendedVideos, "Recommended tray")) {
				logger.info("Recommended videos is displayed in consumption page");
				extent.extentLogger("Recommended tray", "Recommended videos is displayed in consumption page");
			} else {
				logger.info("Recommended videos  is not displayed in consumption page");
				extent.extentLogger("Recommended tray", "Recommended videos is not displayed in consumption page");
			}
			Back(1);

		}

	}

	public void Zee5OriginalsValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_157: Verify user navigation " + tabName + "page");

		PWAPagesNavigationAndTabHighlight(tabName);
		extent.HeaderChildNode(" HLS_158 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);// update

		extent.HeaderChildNode(" HLS_159 : Verify On click View All/> ");
		scrollDownWEB();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");// update
		}
		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(5000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLoggerFail("View All", "Not navigated to View All Page");// update
			}
		}
		Back(1);

		extent.HeaderChildNode("HLS_161 :Verify that Play, share, watchlist CTA");
		trayTitleAndContentValidationWithApiDataZeeoriginals(tabName, "zeeoriginals");

		extent.HeaderChildNode("HLS_162 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		waitTime(2000);
		extent.HeaderChildNode("HLS_163 : Verify the Premium icons are displayed ");
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
				break;

			} else {
				logger.info("Premium tag is not displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				partialScrollDown();
			}

		}
//		for (int i = 0; i < 5; i++) {
//			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
//				logger.info("club tag is displayed");
//				extent.extentLogger("club Tag", "club Tag is displayed");
//				break;
//
//			} else {
//				logger.info("club tag is not displayed");
//				extent.extentLogger("club Tag", "club Tag is not displayed");
//				partialScrollDown();
//			}
//
//		}

		extent.HeaderChildNode("HLS_164 : Verify the Premium user is able to watch all the zee originals shows");
		if (userType.equalsIgnoreCase("Subscribeduser")) {
			navigateToAnyScreenOnWeb(tabName);
			swipeTillTrayAndClickFirstAsset(userType, 15, "Best of ZEE5 Originals in Kannada",
					"Best of ZEE5 Originals in Hindi tray", tabName);
//			scrollToTheElementWEB(PWAHomePage.objtrayname("Best of ZEE5 Originals in Hindi"));
//			checkElementDisplayed(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
//			click(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");

			// click(PWAShowsPage.objFirstAssetTitleFirstRail, "Content Title in Details
			// Page");
			waitForElementPresence(PWAPlayerPage.objPlaybackVideoOverlay, 20,"Player");
			checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
			click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
			waitTime(10000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("user is able to watch the zee originals shows");
				extent.extentLogger("zee originals shows", "user is able to watch the zee originals shows");
			} else {
				logger.info("user is not able to watch the zee originals shows");
				extent.extentLoggerFail("zee originals shows", "user is not able to watch the zee originals shows");// update
			}
		}

		if (userType.equalsIgnoreCase("Clubuser")) {
			extent.HeaderChildNode(
					"HLS_165 : Verify the Club user is able to watch all the zee originals shows from Zee originals page");
			navigateToAnyScreenOnWeb("ZEE5 Originals");
			checkElementDisplayed(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			click(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			waitTime(3000);
			JSClick(PWAShowsPage.objEpisodeCard, "First Episode Card");

			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("club user is able to watch the zee originals shows");
				extent.extentLogger("zee originals shows", "club user is able to watch the zee originals shows");
			} else {
				logger.info("club user is not able to watch the zee originals shows");
				extent.extentLoggerFail("zee originals shows",
						" club user is not able to watch the zee originals shows");// update
			}
			Back(1);
		}
		extent.HeaderChildNode("HLS_166 : Verify user is able to watch the First Episode of the originals shows");
		navigateToAnyScreenOnWeb("ZEE5 Originals");
		scrollToTheElementWEB(PWAHomePage.objtrayname("Best of ZEE5 Originals in Kannada"));
		checkElementDisplayed(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		click(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");

		waitTime(3000);
		waitForElementPresence(PWAPlayerPage.objPlaybackVideoOverlay, 20,"Player");
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("user is able to watch the First Episode");
			extent.extentLogger("zee originals shows", "user is able to watch the First Episode");
		} else {
			logger.info("user is not able to watch the First Episode");
			extent.extentLoggerFail("zee originals shows", " user is not  able to watch the First Episode");// update
		}
		navigateToAnyScreenOnWeb("ZEE5 Originals");

		extent.HeaderChildNode(
				"HLS_167 : Verify user can Navigate to the Original shows Details Screen post click on any Show Thumbnail Card");
		navigateToAnyScreenOnWeb("ZEE5 Originals");
		// scrollToTheElementWEB(PWAHomePage.objtrayname("Best of ZEE5 Originals in
		// Hindi"));
		JSClick(PWAHamburgerMenuPage.objFirstcontentCard, "First Card");
		waitTime(3000);

		checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("user is able to watch the zee originals shows");
			extent.extentLogger("zee originals shows", "user is navigated to the zee5originals shows");
		} else {
			logger.info("user is not navigated to the zee originals shows");
			extent.extentLoggerFail("zee originals shows", "user is not navigated to the zee 5riginals shows");// update
		}
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"HLS_168 : Verify the GET CLUB CTA is displayed on the  Club originals detail screen");
			navigateToAnyScreenOnWeb("ZEE5 Originals");
			checkElementDisplayed(PWAHamburgerMenuPage.objClubcontentcard, " club content card");
			click(PWAHamburgerMenuPage.objClubcontentcard, "club content card");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objClub, "GET CLUB");
			Back(1);

			extent.HeaderChildNode(
					"HLS_169 : Verify the GET Premium CTA is displayed on the  Club originals detail screen");

			String keyword = "Rangbaaz";
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWAHomePage.objSearchField, keyword + "\n", "Search");
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			verifyElementPresent(PWAShowsPage.objGetPremiumCTAInShowDetails, "Get Premium CTA in originals details");
			checkElementDisplayed(PWAShowsPage.objShowdeatilPlayIcon, "Play icon in originals details");
			Back(1);
		}
	}

	public void Search(String title) throws Exception {
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		extent.HeaderChildNode("HLS_184: Validating that user lands on search landing screen");

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		if (checkElementDisplayed(PWASearchPage.objSearchEditBox, "Search EditBox")) {
			logger.info("User landed on Search landing screen post tapping on search icon");
			extent.extentLogger("Search landingscreen",
					"User landed on Search landing screen post tapping on search icon");
		}

		extent.HeaderChildNode(
				"HLS_185: Validate the Trending Searches tray is available on the Search landing screen");
		verifyElementExist(PWASearchPage.objTrendingSearchesTray, "Trending Searches tray");

		extent.HeaderChildNode("HLS_186: Validate the Top Searches tray is available on the Search landing screen");
		verifyElementExist(PWASearchPage.objTopsearches, "Top Searches tray");
		extent.HeaderChildNode(
				"HLS_187: Validate user is navigated to respective consumption screen through Search result content");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		click(PWAHamburgerMenuPage.objFirstsearchcard, "Searched Show");
		String contentPlayed = getText(PWAShowsPage.objShowsTitle);
		logger.info("Show Details page displayed: " + contentPlayed);
		extent.extentLogger("showDetails", "Show Details page displayed: " + contentPlayed);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		extent.HeaderChildNode("HLS_189: Validating that related search results are available under each tabs");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		verifyElementExist(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "Shows Tab");
		verifyElementExist(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Episodes"), "Episodes Tab");
		verifyElementExist(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Movies"), "Movies Tab");
		verifyElementExist(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("News"), "News Tab");
		verifyElementExist(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Music"), "Music Tab");
		verifyElementExist(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Videos"), "Videos Tab");
		verifyElementExist(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		Back(1);
		extent.HeaderChildNode("HLS_188: Navigation to Consumption Screen through Trending Searches");

		waitTime(3000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		if (verifyElementExist(PWASearchPage.objTrendingSearchesTray, "Trending Searches tray")) {
			verifyElementExist(PWASearchPage.objFirstAssetThumbnailTrendingSearch,
					"First asset thumbnail of Trending searches tray");
			verifyElementExist(PWASearchPage.objFirstAssetTitleTrendingSearch,
					"First asset title of Trending searches tray");
			String searchScreenTitle = getElementPropertyToString("innerText",
					PWASearchPage.objFirstAssetTitleTrendingSearch, "First Asset Title Trending Search");
			logger.info("First Asset Title in Trending Search : " + searchScreenTitle);
			extent.extentLogger("", "First Asset Title in Trending Search : " + searchScreenTitle);
			String zeeTab = getWebDriver().getWindowHandle();
			Set<String> handlesBeforeClick = getWebDriver().getWindowHandles();
			JSClick(PWASearchPage.objFirstAssetTitleTrendingSearch, "First card under Trending Searches Tray");
			waitTime(5000);
			Set<String> handlesAfterClick = getWebDriver().getWindowHandles();
			if (handlesAfterClick.size() > handlesBeforeClick.size()) {
				String externalTab = "";
				boolean extOpened = false;
				for (String winHandle : getWebDriver().getWindowHandles()) {
					System.out.println(winHandle);
					if (!winHandle.equals(zeeTab)) {
						externalTab = winHandle;
						getWebDriver().switchTo().window(externalTab);
						logger.info("Switched to External Tab");
						extent.extentLogger("", "Switched to External Tab");
						String extUrl = getWebDriver().getCurrentUrl();
						logger.info("Navigated to the External Tab : " + extUrl);
						extent.extentLogger("playerScreen", "Navigated to the External Tab : " + extUrl);
						screencapture();
						getWebDriver().close();
						logger.info("Closed External Tab");
						extent.extentLogger("playerScreen", "Closed External Tab");
						getWebDriver().switchTo().window(zeeTab);
						logger.info("Switched to Zee Tab");
						extent.extentLogger("", "Switched to Zee Tab");
						extOpened = true;
						break;
					}
				}
				if (extOpened == false) {
					logger.error("Failed to open External Tab");
					extent.extentLoggerFail("playerScreen", "Failed to open External Tab");
				}
			} else {
				waitTime(6000);
				waitTime(6000);
				partialScroll();
				mandatoryRegistrationPopUp(user);
				// if news
				String nextPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleLiveTVname,
						"Content Title");
				// if consumptions
				if (nextPageTitle == null) {
					nextPageTitle = getElementPropertyToString("innerText",
							PWAPlayerPage.objContentTitleInConsumptionPage, "Content Title");
				}
				// if show details
				if (nextPageTitle == null) {
					nextPageTitle = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
							"Content Title");
				}
				logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
				extent.extentLogger("playerScreen",
						"Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
				if (searchScreenTitle.contains(nextPageTitle) || nextPageTitle.contains(searchScreenTitle)) {
					logger.info("User is navigated to respective consumption screen");
					extent.extentLogger("Consumption Screen", "User is navigated to respective consumption screen");
				} else {
					logger.error("User is not navigated to respective consumption screen");
					extent.extentLoggerFail("Consumption Screen",
							"User is not navigated to respective consumption screen");
				}
				if (checkElementDisplayed(PWAHamburgerMenuPage.objPopupClose, "Pop Up") == true) {
					click(PWAHamburgerMenuPage.objPopupClose, "Pop Up Close button");
				}
				click(PWAHomePage.objSearchBtn, "Search icon");
				waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
			}
		}
		extent.HeaderChildNode("HLS_190 : Verify the Searched contents/Term is shown to the user as Recent searches");
		String keywordB = "Gattimela";
		type(PWASearchPage.objSearchEditBox, keywordB, "Search edit box");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchShowsTab, "Shows tab");
		mandatoryRegistrationPopUp(user);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keywordB), "Search Result " + keywordB);
		waitTime(2000);
		click(PWAHomePage.objSearchBtn, "Search icon");
		verifyElementPresent(PWASearchPage.recentSearchsLabel, "Recent Searches tray");
		verifyElementPresent(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text");
		if (checkElementDisplayed(PWASearchPage.recentSearchItem1, "First Recent Search Item")) {
			if (getText(PWASearchPage.recentSearchItem1).equals(keywordB)) {
				logger.info(keywordB + " is displayed under Recent Searches as expected");
				extent.extentLogger("", keywordB + " is displayed under Recent Searches as expected");
			} else {
				logger.error(keywordB + " is not the first item under Recent Searches");
				extent.extentLoggerFail("", keywordB + " is not the first item under Recent Searches");
			}
		} else {
			logger.error("There is no item under Recent Searches");
			extent.extentLoggerFail("", "There is no item under Recent Searches");
		}

		extent.HeaderChildNode(
				"HLS_191 : Verify after click on the \"Clear All\" button user is able to clear Recent Searches.");
		click(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text");
		waitTime(7000);
		if (checkElementDisplayed(PWASearchPage.recentSearchsLabel, "Recent Searches tray")) {
			logger.error("Recent Searches tray is displayed even after clicking Clear All text");
			extent.extentLoggerFail("", "Recent Searches tray is displayed even after clicking Clear All text");
		}
		if (checkElementDisplayed(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text")) {
			logger.error("Clear All text is displayed even after clicking Clear All text");
			extent.extentLoggerFail("", "Clear All text is displayed even after clicking Clear All text");
		}
		List<WebElement> recentSearchItems = findElements(PWASearchPage.recentSearchItems);
		int size = recentSearchItems.size();
		if (size > 0) {
			logger.error(size + "keywords are found under Recent Searches even after Clear All tap");
			extent.extentLoggerFail("", size + "keywords are found under Recent Searches even after Clear All tap");
		} else {
			logger.info("Previous Recent searched Keywords are not displayed");
			extent.extentLogger("", "Previous Recent searched Keywords are not displayed");
		}
	}

	public void PlayValidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_098: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);  
//		waitTime(3000);
//		if (checkElementDisplayed(PWAHomePage.objActiveTab, "Active tab")) {
//			String tab = getText(PWAHomePage.objActiveTab);
//			System.out.println(tab);
//			logger.info(tab + " tab is highlighted");
//			extent.extentLogger("Tab", tab + " tab is highlighted");
//		} else {
//			logger.error(tabName + " tab is not highlighted");
//			extent.extentLoggerFail("Tab", tabName + " tab is highlighted");
//		}

		extent.HeaderChildNode(" HLS_099 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + " second content title :"
				+ secondCarouselTitle + " and third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + " second content title :" + secondCarouselTitle
				+ " and third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}

		extent.HeaderChildNode(" HLS_100 : Verify the rails name and content are loaded for first 2 scroll");
		for (int i = 1; i <= 2; i++) {
			if (checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray")) {
				System.out.println("Tray is loaded for " + i + " scroll");
				logger.info("Tray is loaded for " + i + " scroll");
				extent.extentLogger("Tray load", "Tray is loaded for " + i + " scroll");
			} else {
				ScrollToTheElement(PWAPremiumPage.objTrayTitle(i));
				checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray");
			}
		}
		extent.HeaderChildNode(" HLS_101 : Verify On click View All/> ");

		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			waitTime(3000);
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(5000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

		extent.HeaderChildNode("HLS_104 :Verify the right side bottom arrow ");
		navigateToAnyScreenOnWeb("Play");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}
		waitTime(3000);
		extent.HeaderChildNode("HLS_103 :Verify the Joystick icon is given on top left for all Play content card");

		checkElementDisplayed(PWAMusicPage.objJoysticktag, "joystick icon");

		extent.HeaderChildNode("HLS_105 :Verify user is navigate to respective games screen");
		if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel")) {
			click(PWAPlayPage.objPlayNowButton, "Play Now button of Carousel");
			// click(PWAHamburgerMenuPage.objplay, "Play icon");
		}

		String currentHandle = getWebDriver().getWindowHandle();
		Set<String> handles = getWebDriver().getWindowHandles();
		@SuppressWarnings("rawtypes")
		Iterator it = handles.iterator();
		for (int i = 0; i < handles.size(); i++) {
			String handle = it.next().toString();
			if (!handle.equals(currentHandle)) {
				getWebDriver().switchTo().window(handle);
				break;
			}
		}
		String currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current URL: " + currentUrl);
		extent.extentLogger("", "Current URL: " + currentUrl);
		if (currentUrl.contains("games")) {
			logger.info("Navigated to Games screen");
			extent.extentLogger("", "Navigated to Games screen");
		} else {
			logger.info("Failed to navigate to Games screen");
			extent.extentLogger("", "Failed to navigate to Games screen");
		}
		Back(1);
		Back(1);
		getWebDriver().switchTo().window(currentHandle);

		extent.HeaderChildNode("HLS_107 :Verify the Joystick icon is given on top left for all Play content card");

		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Danger Dash ", "Search Field");
		checkElementDisplayed(PWASearchPage.objFirstSearchedAssetTitle, "First search result");

		extent.HeaderChildNode(
				"HLS_108 :Verify whether user is able to navigate to Game content from the Search result");
		click(PWASearchPage.objFirstSearchedAssetTitle, "First search result");
		switchToWindow(2);

		String aludigamesURL = getWebDriver().getCurrentUrl();
		if (aludigamesURL.contains("ludigames")) {
			logger.info("Game screen is opened in webview");
			extent.extentLogger("Game", "Game screen is opened in webview");

		} else {
			logger.info(" Game screen is not opened in webview");
		}
		Back(1);
	}

	public void kidsvalidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_109: Verify whether user is able to navigate Kids landing page ");
		PWAPagesNavigationAndTabHighlight(tabName);
		extent.HeaderChildNode("HLS_122 :Verify the right side bottom arrow ");
		waitTime(2000);
		partialScroll();
		partialScroll();
		waitTime(3000);
		if (verifyElementPresent(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {

			logger.info("Back to Top arrow is displayed");
			extent.extentLoggerPass("", "Back to Top arrow is displayed");
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");

		} else {
			logger.error("Back to Top arrow is not displayed");
			extent.extentLoggerFail("", "Back to Top arrow is not displayed");
		}
		extent.HeaderChildNode(" HLS_112 : Verify whether \"Play text\" CTA is displaying on Kids feature carousel");
		checkElementDisplayed(PWAKidsPage.objPlayButton, "Play text on Carousel card");
		extent.HeaderChildNode(" HLS_110 : Verify Feature carousel banners should rotate at fixed interval of time");
		waitTime(5000);
		boolean autoplayingItemsPresent = false;
		// String languageSmallText = allSelectedLanguages();
		Response tabResponse = ResponseInstance.getResponseForPages(tabName.toLowerCase(), "en,hi,kn");
		int carouselItemsCount = tabResponse.jsonPath().get("buckets[0].items.size()");
		System.out.println(carouselItemsCount);
		if (carouselItemsCount > 7)
			carouselItemsCount = 7;
		for (int i = 0; i < carouselItemsCount; i++) {
			try {
				if (tabResponse.jsonPath().get("buckets[0].items[" + i + "].tags[0]").toString().equals("Autoplay")) {
					logger.info("Autorotation could not be verified because Carousel contains auto playing items");
					extent.extentLoggerWarning("",
							"Autorotation could not be verified because Carousel contains auto playing items");
					autoplayingItemsPresent = true;
					break;
				}
			} catch (Exception e) {
			}
		}
		if (autoplayingItemsPresent == false) {
			String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
			new WebDriverWait(getWebDriver(), 15);
			try {
				firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
				waitTime(10000);
				secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
				waitTime(10000);
				thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

			} catch (Exception e) {
				e.getMessage();
			}
			extent.extentLogger("Autorotating",
					"First content title :" + firstCarouselTitle + ", Second content title :" + secondCarouselTitle
							+ " and Third content title :" + thirdCarouselTitle);
			logger.info("First content title :" + firstCarouselTitle + ", Second content title :" + secondCarouselTitle
					+ " and Third content title :" + thirdCarouselTitle);
			if (firstCarouselTitle.equals(secondCarouselTitle) == false
					&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
				softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
				logger.info("Content is auto rotated");
				extent.extentLogger("Autorotating", "Content is auto rotated");
			} else {
				logger.error("Content is not auto rotated");
				extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
			}
		}
		extent.HeaderChildNode(" HLS_111 : Verify the trays displayed in the Kids page.");
		pagesTrayValidation(tabName);
		extent.HeaderChildNode("HLS_114 : Verify that user is able to rotate tray");
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.error("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");
		}
		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		click(PWAMusicPage.objArrowToNavigateTop, "Back to Top Arrow icon");
		waitTime(2000);
		extent.HeaderChildNode(" HLS_113 : Verify View All functionality");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(5000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.error("Not navigated to View All Page");
				extent.extentLoggerFail("View All", "Not navigated to View All Page");
			}
		}
		Back(1);

		extent.HeaderChildNode(" HLS_115 : Verify user can play any Kids content ");

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		click(PWASearchPage.objPremiumSearchResult(keyword), "Premium content");
		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("User is able to watch the content");
			extent.extentLogger(" ", "User is able to watch the content");
		} else {
			logger.info("User is not able to watch the content");
			extent.extentLoggerFail("Consumption Page", "User is not able to watch the content");
		}
		Back(1);

		extent.HeaderChildNode(" HLS_116 : Verify the EDR contents available in the Kids Page.");
		navigateToAnyScreenOnWeb(tabName);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.Objnextarrowcarousel, "Next arrow ");
		waitTime(3000);
		waitForElementAndClick(PWAHomePage.objEduauraaCardCarousel, 20, "Eduauraa Card in Carousel");
		waitTime(3000);

		extent.HeaderChildNode(
				"HLS_117: Verify navigated to Consumption page taps on  EDR content and Claim Offer CTA is displayed below the player.");
		verifyElementPresentAndClick(PWAHomePage.objFirstItemLearnWithEduauraaTray,
				"First card under Learn with Eduauraa tray");
		verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in View All page");
		String consumptionPageTitle = getText(PWAPlayerPage.objContentTitle2);
		System.out.println(consumptionPageTitle);
		extent.extentLogger("", "Navigated to the Consumption page: " + consumptionPageTitle);
		logger.info("Navigated to the Consumption page: " + consumptionPageTitle);
		pausePlayer();
		waitTime(3000);
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			checkElementDisplayed(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer");
			extent.HeaderChildNode(
					"HLS_118: Verify on tapping on Claim offer CTA user should navigates to Select pack page.");
			click(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer");
			if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.info("Navigated to select pack Page");
				extent.extentLogger("Subscription Page", "Navigated to select pack Page");
			} else {
				logger.info("Not navigated to select pack Page");
				extent.extentLoggerFail("Subscription Page", "Not navigated to select pack Page");
			}
		}
		extent.HeaderChildNode(
				"HLS_120: Verify on Tapping Go TO Eduauraa and Continue user should navigate to Eduauraa Sign Up page.");
		if (userType.equals("SubscribedUser")) {
			checkElementDisplayed(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer");
			click(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer");
			checkElementDisplayed(PWAPlayerPage.objContinue, "Continue offer");
			click(PWAPlayerPage.objContinue, "Continue offer");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objEduauraaSignupPage, "Eduauraa Sign Up page")) {
				logger.info("User is navigated to Eduauraa Sign Up page");
				extent.extentLogger("Contact Us", "User is navigated to Eduauraa Sign Up page");
			} else {
				logger.info("Not navigated to Eduauraa Sign Up Page");
				extent.extentLoggerFail("Subscription Page", "Not navigated to Eduauraa Sign Up Page");
			}

		}
		navigateToHome();
		waitTime(3000);
		extent.HeaderChildNode(
				"HLS_121: Verify that Play, share, watchlist CTA and metadata like Movies names are displayed on each content card");
		trayTitleAndContentValidationWithApiDataZeeoriginals(tabName, "kids");
//		extent.HeaderChildNode("HLS_122 :Verify the right side bottom arrow ");
//		navigateToAnyScreenOnWeb(tabName);
//		scrollDownByY(300);
//		scrollDownByY(300);
//		logger.info("Scrolled Up the page");
//		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Back to Top Arrow icon")) {
//			waitTime(2000);
//			click(PWAMusicPage.objArrowToNavigateTop, "Back to Top Arrow icon");
//		} else {
//			logger.error("Back to Top Arrow icon is not displayed");
//			extent.extentLoggerFail("", "Back to Top Arrow icon is not displayed");
//		}
	}

	public void pagesTrayValidation(String tabName) throws Exception {
		int endindex = 0;
		// String languageSmallText = allSelectedLanguages();
		Response resp = ResponseInstance.getResponseForPages(tabName.toLowerCase(), "en,hi,kn");
		List<String> apiTitleList = new LinkedList<String>();
		List<String> apitotaltrays;
		int trays = 0;
		if (tabName.equalsIgnoreCase("live tv")) {
			apitotaltrays = resp.jsonPath().getList("genres");
			if (apitotaltrays.size() > 5)
				trays = 5;
			else
				trays = apitotaltrays.size();
			for (int i = 0; i < trays; i++) {
				String traytitle = resp.jsonPath().getString("genres[" + i + "].value");
				apiTitleList.add(traytitle);
			}
			endindex = trays;
		} else {
			apitotaltrays = resp.jsonPath().getList("buckets");
			if (apitotaltrays.size() > 5)
				trays = 5;
			else
				trays = apitotaltrays.size();
			for (int i = 1; i < trays; i++) {
				String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
				if (!traytitle.contains("ZEEPLEX"))
					apiTitleList.add(traytitle);
			}
			endindex = apiTitleList.size();
		}
		logger.info("Trays from API: " + apiTitleList);
		extent.extentLogger("", "Trays from API: " + apiTitleList);
		for (int j = 0; j < endindex; j++) {
			String apititle = apiTitleList.get(j);
			for (int swipe = 0; swipe < 5; swipe++) {
				try {
					findElement(By.xpath("(//div[@class='trayHeader'])//h2[.=\"" + apititle + "\"]")).getText();
					logger.info("Located Tray " + apititle + " in UI");
					extent.extentLogger("", "Located Tray " + apititle + " in UI");
					break;
				} catch (Exception e) {
					scrollDownByY(350);
					if (swipe == 4) {
						logger.error("Failed to locate Tray " + apititle + " in UI");
						extent.extentLoggerFail("", "Failed to locate Tray " + apititle + " in UI");
					}
				}
			}
		}
		click(PWAZee5OriginalPage.objNavigateToTop, "Back to Top Arrow");
	}

	public void kaltura(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_194 :Validate the Player Controls on Live Content playback");
		PlayerIconVaidationsWeb();
		playerControlOperations();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		extent.HeaderChildNode(
				"HLS_212 :Verify that watch credits button CTA is display at the end credit rolling screen at End of the content ");
		WatchCredit(userType);
		extent.HeaderChildNode("HLS_208 :Validate the UI/UX of upnext rail");
		upnext(userType);

	}

	public void Subscriptionjourney(String userType, String tabName) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(
					"HLS_216 :Verify the user is navigating to the Subscription page by clicking on the Subscribe button across the application");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User is navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			} else {
				logger.info("User is not navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			waitTime(5000);
		}
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("HLS_217 :Validating BuySubscription under MyPlans");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Button");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objPlans, "My Plans")) {
				checkElementDisplayed(PWAHamburgerMenuPage.objBuySubscription, "Buy Subscription");
				click(PWAHamburgerMenuPage.objBuySubscription, "Buy Subscription");
				//checkElementDisplayed(PWAHamburgerMenuPage.objHaveAPrepaidCode, "Have a
				//Prepaid Code");
			}
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User is navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			} else {
				logger.info("User is not navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			extent.HeaderChildNode("HLS_218 : Validating HaveAPrepaidCode under MyPlans");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Button");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objPlans, "My Plans")) {
				//checkElementDisplayed(PWAHamburgerMenuPage.objBuySubscription, "Buy
				//Subscription");
				checkElementDisplayed(PWAHamburgerMenuPage.objHaveAPrepaidCode, "Have a Prepaid Code");
				click(PWAHamburgerMenuPage.objHaveAPrepaidCode, "Have a Prepaid Code");
			}
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User is navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			} else {
				logger.info("User is not navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_219 : Navigate to Subscription flow from by clicking on Get Premium CTA below the player");
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieNoTrailer2");
			zeeSearchForContentAndClickOnFirstResult(keyword);
			waitTime(2000);
			verifyElementPresentAndClick(PWASubscriptionPages.objTeaserGetPremiumButton, "Get Premium Teaser CTA");
			zeeVerifyGetPremiumPopup();
			waitTime(2000);
			zeePaymentPageValidationAndNavigateToHomePage();

			extent.HeaderChildNode(
					"HLS_220 : Navigate to Subscription Flow From Player In-line Subscribe link on Player");
			String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieNoTrailer2");
			zeeSearchForContentAndClickOnFirstResult(keyword1);
//			waitTime(2000);
//			checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title");
//			waitTime(2000);
//			verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Popup Close Button");
			waitTime(2000);
			verifyElementPresentAndClick(PWAPlayerPage.objSubscribeNowLink, "In-Line Subscribe Link on Player");
			zeeVerifyGetPremiumPopup();
			waitTime(2000);
			zeePaymentPageValidationAndNavigateToHomePage();
		}
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"HLS_221: Validate that user should select pack and navigate to account info screen.");

			// Scenario no. 89
			waitTime(5000);
			click(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			//driver.findElement(PWAHomePage.objSubscribeButton).click();			
			waitTime(5000);
			verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page");
			waitTime(3000);
			verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
			waitTime(3000);
//			String selectedPackCategory = findElement(PWASubscriptionPages.objPackCategoryTabSelected).getText();
//			System.out.println("Selected Pack Category is: " + selectedPackCategory);
//			waitTime(3000);
			String defaultSelectedPlan = findElement(PWASubscriptionPages.objSelectedSubscriptionPlanAmount).getText();
			System.out.println("Plan Selected By Default is: " + defaultSelectedPlan);
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount1, "499 pack is selected");
			ScrollToElement(PWASubscriptionPages.objContinueBtn, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
			verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
//			zeePWASelectedPackDisplayValidation();

			extent.HeaderChildNode(
					"HLS_222: Validate that user is navigated to Payment options screen post successful sign in");
			verifyElementPresent(PWALoginPage.objEmailField, "Email ID Text Field");
			waitTime(3000);
			type(PWALoginPage.objEmailField, "igszee5testing@gmail.com", "Email Id");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
					"Continue Button in Account Info Page Highlighted");
			waitTime(3000);
			verifyElementPresent(PWASubscriptionPages.objPasswordField, "Enter Password Text Field");
			waitTime(3000);
//			verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled Proceed Button");
//			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objPasswordField, "Password Field");
			waitTime(3000);
			type(PWASubscriptionPages.objPasswordField, "igs@12345", "Password Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objProceedButtonInPassword, "Continue Button");
			waitTime(3000);
			checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			logout();

		}
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
//			extent.HeaderChildNode("HLS_225: Verify Club pack is available under club section in Select pack page");
//
//			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
//			waitTime(3000);
//			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
//				logger.info("User is navigated to Subscription page");
//				extent.extentLogger("Subscription page", "User is navigated to Subscription page");
//
//			} else {
//				logger.info("User is not navigated to Subscription page");
//				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
//			}
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objClubAccess, "club access");
//
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objPackactive, "Active pack")) {
//
//				String tab = getText(PWAHamburgerMenuPage.objPackactive);
//				System.out.println(tab);
//				logger.info(tab + " pack is highlighted");
//				extent.extentLogger("pack", tab + " pack is highlighted");
//			} else {
//
//				logger.info(" pack is not highlighted");
//				extent.extentLoggerFail("pack", " pack is not highlighted");
//			}
//			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount, "299 pack is selected");
//
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			extent.HeaderChildNode(
					"HLS_223: Verify the JUSPAY iframe loads when the user navigate to the PAYMENT page");
			waitTime(5000);
			click(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			//driver.findElement(PWAHomePage.objSubscribeButton).click();			
			waitTime(5000);
			verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title");
			waitTime(3000);
			verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
//			waitTime(3000);
//			String selectedPackCategory = findElement(PWASubscriptionPages.objPackCategoryTabSelected).getText();
//			System.out.println("Selected Pack Category is: " + selectedPackCategory);
			waitTime(3000);
			String defaultSelectedPlan = findElement(PWASubscriptionPages.objSelectedSubscriptionPlanAmount).getText();
			System.out.println("Plan Selected By Default is: " + defaultSelectedPlan);
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount1, "499 pack is selected");
			ScrollToElement(PWASubscriptionPages.objContinueBtn, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
			checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
			//verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			extent.HeaderChildNode("HLS_227: Validate that user is successfully purchased the subscription pack");

			waitTime(5000);
			WebElement iframeElement = null;
			if (getPlatform().equalsIgnoreCase("Android")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			}

			verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			JSClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			waitTime(5000);
			verifyElementPresent(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,
					"Enter Credit/Debit Card Details");
			verifyElementPresent(PWASubscriptionPages.objCardNumber, "Enter Card Number Field");
			verifyElementPresent(PWASubscriptionPages.objExpiry, "Expiry Field");
			verifyElementPresent(PWASubscriptionPages.objCVV, "CVV Field");
			//Back(1);
			waitTime(5000);
			if (getPlatform().equals("Android")) {
				extent.HeaderChildNode("Validating the payment gateway using Paytm");
				getWebDriver().switchTo().frame(iframeElement);
				verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
				getWebDriver().switchTo().defaultContent();
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				extent.HeaderChildNode("Validating the payment gateway using Wallet");
				verifyElementPresent(PWASubscriptionPages.objWallets, "Wallets");
				click(PWASubscriptionPages.objWallets, "Wallets");
				getWebDriver().switchTo().defaultContent();
			}
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	public void MySubscription(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("HLS_229: Validate that My Subscription button is displayed under My Account menu.");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
				
				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionPage, "My Subscription Page");
					Thread.sleep(5000);
				}
			}
		}
		if (userType.equalsIgnoreCase("Subscribeduser")) {
			extent.HeaderChildNode(
					"HLS_230: Validate that all the active subscription plans are displayed in my subscription screen");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
				
				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionPage, "My Subscription Page");
					Thread.sleep(5000);
				}

				verifyElementPresent(PWAHamburgerMenuPage.objMYSubscriptionActiveStatus, "My active status");
			}

		}
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"HLS_231: Validate that no active subscription plans are displayed in my subscription screen.");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
				
				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionPage, "My Subscription Page");
					Thread.sleep(5000);
				}

				verifyElementPresent(PWAHamburgerMenuPage.objNoActiveSubscription, "No active status");
				verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionTeaserBanner, " subscription teaser banner ");
			}
		}
	}

	public void MyTransactions(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("HLS_232: Validate that My Transactions button is displayed under My Account menu.");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
				
				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPage, "My Transactions Page");
					Thread.sleep(5000);
				}

			}

		}
		if (userType.equalsIgnoreCase("Subscribeduser")) {
			extent.HeaderChildNode(
					"HLS_233: Validate that all the active subscription plans are displayed in my subscription screen");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");

				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPage, "My Transactions Page");
					Thread.sleep(5000);
				}

				verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPackStatus, "My active status");
			}

		}
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"HLS_234: verify Empty state screen with subscription teaser banner is displayed when user doesn't have any purchase history");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");

				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPage, "My Transactions Page");
					Thread.sleep(5000);
				}
				waitTime(3000);

				verifyElementPresent(PWAHamburgerMenuPage.objNoTranscationText, "No Transation");
				verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionTeaserBanner, " subscription teaser banner ");

			}
		}
	}

	public void upgrade(String userType, String tabName) throws Exception {
		if (userType.equalsIgnoreCase("Clubuser")) {
			extent.HeaderChildNode("HLS_235: Verify User is navigated to Subscription page post tap on Upgrade CTA ");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Upgrade button");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User is navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			} else {
				logger.info("User is not navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
			}
			extent.HeaderChildNode(
					"HLS_236: Verify upgrade pop up is displayed for Rsvod user on playing premium content");

			navigateToAnyScreenOnWeb("Club");
			checkElementDisplayed(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			click(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			waitTime(3000);
			checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeWithClub,
					"Subscribe with Club Icon below the player");
			click(PWAHamburgerMenuPage.objSubscribeWithClub, "Subscribe with Club Icon below the player");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objUpgradePopupTitle, "Subscribe Pop Up")) {

				extent.HeaderChildNode(
						"HLS_237: Verify On clicking on proceed button payment screen with the Plan Price, Discount, rounding off, and Payable Price displayed.");
				verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
				waitTime(2000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Popup Proceed Button");
				verifyElementPresent(PWAHamburgerMenuPage.objPlanPrice, "Plan price");
				verifyElementPresent(PWAHamburgerMenuPage.objDiscount, "Discount");
				verifyElementPresent(PWAHamburgerMenuPage.objRoundoff, "Round off");
				verifyElementPresent(PWAHamburgerMenuPage.objTotalPayable, "Total Payable");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			extent.HeaderChildNode(
					"HLS_238:Verify Entitled premium contents are playing post upgrading to All-access plan for club user.");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Upgrade button");
			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount, "pack is selected");
			ScrollToElement(PWASubscriptionPages.objContinueBtn, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
		}

	}

	public void zeeplexvalidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_035: Verify user navigation " + tabName + "page");
		waitTime(15000);
		if (userType.equalsIgnoreCase("Guest")) {
			navigateToAnyScreenOnWeb(tabName);
		}
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			navigateToAnyScreenOnWeb(tabName);
		}
		extent.HeaderChildNode("HLS_036: Verify ZEEPLEX  contents are displayed in Zeeplex landing page");
		verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent, "Zee plex content");

		extent.HeaderChildNode(
				"HLS_037: Verify ZEEPLEX  content trailer are played through clicking Trailer CTA of the Zeeplex contents");
		boolean trailerdisplayed = false;
		for (int i = 0; i < 3; i++) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objTrailer, "ZeePlex movie Trailer")) {
				trailerdisplayed = true;
				break;
			} else {
				partialScroll();
				logger.info("Swiped page..");
				extent.extentLogger("", "Swiped page..");
			}
		}
		if (trailerdisplayed) {
			ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
			click(PWAHamburgerMenuPage.objTrailer, "Trailer");

			waitTime(3000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Navigated to Consumption Page");
				extent.extentLogger("Consumption Page", "Navigated to the Trailer Consumption playback screen");
			} else {
				logger.info("Not navigated to the Trailer Consumption playback screen");
				extent.extentLogger("Consumption Page", "Not navigated to the Trailer Consumption playback screen");
			}
			Back(1);
			if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "Would You Like Popup")) {
				JSClick(PWAPlayerPage.objWouldYouLikeClosePopup, "Close of Popup");
			}
			waitTime(3000);
			partialScroll();
			waitTime(2000);
			partialScroll();
			extent.HeaderChildNode(
					"HLS_038: Verify Rental popup displayed through clicking Rent for INR CTA of the Zeeplex contents");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objrentforINR, "Rent for INR")) {
				ScrollToTheElementWEB(PWAHamburgerMenuPage.objrentforINR);
				click(PWAHamburgerMenuPage.objrentforINR, "Rent for INR");

				if (verifyElementPresent(PWAHamburgerMenuPage.objrentforINRpopup, "Rental Pop Up")) {
					extent.extentLoggerPass("", "Rental pop Up is displayed");
					click(PWAHamburgerMenuPage.objrentalpopupclose, "Rental PopUp Close button");
				} else {
					logger.error("Failed to display rental popup");
					extent.extentLoggerFail("", "Failed to display rental popup");
				}
			} else {
				logger.info("Rent for INR movie contents are not displayed");
				extent.extentLoggerWarning(" ", "Rent for INR movie contents are not displayed");
			}
		} else {
			logger.info("Trailer click, Rent for INR features cannot be tested because trailer unavailable");
			extent.extentLoggerWarning(" ",
					"Trailer click, Rent for INR features cannot be tested because trailer unavailable");
		}
	}

	public void upgrade(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Clubuser")) {
			extent.HeaderChildNode("HLS_235: Verify User is navigated to Subscription page post tap on Upgrade CTA ");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Upgrade button");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User is navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			} else {
				logger.info("User is not navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
			}
			extent.HeaderChildNode(
					"HLS_236: Verify upgrade pop up is displayed for Rsvod user on playing premium content");

			navigateToAnyScreenOnWeb("Club");
			checkElementDisplayed(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			click(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			waitTime(3000);
			checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeWithClub,
					"Subscribe with Club Icon below the player");
			click(PWAHamburgerMenuPage.objSubscribeWithClub, "Subscribe with Club Icon below the player");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objUpgradePopupTitle, "Subscribe Pop Up")) {

				extent.HeaderChildNode(
						"HLS_237: Verify On clicking on proceed button payment screen with the Plan Price, Discount, rounding off, and Payable Price displayed.");
				verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
				waitTime(2000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Popup Proceed Button");
				verifyElementPresent(PWAHamburgerMenuPage.objPlanPrice, "Plan price");
				verifyElementPresent(PWAHamburgerMenuPage.objDiscount, "Discount");
				verifyElementPresent(PWAHamburgerMenuPage.objRoundoff, "Round off");
				verifyElementPresent(PWAHamburgerMenuPage.objTotalPayable, "Total Payable");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			extent.HeaderChildNode(
					"HLS_238:Verify Entitled premium contents are playing post upgrading to All-access plan for club user.");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Upgrade button");
			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount, "pack is selected");
			ScrollToElement(PWASubscriptionPages.objContinueBtn, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
		}
	}

	public void unselectAllContentLanguages() throws Exception {
		List<WebElement> selectedLanguages = getWebDriver().findElements(PWAHamburgerMenuPage.objSelectedLanguages);
		for (int i = 0; i < selectedLanguages.size(); i++) {
			clickElementWithWebElement(selectedLanguages.get(i));
		}
	}

	// ------------------------------------------------------DFP------------------------------------------------------------------------

	public void playerScrubTillMidWeb() {
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		WebElement progressBar = getWebDriver().findElement(PWAPlayerPage.objPlayerProgressBar);
		Actions action = new Actions(getWebDriver());
		action.clickAndHold(scrubber).moveToElement(progressBar, 150, 0).release().perform();
	}

	public void playerScrubTillLastWeb() {
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		WebElement progressBar = getWebDriver().findElement(PWAPlayerPage.objPlayerProgressBar);
		Actions action = new Actions(getWebDriver());
		action.clickAndHold(scrubber).moveToElement(progressBar, 350, 0).release().perform();
	}

	public void DFPValidation(String userType, String dfpAdContent) throws Exception {

		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			click(PWAHomePage.objSearchBtn, "Search Icon");
			type(PWASearchPage.objSearchEditBox, dfpAdContent + "\n", "Search Edit box: " + dfpAdContent);
			waitTime(4000);
			waitForElement(PWASearchPage.objSearchResult(dfpAdContent), 10, "Search Result");
			click(PWASearchPage.objSearchResult(dfpAdContent), "Search Result");
			waitTime(5000);
			click(PWAPremiumPage.obj1stContentInShowDetailPage, "Content Card");
			mandatoryRegistrationPopUp(userType);

			// PRE-ROLL
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("Ad play in progress");
				extent.extentLogger("Ad", "Ad play in progress");
				waitTime(5000);
				waitForPlayerAdToComplete("Video Player");
			} else {
				logger.info("Ad is not available for the content");
				extent.extentLogger("Ad", "Ad is not available for the content");
			}

			waitTime(6000);
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			playerScrubTillMidWeb();
			click(PWAPlayerPage.objPlayerPlay, "Play Icon");

			// MID-ROLL
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("Ad play in progress");
				extent.extentLogger("Ad", "Ad play in progress");
				waitTime(5000);
				waitForPlayerAdToComplete("Video Player");
			} else {
				logger.info("Ad is not available for the content");
				extent.extentLogger("Ad", "Ad is not available for the content");
			}

			waitTime(6000);
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			playerScrubTillLastWeb();
			click(PWAPlayerPage.objPlayerPlay, "Play Icon");

			// POST-ROLL
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("Ad play in progress");
				extent.extentLogger("Ad", "Ad play in progress");
				waitTime(5000);
				waitForPlayerAdToComplete("Video Player");
			} else {
				logger.info("Ad is not available for the content");
				extent.extentLogger("Ad", "Ad is not available for the content");
			}

		}
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void zeeplex(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("PWA_2686 , PWA_2699, PWA_2712 : Verify user navigation " + tabName + "page");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objActiveTab, "Active tab")) {
			String tab = getText(PWAHomePage.objActiveTab);
			System.out.println(tab);
			logger.info(tab + " tab is highlighted");
			extent.extentLogger("Tab", tab + " tab is highlighted");
		} else {
			logger.error(tabName + " tab is not highlighted");
			extent.extentLoggerFail("Tab", tabName + " tab is highlighted");
		}
		extent.HeaderChildNode(" PWA_2687 ,PWA_2700, PWA_2713: Verify content is loaded when user scroll the page");
		scrollDownByY(300);
		logger.info("Scrolled the page UP");
		extent.extentLogger("Tab", "Scrolled the page UP");
		List<WebElement> titles = getWebDriver().findElements(PWAMoviesPage.objTVODTitles);
		ArrayList titlestext = new ArrayList<String>();
		if (titles.size() >= 1) {
			for (int i = 0; i < titles.size(); i++) {
				titlestext.add(titles.get(i).getText());
			}
			logger.info("TVOD Titles displayed: " + titlestext);
			extent.extentLogger("titles", "TVOD Titles displayed: " + titlestext);
			logger.info("TVOD contents are loaded when user scroll the page");
			extent.extentLoggerPass("Tab", "TVOD contents are loaded when user scroll the page");
		} else {
			logger.error("TVOD Titles failed to load after scrolling");
			extent.extentLoggerFail("Tab", "TVOD Titles failed to load after scrolling");
		}
		extent.HeaderChildNode("PWA_2688 , PWA_2701, PWA_2714 : Verify the Plex content trailer is available");
		ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
		click(PWAHamburgerMenuPage.objTrailer, "Trailer button");
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player")) {
				extent.extentLoggerFail("", "Plex content trailer is unavailable");
				logger.error("Plex content trailer is unavailable");
			}
		} else {
			logger.error("Not navigated to the Trailer Consumption playback screen");
			extent.extentLoggerFail("Consumption Page", "Not navigated to the Trailer Consumption playback screen");
		}
		Back(1);
		waitTime(3000);

		extent.HeaderChildNode(
				"PWA_2691 , PWA_2704, PWA_2717 : Verify Rental pop-up is displayed when User Click on Rent INR CTA");
		ScrollToTheElementWEB(PWAHamburgerMenuPage.objrentforINR);
		click(PWAHamburgerMenuPage.objrentforINR, "Rent for INR");
		verifyElementPresent(PWAHamburgerMenuPage.objrentforINRpopup, "Rental Pop Up");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentforINRpopupClose, "Rental Pop Up Close icon");

		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"PWA_2705 ,PWA_2718  : Verify Plex rented details are displayed in My Profile-> Zeeplex rentals");
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
			Thread.sleep(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals Page");
			Thread.sleep(5000);
			Back(1);
		}

		extent.HeaderChildNode(
				"PWA_2693, PWA_2706, PWA_2719 : Verify Zee Plex Theatre comes to You banner is displayed on Top of the page");
		click(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
		verifyElementPresent(PWAHamburgerMenuPage.objZeeplexComesToYou, "Zee Plex 'Theatre comes to You' banner");

		extent.HeaderChildNode(
				"PWA_2694, PWA_2707, PWA_2720 : Verify 'How it works' pop-up is displayed when user taps on 'How it works' CTA");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplexHowitWorks, "How it Works button");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objzeeplexHowitWorkspopup, "Zeeplex How It Works Pop Up");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplexHowitworkspopupClose,
				"Close icon of How It Works Pop Up");

		extent.HeaderChildNode(
				"PWA_2695, PWA_2721, PWA_2708 : Verify not able to watch the Zee plex content once the Watch Time & Rental period expries");
		navigateToAnyScreenOnWeb(tabName);
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			logout();
		}
		waitTime(5000);
		TVODLogin();
		navigateToAnyScreenOnWeb(tabName);
		checkElementDisplayed(PWAHamburgerMenuPage.objzeeplexcontentcard, "ZEEPLEX content card");
		click(PWAHamburgerMenuPage.objzeeplexcontentcard, "ZEEPLEX content card");
		waitTime(5000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objrentforinrbelowtheplayer, "Rent for INR")) {
			if (checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player")) {
				logger.info("Expired User is not able to play the zeeplex content, expected behavior");
				extent.extentLoggerPass("", "Expired User is not able to play the zeeplex content, expected behavior");
			} else {
				extent.extentLoggerFail("", "Trailer is not shown, Expired User can watch the zeeplex content");
				logger.error("Trailer is not shown, Expired User can watch the zeeplex content");
			}
		} else {
			logger.error("Expired User is not displayed with Rent for INR below the card");
			extent.extentLoggerFail("", "Expired User is not displayed with Rent for INR below the card");
		}
		navigateHome();
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			logout();
			ZeeWEBPWALogin(userType);
		}
	}

	public void TVODLogin() throws Exception {
		extent.extentLogger("", "Login through TVOD User");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "tvod@mailnesia.com", "Email Field");
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "123456", "Password field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);

	}

	public void PWAPagesNavigationAndTabHighlight(String Tabname) throws Exception {
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		navigateToAnyScreenOnWeb(Tabname);
		if (verifyElementPresent(PWAHomePage.objHighlightedTab(Tabname), "Highlighted "+Tabname)) {
			logger.info(Tabname + " tab is highlighted, user is able to navigate to " + Tabname + " landing page");
			extent.extentLogger("",
					Tabname + " tab is highlighted, user is able to navigate to " + Tabname + " landing page");
		} else {
			logger.error(Tabname + " tab is not highlighted, user failed to navigate to " + Tabname + " landing page");
			extent.extentLoggerFail("",
					Tabname + " tab is not highlighted, user failed to " + Tabname + " landing page");
		}
	}

	public List<String> InititalSetUpOfConviva(String userType, String zeeTab) throws Exception {
		List<String> returnList = new ArrayList<String>();
		JavascriptExecutor js = (JavascriptExecutor) getWebDriver();
		js.executeScript("window.open('https://google.com/')");
		extent.extentLogger("", "Opened : https://google.com/");
		logger.info("Opened : https://google.com/");
		waitTime(3000);
		String googleTab = "";
		for (String winHandle : getWebDriver().getWindowHandles()) {
			if (!winHandle.equals(zeeTab)) {
				googleTab = winHandle;
				System.out.println("googleTab : " + googleTab);
				getWebDriver().switchTo().window(googleTab);
				break;
			}
		}

		String publicIP = getYourPublicIP();
		getWebDriver().switchTo().window(googleTab);
		getWebDriver().close();// Close Google tab
		logger.info("Closed Google Tab");
		extent.extentLogger("", "Closed Google Tab");
		// -----------------------------------------------------------------------------
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		js.executeScript("window.open('https://pulse.conviva.com/')");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/");
		logger.info("Opened : https://pulse.conviva.com/");
		String convivaTab = "";
		for (String winHandle : getWebDriver().getWindowHandles()) {
			if (!winHandle.equals(zeeTab) && !winHandle.equals(googleTab)) {
				convivaTab = winHandle;
				System.out.println("convivaTab : " + convivaTab);
				getWebDriver().switchTo().window(convivaTab);
				logger.info("Switched to Conviva Tab");
				extent.extentLogger("", "Switched to Conviva Tab");
				break;
			}
		}
		returnList.add(convivaTab);
		waitTime(3000);
		loginToConviva("murali.appadi@zee.esselgroup.com", "Ch@ng3m3!!");
		waitTime(3000);
		click(PWAConvivaPage.objUserTypeDropdown, "User Type dropdown in Conviva");
		waitTime(3000);
		click(PWAConvivaPage.objAdminUser, "Admin User");
		waitTime(7000);
		addIPToDeviceValidation(publicIP);

		String content = "Robin Hood Forever Enemies";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		waitTime(5000);
		waitForPlayerAdToComplete("Video Player");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLoggerPass("", "Waited for 10 seconds");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(5000);
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		click(PWAConvivaPage.objMonitorSessionID(content), "Monitor Session ID");
		String clientID = getElementPropertyToString("data-value", PWAConvivaPage.objClientID, "Client ID");
		extent.extentLogger("", "Client ID Fetched : " + clientID);
		logger.info("Client ID Fetched : " + clientID);
		returnList.add(clientID);
		String viewerID = getElementPropertyToString("data-value", PWAConvivaPage.objViewerID, "Viewer ID");
		extent.extentLogger("", "Viewer ID Fetched : " + viewerID);
		logger.info("Viewer ID Fetched : " + viewerID);
		returnList.add(viewerID);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/filters");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/filters");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/filters");
		frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objSearchFilterField, "Filter Search Field");
		type(PWAConvivaPage.objSearchFilterField, "For_Automation", "Filter Search Field");
		click(PWAConvivaPage.objFiltersSortButton, "Filter Sort button");
		click(PWAConvivaPage.objFiltersEditButton, "Edit button");
		waitTime(5000);
		clearField(PWAConvivaPage.objClientIDVlaueField, "Client Field");
		type(PWAConvivaPage.objClientIDVlaueField, clientID, "Client Field");
		click(PWAConvivaPage.objSaveFilterButton, "Save Filter button");
		applyAutomationFilter();
		return returnList;
	}

	public String verifyAttemptsAndConcurrentPlayCount(String userType, String zeeTab, String convivaTab)
			throws Exception {
		extent.HeaderChildNode("ID 1 : Attempts metric on Pulse");
		System.out.println("------------------- ID 1 : Attempts metric on Pulse -------------------");
		String attemptsContent = "Jhende to enquire about the prospective groom";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, attemptsContent, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(attemptsContent), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(attemptsContent), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitTime(5000);
		waitForPlayerAdToComplete("Video Player");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds");
		logger.info("Waited for 20 seconds");
		String attempts = getElementPropertyToString("innerText", PWAConvivaPage.objAttempts, "Attempts");
		if (attempts.trim().equals("1")) {
			extent.extentLogger("", "Attempts displayed as 1, expected behavior");
			logger.info("Attempts displayed as 1, expected behavior");
		} else {
			extent.extentLoggerFail("", "Attempts displayed as " + attempts + " instead of 1");
			logger.error("Attempts displayed as " + attempts + " instead of 1");
		}
		extent.HeaderChildNode("ID 2 : Concurrent Plays metric on Pulse");
		System.out.println("------------------- ID 2 : Concurrent Plays metric on Pulse -------------------");
		String concurrentPlays = getElementPropertyToString("innerText", PWAConvivaPage.objConcurrentPlays,
				"Concurrent Plays");
		if (concurrentPlays.trim().equals("1")) {
			extent.extentLogger("", "Concurrent Plays displayed as 1, expected behavior");
			logger.info("Concurrent Plays displayed as 1, expected behavior");
		} else {
			extent.extentLoggerFail("", "Concurrent Plays displayed as " + concurrentPlays + " instead of 1");
			logger.error("Concurrent Plays displayed as " + concurrentPlays + " instead of 1");
		}
		extent.HeaderChildNode("ID 11 : Average Frame Rate");
		System.out.println("------------------- ID 11 : Average Frame Rate -------------------");
		String afr = getElementPropertyToString("innerText", PWAConvivaPage.objAverageFrameRate, "Concurrent Plays");
		if (afr.trim().equals("0 fps")) {
			extent.extentLoggerFail("", "AverageFrame Rate displayed as " + afr);
			logger.error("AverageFrame Rate displayed as " + afr);
		} else {
			extent.extentLogger("", "AverageFrame Rate displayed as " + afr);
			logger.info("AverageFrame Rate displayed as " + afr);
		}
		return contentID;
	}

	public void verifyVideoStartupTime(String userType, String zeeTab, String convivaTab, String viewerID,
			String contentID) throws Exception {
		extent.HeaderChildNode("ID 4 : Video Startup Time (VST) with pre-roll");
		System.out.println("------------------- ID 4 : Video Startup Time (VST) with pre-roll -------------------");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		click(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID), "Monitor Session ID of Playing content");
		String vst = "";
		try {
			vst = getElementPropertyToString("innerText", PWAConvivaPage.objVST, "VST");
			extent.extentLogger("", "VST Displayed : " + vst);
			logger.info("VST Displayed : " + vst);
		} catch (Exception e) {
			vst = "";
		}
		if (vst.equalsIgnoreCase("Value Not Available") || vst.equals("") || vst.equals(null)) {
			extent.extentLoggerFail("", "Invalid VST displayed");
			logger.error("Invalid VST displayed");
		}
	}

	public void verifyAveragePercentageComplete(String userType, String zeeTab, String convivaTab, String contentID)
			throws Exception {
		mandatoryRegistrationPopUp(userType);
		extent.HeaderChildNode("ID 5 : Average % Complete");
		System.out.println("------------------- ID 5 : Average % Complete -------------------");
		waitTime(10000);
		extent.extentLogger("", "Waited for 10 seconds for Conviva to get updated");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(7000);
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		click(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID), "Monitor Session ID of Playing content");
		String avgPercentageComplete = getElementPropertyToString("innerText", PWAConvivaPage.objAvgPercentageComplete,
				"Avrage Percentage Complete");
		if (avgPercentageComplete.equalsIgnoreCase("N/A")) {
			extent.extentLoggerFail("", "'N/A' is displayed as Average % Complete");
			logger.error("'N/A' is displayed as Average % Complete");
		} else {
			extent.extentLogger("", "Average % Complete Displayed : " + avgPercentageComplete);
			logger.info("Average % Complete Displayed : " + avgPercentageComplete);
		}
	}

	public void verifyPause(String userType, String zeeTab, String convivaTab, String contentID) throws Exception {
		extent.HeaderChildNode("ID 6 : Verify Pause");
		System.out.println("------------------- ID 6 : Verify Pause -------------------");
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		pausePlayer();
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		if (verifyElementPresentAndClick(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
			logger.info("Waited for 20 seconds for Conviva to get updated");
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
			logger.info("Waited for 20 seconds for Conviva to get updated");
			String totalPlayingTime = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time : " + totalPlayingTime);
			logger.info("Total Playing Time : " + totalPlayingTime);
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
			logger.info("Waited for 20 seconds for Conviva to get updated");
			String totalPlayingTimeAftrWait = getElementPropertyToString("innerText",
					PWAConvivaPage.objTotalPlayingTime, "Total Playing Time");
			extent.extentLogger("", "Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			logger.info("Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			if (totalPlayingTime.equals(totalPlayingTimeAftrWait)) {
				extent.extentLogger("", "No change in Total Playing time because content is paused");
				logger.info("No change in Total Playing time because content is paused");
			} else {
				extent.extentLoggerFail("", "Total Playing time has not remained constant for paused content");
				logger.error("Total Playing time has not remained constant for paused content");
			}
		}
	}

	public void verifyExitBeforeVideoStart(String userType, String zeeTab, String convivaTab) throws Exception {
		extent.HeaderChildNode("ID 9 : Exit Before Video Starts");
		System.out.println("------------------- ID 9 : Exit Before Video Starts -------------------");
		String content = "Love U Ganesha";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitTime(7000);
		for (int i = 0; i < 3; i++) {
			try {
				findElement(PWAPlayerPage.objAd);
				logger.info("Ad play in progress");
				extent.extentLogger("AdPlayInProgress", "Ad play in progress");
				break;
			} catch (Exception e) {
				waitTime(2000);
			}
		}
		Back(1);
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (checkElementDisplayed(PWAConvivaPage.objMonitorSessionIDExitBeforeVideoStart(contentID),
				"Exit Before Video Start entry")) {
			logger.info("Exit Before Video Start is displayed for content " + content + " in Device Validation page");
			extent.extentLogger("",
					"Exit Before Video Start is displayed for content " + content + " in Device Validation Page");
			click(PWAConvivaPage.objMonitorSessionIDExitBeforeVideoStart(contentID),
					"Monitor Session ID of Exit Before Video Start content");
			String sessionStatus = getElementPropertyToString("innerText", PWAConvivaPage.objSessionStatus,
					"Session Status");
			if (sessionStatus.equalsIgnoreCase("Exit Before Video Start")) {
				extent.extentLogger("",
						"Session status is displayed as Exit Before Video Start in Device Validation Details page");
				logger.info("Session status is displayed as Exit Before Video Start in Device Validation Details page");
			} else {
				extent.extentLoggerFail("", "Session Status Displayed : " + sessionStatus);
				logger.error("Session Status Displayed : " + sessionStatus);
			}
		} else {
			logger.error("Exit Before Video Start is not displayed for content " + content);
			extent.extentLoggerFail("", "Exit Before Video Start is not displayed for content " + content);
		}

	}

	public void verifyClickOnProgressBar(String userType, String zeeTab, String convivaTab) throws Exception {
		extent.HeaderChildNode("ID 13 : Verify Click On Progress Bar");
		System.out.println("------------------- ID 13 :Verify Click On Progress Bar -------------------");
		String content = "Love U Ganesha";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		click(PWAPlayerPage.playBtn, "Play button");
		click(PWAPlayerPage.progressBar, "Progress bar");
		waitForPlayerAdToComplete("Video Player");
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		String[] timeAfterClick = currentDuration.split(":");
		int timeAfterClickMin = Integer.parseInt(timeAfterClick[0]) * 60;
		int timeAfterClickSec = Integer.parseInt(timeAfterClick[1]);
		int timeAfterClickSeconds = timeAfterClickMin + timeAfterClickSec;
		logger.info("Time fetched after clicking on Progress Bar in seconds: " + timeAfterClickSeconds);
		extent.extentLogger("timeBeforeForward",
				"Time fetched after clicking on Progress Bar in seconds: " + timeAfterClickSeconds);
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (verifyElementPresentAndClick(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			String totalPlayingTime = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time : " + totalPlayingTime);
			logger.info("Total Playing Time : " + totalPlayingTime);
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds");
			String totalPlayingTimeAftrWait = getElementPropertyToString("innerText",
					PWAConvivaPage.objTotalPlayingTime, "Total Playing Time");
			extent.extentLogger("", "Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			logger.info("Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			String hourString = "", temp = "", minString = "", secString = "";
			try {
				hourString = totalPlayingTimeAftrWait.split(" hour, ")[0].trim();
				System.out.println("hour string : " + hourString);
				temp = totalPlayingTimeAftrWait.split(" hour, ")[1];
				minString = temp.split(" min, ")[0].trim();
				System.out.println("minute string : " + minString);
				secString = temp.split(" min, ")[1].split(" sec")[0];
				System.out.println("second string : " + secString);
			} catch (Exception e) {
				extent.extentLoggerFail("", "Failed to fetch Playing time");
				logger.error("Failed to fetch Playing time");
			}
			int hourInt = 0, minInt = 0, secInt = 0, convivaSecondsInt = 0;
			try {
				hourInt = Integer.parseInt(hourString) * 3600;
			} catch (Exception e) {
			}
			try {
				minInt = Integer.parseInt(minString) * 60;
			} catch (Exception e) {
			}
			try {
				secInt = Integer.parseInt(secString);
			} catch (Exception e) {
			}
			convivaSecondsInt = hourInt + minInt + secInt;
			extent.extentLogger("", "Total Playing Time in seconds: " + convivaSecondsInt);
			logger.info("Total Playing Time in seconds: " + convivaSecondsInt);
			screencapture();
			if (convivaSecondsInt > timeAfterClickSeconds && convivaSecondsInt <= timeAfterClickSeconds + 60) {
				extent.extentLogger("", "Conviva Dashboard Pulse update after click on Progress Bar is successful");
				logger.info("Conviva Dashboard Pulse update after click on Progress Bar  is successful");
			} else {
				extent.extentLoggerFail("",
						"Conviva Dashboard Pulse update after click on Progress Bar is unsuccessful");
				logger.error("Conviva Dashboard Pulse update after click on Progress Bar is unsuccessful");
			}
		}
	}

	public void verifyScrubOnProgressBar(String userType, String zeeTab, String convivaTab) throws Exception {
		String totalPlayingTime = "", totalPlayingTimeAftrWait = "", temp = "", hourString = "", minString = "",
				secString = "";
		int hourInt = 0, minInt = 0, secInt = 0, convivaSecondsInt = 0;
		extent.HeaderChildNode("ID 14 : Verify Scrub On Progress Bar");
		System.out.println("------------------- ID 14 :Scrub Click On Progress Bar -------------------");
		String content = "Mother Teresa";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		click(PWAPlayerPage.playBtn, "Play button");
		Actions act = new Actions(getWebDriver());
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		act.moveToElement(scrubber, 200, 0).click().build().perform();
		waitForPlayerAdToComplete("Video Player");
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		String[] timeAfterClick = currentDuration.split(":");
		int timeAfterClickMin = Integer.parseInt(timeAfterClick[0]) * 60;
		int timeAfterClickSec = Integer.parseInt(timeAfterClick[1]);
		int timeAfterClickSeconds = timeAfterClickMin + timeAfterClickSec;
		logger.info("Time fetched after scrubbing on Progress Bar in seconds: " + timeAfterClickSeconds);
		extent.extentLogger("timeBeforeForward",
				"Time fetched after scrubbing on Progress Bar in seconds: " + timeAfterClickSeconds);
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (verifyElementPresentAndClick(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			totalPlayingTime = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time : " + totalPlayingTime);
			logger.info("Total Playing Time : " + totalPlayingTime);
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds");
			totalPlayingTimeAftrWait = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			logger.info("Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			hourString = totalPlayingTimeAftrWait.split(" hour, ")[0].trim();
			System.out.println("hour string : " + hourString);
			temp = totalPlayingTimeAftrWait.split(" hour, ")[1];
			minString = temp.split(" min, ")[0].trim();
			System.out.println("minute string : " + minString);
			secString = temp.split(" min, ")[1].split(" sec")[0];
			System.out.println("second string : " + secString);
			try {
				hourInt = Integer.parseInt(hourString) * 3600;
			} catch (Exception e) {
			}
			try {
				minInt = Integer.parseInt(minString) * 60;
			} catch (Exception e) {
			}
			try {
				secInt = Integer.parseInt(secString);
			} catch (Exception e) {
			}
			convivaSecondsInt = hourInt + minInt + secInt;
			extent.extentLogger("", "Total Playing Time in seconds: " + convivaSecondsInt);
			logger.info("Total Playing Time in seconds: " + convivaSecondsInt);
			screencapture();
			if (convivaSecondsInt > timeAfterClickSeconds && convivaSecondsInt <= timeAfterClickSeconds + 60) {
				extent.extentLogger("", "Conviva Dashboard Pulse update after scrub on Progress Bar is successful");
				logger.info("Conviva Dashboard Pulse update after scrub on Progress Bar  is successful");
			} else {
				extent.extentLoggerFail("",
						"Conviva Dashboard Pulse update after click on Progress Bar is unsuccessful");
				logger.error("Conviva Dashboard Pulse update after scrub on Progress Bar is unsuccessful");
			}
		}

		extent.HeaderChildNode("ID 15 : Verify Fast forward and Rewind");
		System.out.println("------------------- ID 15 : Verify Fast Forward and Rewind -------------------");
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds");
		click(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds");
		// click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		// click(PWAPlayerPage.playBtn, "Play button");
		// waitForPlayerAdToComplete("Video Player");
		currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		timeAfterClick = currentDuration.split(":");
		timeAfterClickMin = Integer.parseInt(timeAfterClick[0]) * 60;
		timeAfterClickSec = Integer.parseInt(timeAfterClick[1]);
		int timeAfterForwardSeconds = timeAfterClickMin + timeAfterClickSec;
		logger.info("Time fetched after clicking on Forward button in seconds: " + timeAfterForwardSeconds);
		extent.extentLogger("timeBeforeForward",
				"Time fetched after clicking on Forward button in seconds: " + timeAfterForwardSeconds);
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (verifyElementPresentAndClick(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			totalPlayingTime = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time : " + totalPlayingTime);
			logger.info("Total Playing Time : " + totalPlayingTime);
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds");
			totalPlayingTimeAftrWait = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			logger.info("Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			hourString = totalPlayingTimeAftrWait.split(" hour, ")[0].trim();
			System.out.println("hour string : " + hourString);
			temp = totalPlayingTimeAftrWait.split(" hour, ")[1];
			minString = temp.split(" min, ")[0].trim();
			System.out.println("minute string : " + minString);
			secString = temp.split(" min, ")[1].split(" sec")[0];
			System.out.println("second string : " + secString);
			try {
				hourInt = Integer.parseInt(hourString) * 3600;
			} catch (Exception e) {
			}
			try {
				minInt = Integer.parseInt(minString) * 60;
			} catch (Exception e) {
			}
			try {
				secInt = Integer.parseInt(secString);
			} catch (Exception e) {
			}
			convivaSecondsInt = hourInt + minInt + secInt;
			extent.extentLogger("", "Total Playing Time in seconds: " + convivaSecondsInt);
			logger.info("Total Playing Time in seconds: " + convivaSecondsInt);
			screencapture();
			if (convivaSecondsInt > timeAfterForwardSeconds && timeAfterForwardSeconds <= timeAfterClickSeconds + 50) {
				extent.extentLogger("", "Conviva Dashboard Pulse update after Forward is successful");
				logger.info("Conviva Dashboard Pulse update after Forward is successful");
			} else {
				extent.extentLoggerFail("", "Conviva Dashboard Pulse update after Forward is unsuccessful");
				logger.error("Conviva Dashboard Pulse update after Forward is unsuccessful");
			}
		}

		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		click(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds");
		click(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds");
		// click(PWAPlayerPage.playBtn, "Play button");
		waitTime(2000);
		currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		timeAfterClick = currentDuration.split(":");
		timeAfterClickMin = Integer.parseInt(timeAfterClick[0]) * 60;
		timeAfterClickSec = Integer.parseInt(timeAfterClick[1]);
		int timeAfterRewindSeconds = timeAfterClickMin + timeAfterClickSec;
		logger.info("Time fetched after clicking on Rewind button in seconds: " + timeAfterRewindSeconds);
		extent.extentLogger("timeBeforeForward",
				"Time fetched after clicking on Rewind button in seconds: " + timeAfterRewindSeconds);
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (verifyElementPresentAndClick(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			totalPlayingTime = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time : " + totalPlayingTime);
			logger.info("Total Playing Time : " + totalPlayingTime);
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds");
			totalPlayingTimeAftrWait = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			logger.info("Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			try {
				hourString = totalPlayingTimeAftrWait.split(" hour, ")[0].trim();
				System.out.println("hour string : " + hourString);
				temp = totalPlayingTimeAftrWait.split(" hour, ")[1];
				minString = temp.split(" min, ")[0].trim();
				System.out.println("minute string : " + minString);
				secString = temp.split(" min, ")[1].split(" sec")[0];
				System.out.println("second string : " + secString);
			} catch (Exception e) {
				extent.extentLoggerFail("", "Failed to fetch time");
				logger.error("Failed to fetch time");
			}
			try {
				hourInt = Integer.parseInt(hourString) * 3600;
			} catch (Exception e) {
			}
			try {
				minInt = Integer.parseInt(minString) * 60;
			} catch (Exception e) {
			}
			try {
				secInt = Integer.parseInt(secString);
			} catch (Exception e) {
			}
			convivaSecondsInt = hourInt + minInt + secInt;
			extent.extentLogger("", "Total Playing Time in seconds: " + convivaSecondsInt);
			logger.info("Total Playing Time in seconds: " + convivaSecondsInt);
			screencapture();
			if (convivaSecondsInt > timeAfterRewindSeconds && timeAfterRewindSeconds <= timeAfterClickSeconds + 30) {
				extent.extentLogger("", "Conviva Dashboard Pulse update after Rewind is successful");
				logger.info("Conviva Dashboard Pulse update after Rewind is successful");
			} else {
				extent.extentLoggerFail("", "Conviva Dashboard Pulse update after Rewind is unsuccessful");
				logger.error("Conviva Dashboard Pulse update after Rewind is unsuccessful");
			}
		}
	}

	@SuppressWarnings("unused")
	public void verifySessionClose(String userType, String zeeTab, String convivaTab) throws Exception {
		extent.HeaderChildNode("ID 20 : Verify Session Close");
		System.out.println("------------------- ID 20 : Verify Session Close -------------------");
		String content = "To The Rescue";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		navigateToHome();
		extent.extentLogger("", "Navigated to Home Page to close session");
		logger.info("Navigated to Home Page to close session");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds");
		logger.info("Waited for 20 seconds");
		String concurrentPlays = getElementPropertyToString("innerText", PWAConvivaPage.objConcurrentPlays,
				"Concurrent Plays");
		if (concurrentPlays.trim().equals("0") || concurrentPlays.trim().equals("1")) {
			extent.extentLogger("", "Concurrent Plays displayed as 0, expected behavior for session close");
			logger.info("Concurrent Plays displayed as 0, expected behavior for session close");
		} else {
			extent.extentLoggerFail("",
					"Concurrent Plays displayed as " + concurrentPlays + " instead of 0 or 1 for session closed");
			logger.error("Concurrent Plays displayed as " + concurrentPlays + " instead of 0 or 1 for session closed");
		}

		extent.HeaderChildNode("ID 21 : Verify Session Ended");
		System.out.println("------------------- ID 21 : Verify Session Ended -------------------");
		content = "Simba Junior: In New York";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		contentURL = getWebDriver().getCurrentUrl();
		abc = contentURL.split("/");
		contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		click(PWAPlayerPage.playBtn, "Play button");
		Actions act = new Actions(getWebDriver());
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		WebElement seekbar = getWebDriver().findElement(PWAPlayerPage.objPlayerSeekBar);
		System.out.println(seekbar.getSize().getWidth());
		System.out.println(scrubber.getLocation().getX());
		int x = seekbar.getSize().getWidth();
		act.moveToElement(scrubber, 655, 0).click().build().perform();
		extent.extentLogger("", "Scrubbed to end of the player");
		logger.info("Scrubbed to end of the player");
		mandatoryRegistrationPopUp(userType);
		screencapture();
		waitTime(15000);
		extent.extentLogger("", "Waited for 15 seconds to complete the play");
		logger.info("Waited for 15 seconds to complete the play");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		concurrentPlays = getElementPropertyToString("innerText", PWAConvivaPage.objConcurrentPlays,
				"Concurrent Plays");
		if (concurrentPlays.trim().equals("0")) {
			extent.extentLogger("", "Concurrent Plays displayed as 0, expected behavior for session ended");
			logger.info("Concurrent Plays displayed as 0, expected behavior for session ended");
		} else {
			extent.extentLoggerFail("",
					"Concurrent Plays displayed as " + concurrentPlays + " instead of 0 for session ended");
			logger.error("Concurrent Plays displayed as " + concurrentPlays + " instead of 0 for session ended");
		}

	}

	public void verifyPlayAfterMidRoll(String userType, String zeeTab, String convivaTab) throws Exception {

		extent.HeaderChildNode("ID 27, ID 29 : Verify Play After Mid Roll");
		System.out.println("------------------- ID 27, ID 29 : Verify Play After Mid Roll -------------------");
		String content = "Robin Hood Forever Enemies";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		click(PWAPlayerPage.playBtn, "Play button");
		Actions act = new Actions(getWebDriver());
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		act.moveToElement(scrubber, 450, 0).click().build().perform();
		extent.extentLogger("", "Scrubbed to middle of the player");
		logger.info("Scrubbed to middle of the player");
		mandatoryRegistrationPopUp(userType);
		screencapture();
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player after midroll: " + currentDuration);
		logger.info("Current Duration displayed on the player after midroll: " + currentDuration);
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (checkElementDisplayed(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			extent.extentLogger("", "Session is maintained in Pulse after the midroll");
			logger.info("Session is maintained in Pulse after the midroll");
		} else {
			extent.extentLoggerFail("", "Session is not maintained in Pulse after the midroll");
			logger.error("Session is not maintained in Pulse after the midroll");
		}

	}

	public void verifyPlayAfterPostRoll(String userType, String zeeTab, String convivaTab) throws Exception {

		extent.HeaderChildNode("ID 28 : Verify Play After Post Roll");
		System.out.println("------------------- ID 28 : Verify Play After Post Roll -------------------");
		String content = "Robin Hood And The Invincible Knight";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		click(PWAPlayerPage.playBtn, "Play button");
		Actions act = new Actions(getWebDriver());
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		act.moveToElement(scrubber, 700, 0).click().build().perform();
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "Scrubbed to end of the player");
		logger.info("Scrubbed to end of the player");
		screencapture();
		String consumptionPageTitle = "";
		for (int i = 0; i < 30; i++) {
			try {
				findElement(PWAPlayerPage.objAd);
				if (Math.floorMod(i, 5) == 0) {
					logger.info("Postroll Ad play in progress");
					extent.extentLogger("AdPlayInProgress", "Postroll Ad play in progress");
				}
			} catch (Exception e) {
			}
			try {
				consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
						"Content Title").toString();
				System.out.println(consumptionPageTitle);
				if (!consumptionPageTitle.equalsIgnoreCase(content)) {
					logger.info("Current content play complete, next content playing : " + consumptionPageTitle);
					extent.extentLogger("",
							"Current content play complete, next content playing : " + consumptionPageTitle);
					break;
				} else
					waitTime(5000);
			} catch (Exception e) {
				waitTime(5000);
			}
		}
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		extent.extentLogger("", "Waited for 10 seconds for Conviva to get updated");
		logger.info("Waited for 10 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		waitTime(3000);
		if (checkElementDisplayed(PWAConvivaPage.objMonitorSessionIDPlayedContent(contentID),
				"Monitor Session ID of Played content")) {
			extent.extentLogger("", "Session is maintained in Pulse after the postroll");
			logger.info("Session is maintained in Pulse after the postroll");
		} else {
			extent.extentLoggerFail("", "Session is not maintained in Pulse after the postroll");
			logger.error("Session is not maintained in Pulse after the postroll");
		}

	}

	@SuppressWarnings({ "unused", "rawtypes" })
	public ArrayList verifyPlayOnAdClick(String userType, String zeeTab, String convivaTab) throws Exception {
		ArrayList<String> returnString = new ArrayList<String>();
		extent.HeaderChildNode("ID 29 : Verify Play On Ad Click");
		System.out.println("------------------- ID 29 : Verify Play On Ad Click -------------------");
		String content = "Episode 1 - Spring Foolery";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);

		Response resp = null;
		for (int i = 0; i < 10; i++) {
			resp = ResponseInstance.getContentDetails(contentID, "content");
			// System.out.println(resp.getBody().asString());
			if (!resp.getBody().asString().contains("\"error_code\":401")) {
				break;
			} else
				waitTime(1000);
		}
		String contentTitleAPI = resp.jsonPath().get("title").toString().trim();
		returnString.add(contentTitleAPI);
		String contentIdAPI = resp.jsonPath().get("id").toString().trim();
		returnString.add(contentID);
		String durationAPI = resp.jsonPath().get("duration").toString();
		returnString.add(durationAPI);
		String episodeNumber = resp.jsonPath().get("orderid").toString();
		returnString.add(episodeNumber);
		String assetTypeAPI = resp.jsonPath().get("asset_subtype").toString().trim();
		returnString.add(assetTypeAPI);
		String tvshowAPI = "";
		if (assetTypeAPI.equalsIgnoreCase("episode")) {
			tvshowAPI = resp.jsonPath().get("tvshow.title").toString();
		}
		returnString.add(tvshowAPI);
		String oriLangAPI = resp.jsonPath().get("languages[0]");
		returnString.add(oriLangAPI);
		String releaseDateAPI = resp.jsonPath().get("release_date");
		releaseDateAPI = releaseDateAPI.split("T")[0];
		String yr = releaseDateAPI.split("-")[0];
		String month = releaseDateAPI.split("-")[1];
		String date = releaseDateAPI.split("-")[2];
		releaseDateAPI = dateConversionForConviva(date + "/" + month + "/" + yr);
		System.out.println(releaseDateAPI);
		returnString.add(releaseDateAPI);
		int genreAPIsize = resp.jsonPath().get("genre.size()");
		String genreAPI = "";
		for (int i = 0; i < genreAPIsize; i++) {
			String genrevalue = resp.jsonPath().get("genre[" + i + "]").toString().split("value=")[1].split("}")[0];
			genreAPI = genreAPI + genrevalue + " ";
		}
		genreAPI = genreAPI.trim();
		returnString.add(genreAPI);
		String siteExp = contentURL.split("://")[1].split("/")[0];
		returnString.add(siteExp);
		for (int i = 0; i < 3; i++) {
			try {
				findElement(PWAPlayerPage.objAd);
				logger.info("Ad play in progress");
				extent.extentLogger("AdPlayInProgress", "Ad play in progress");
				waitTime(5000);
				break;
			} catch (Exception e) {
				waitTime(5000);
			}
		}

		WebElement AdTimeContainer = getWebDriver().findElement(PWAConvivaPage.objAdUi);
		int Adx = AdTimeContainer.getLocation().getX();
		System.out.println(Adx);
		int Ady = AdTimeContainer.getLocation().getY();
		System.out.println(Ady);
		int clickx = Adx;
		int clicky = Ady - 10;
		Actions act = new Actions(getWebDriver());
		act.moveToElement(AdTimeContainer).moveByOffset(5, -20).click().build().perform();
		logger.info("Clicked on Ad overlay");
		extent.extentLogger("AdPlayInProgress", "Clicked on Ad overlay");
		waitTime(3000);

		String AdTab = "";
		for (String winHandle : getWebDriver().getWindowHandles()) {
			if (!winHandle.equals(zeeTab) && !winHandle.equals(convivaTab)) {
				AdTab = winHandle;
				System.out.println("AdTab : " + AdTab);
				getWebDriver().switchTo().window(AdTab);
				String AdUrl = getWebDriver().getCurrentUrl();
				logger.info("Ad URL Displayed: " + AdUrl);
				extent.extentLogger("", "Ad URL Displayed: " + AdUrl);
				getWebDriver().switchTo().window(AdTab).close();
				logger.info("Closed the Ad Tab");
				extent.extentLogger("", "Closed the Ad Tab");
				break;
			}
		}
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (checkElementDisplayed(PWAConvivaPage.objMonitorSessionIDStartedNotJoinedContent(contentID),
				"Monitor Session ID of 'Started- Not Joined' content")) {
			extent.extentLogger("", "Session is maintained in Pulse on Ad Click before content play");
			logger.info("Session is maintained in Pulse on Ad Click before content play");
		} else {
			extent.extentLoggerFail("", "Session is not maintained in Pulse on Ad Click before content play");
			logger.error("Session is not maintained in Pulse on Ad Click before content play");
		}
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		act.moveToElement(AdTimeContainer).moveByOffset(5, -20).click().build().perform();
		logger.info("Clicked on Ad overlay to resume Ad Play");
		extent.extentLogger("AdPlayInProgress", "Clicked on Ad overlay to resume Ad Play");
		waitForPlayerAdToComplete("Video Player");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		if (checkElementDisplayed(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			extent.extentLogger("", "Session is maintained in Pulse after Ad play");
			logger.info("Session is maintained in Pulse after Ad play");
		} else {
			extent.extentLoggerFail("", "Session is not maintained in Pulse after Ad play");
			logger.error("Session is not maintained in Pulse after Ad play");
		}
		extent.HeaderChildNode("ID 42 : Verify CDN mapping");
		System.out.println("------------------- ID 42 : Verify CDN mapping -------------------");
		String cdn = "";
		for (int i = 0; i < 5; i++) {
			try {
				getWebDriver().findElement(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID)).click();
				extent.extentLogger("", "Clicked on Monitor Session ID of Playing content");
				logger.info("Clicked on Monitor Session ID of Playing content");
				cdn = getElementPropertyToString("innerText", PWAConvivaPage.objCDN, "CDN");

				break;
			} catch (Exception e) {
			}
		}
		if (cdn.equals("") || cdn.equalsIgnoreCase("NA") || cdn.equals(null) || cdn.equalsIgnoreCase("UNKNOWN")) {
			extent.extentLoggerFail("", "Inalid CDN is displayed :" + cdn);
			logger.error("Inalid CDN is displayed : " + cdn);
		} else {
			extent.extentLogger("", "CDN displayed : " + cdn);
			logger.info("CDN displayed : " + cdn);
		}
		return returnString;
	}

	/**
	 * CONVIVA
	 */

	@SuppressWarnings({ "unchecked", "rawtypes", "unused" })
	public void ConvivaVerification(String userType) throws Exception {
		extent.HeaderChildNode("Conviva launch, login and initial setup");
		System.out.println("------------------- Conviva launch, login and initial setup -------------------");
		String zeeTab = getWebDriver().getWindowHandle();
		System.out.println("zeeTab : " + zeeTab);
		List<String> tabAndIDs = InititalSetUpOfConviva(userType, zeeTab);
		String convivaTab = tabAndIDs.get(0);
		String clientID = tabAndIDs.get(1);
		String viewerID = tabAndIDs.get(2);
		String contentID = verifyAttemptsAndConcurrentPlayCount(userType, zeeTab, convivaTab);
		verifyVideoStartupTime(userType, zeeTab, convivaTab, viewerID, contentID);
		verifyAveragePercentageComplete(userType, zeeTab, convivaTab, contentID);
		verifyPause(userType, zeeTab, convivaTab, contentID);
		verifyExitBeforeVideoStart(userType, zeeTab, convivaTab);
		verifyClickOnProgressBar(userType, zeeTab, convivaTab);
		verifyScrubOnProgressBar(userType, zeeTab, convivaTab);
		verifySessionClose(userType, zeeTab, convivaTab);
		verifyPlayAfterMidRoll(userType, zeeTab, convivaTab);
		verifyPlayAfterPostRoll(userType, zeeTab, convivaTab);
		ArrayList assetDetails = verifyPlayOnAdClick(userType, zeeTab, convivaTab);
		String userAgentExpected = verifyDeviceTags(userType, zeeTab, convivaTab);
		assetDetails.add(userAgentExpected);
		verifyRequiredTags(assetDetails);
		verifyCustomTags(assetDetails, zeeTab, convivaTab);
	}

	@SuppressWarnings("unused")
	public String verifyDeviceTags(String userType, String zeeTab, String convivaTab) throws Exception {
		extent.HeaderChildNode("ID 45 : Verify Device Tags");
		System.out.println("------------------- ID 45 : Verify Device Tags -------------------");
		String browserExp = "", browserVersionExp = "", OSExp = "", OSVersionExp = "", UserAgentExpected = "";
		String browserActual = "", browserVersionActual = "", deviceHWTypeActual = "", deviceOSActual = "",
				deviceOSFamilyActual = "", deviceOSVersionActual = "", playerFWNameActual = "";
		getWebDriver().switchTo().window(zeeTab);
		JavascriptExecutor js = (JavascriptExecutor) getWebDriver();
		js.executeScript("window.open('https://google.com/')");
		String ChromeVersionTab = "";
		System.out.println(getWebDriver().getWindowHandles());
		for (String winHandle : getWebDriver().getWindowHandles()) {
			if (!winHandle.equals(zeeTab) && !winHandle.equals(convivaTab)) {
				ChromeVersionTab = winHandle;
				System.out.println("ChromeVersionTab : " + ChromeVersionTab);
				getWebDriver().switchTo().window(ChromeVersionTab);
				getWebDriver().get("chrome://version/");
				extent.extentLogger("", "Opened : chrome://version/");
				logger.info("Opened : chrome://version/");
				browserExp = "Chrome";
				logger.info("Browser fetched : " + browserExp);
				extent.extentLogger("", "Browser fetched : " + browserExp);
				browserVersionExp = getElementPropertyToString("innerText", PWAConvivaPage.objChromeVersionFromChrome,
						"Chrome Version");
				browserVersionExp = "Chrome " + browserVersionExp;
				logger.info("Browser version fetched : " + browserVersionExp);
				extent.extentLogger("", "Browser version fetched : " + browserVersionExp);
				OSExp = getElementPropertyToString("innerText", PWAConvivaPage.objSystemOSFromChrome, "System OS");
				logger.info("OS fetched : " + OSExp);
				extent.extentLogger("", "OS fetched : " + OSExp);
				OSVersionExp = getElementPropertyToString("innerText", PWAConvivaPage.objSystemOSVersionFromChrome,
						"System OS Version");
				logger.info("OS Version fetched : " + OSVersionExp);
				extent.extentLogger("", "OS version fetched : " + OSVersionExp);
				OSVersionExp = OSExp + " " + OSVersionExp.split(" ")[0];
				UserAgentExpected = getElementPropertyToString("innerText", PWAConvivaPage.objUserAgentFromChrome,
						"User Agent");
				logger.info("User Agent fetched : " + UserAgentExpected);
				extent.extentLogger("", "User Agent fetched : " + UserAgentExpected);
				getWebDriver().switchTo().window(ChromeVersionTab).close();
				logger.info("Closed the Chrome Version info Tab");
				extent.extentLogger("", "Closed the Chrome Version info Tab");
				break;
			}
		}
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		browserActual = getElementPropertyToString("innerText", PWAConvivaPage.objBrowserName, "Browser");
		logger.info("Browser fetched from Conviva Tab : " + browserActual);
		extent.extentLogger("", "Browser fetched from Conviva Tab : " + browserActual);
		if (browserActual.equals(browserExp)) {
			logger.info("Verified correct Browser");
			extent.extentLogger("", "Verified correct Browser");
		} else {
			logger.error("Verified incorrect Browser");
			extent.extentLoggerFail("", "Verified incorrect Browser");
		}

		browserVersionActual = getElementPropertyToString("innerText", PWAConvivaPage.objBrowserVersion,
				"Browser Version");
		logger.info("Browser Version fetched from Conviva Tab : " + browserVersionActual);
		extent.extentLogger("", "Browser Version fetched from Conviva Tab : " + browserVersionActual);
		if (browserVersionActual.equals(browserVersionExp)) {
			logger.info("Verified correct Browser Version");
			extent.extentLogger("", "Verified correct Browser Version");
		} else {
			logger.error("Verified incorrect Browser Version");
			extent.extentLoggerFail("", "Verified incorrect Browser Version");
		}

		deviceHWTypeActual = getElementPropertyToString("innerText", PWAConvivaPage.objDeviceHardwareType,
				"Device HW Type");
		logger.info("Device Hardware Type fetched from Conviva Tab : " + deviceHWTypeActual);
		extent.extentLogger("", "Device Hardware Type fetched from Conviva Tab : " + deviceHWTypeActual);
		if (deviceHWTypeActual.equals("Desktop")) {
			logger.info("Verified correct Device Hardware Type");
			extent.extentLogger("", "Verified correct Device Hardware Type");
		} else {
			logger.error("Verified incorrect Device Hardware Type");
			extent.extentLoggerFail("", "Verified incorrect Device Hardware Type");
		}
		deviceOSActual = getElementPropertyToString("innerText", PWAConvivaPage.objDeviceOS, "Device OS");
		logger.info("Device OS fetched from Conviva Tab : " + deviceOSActual);
		extent.extentLogger("", "Device OS fetched from Conviva Tab : " + deviceOSActual);
		if (deviceOSActual.equals(OSVersionExp)) {
			logger.info("Verified correct Device OS");
			extent.extentLogger("", "Verified correct Device OS");
		} else {
			logger.error("Verified incorrect Device OS");
			extent.extentLoggerFail("", "Verified incorrect Device OS");
		}
		deviceOSFamilyActual = getElementPropertyToString("innerText", PWAConvivaPage.objDeviceOSFamily,
				"Device OS Family");
		logger.info("Device OS Family fetched from Conviva Tab : " + deviceOSFamilyActual);
		extent.extentLogger("", "Device OS Family fetched from Conviva Tab : " + deviceOSFamilyActual);
		if (deviceOSFamilyActual.equals(OSExp)) {
			logger.info("Verified correct Device OS Family");
			extent.extentLogger("", "Verified correct Device OS Family");
		} else {
			logger.error("Verified incorrect Device OS Family");
			extent.extentLoggerFail("", "Verified incorrect Device OS Family");
		}
		playerFWNameActual = getElementPropertyToString("innerText", PWAConvivaPage.objPlayerFrameworkName,
				"Player FW Name");
		logger.info("Player Framework Name fetched from Conviva Tab : " + playerFWNameActual);
		extent.extentLogger("", "Player Framework Name fetched from Conviva Tab : " + playerFWNameActual);
		if (playerFWNameActual.equals("Kaltura Player")) {
			logger.info("Verified correct Player Framework Name");
			extent.extentLogger("", "Verified correct Player Framework Name");
		} else {
			logger.error("Verified incorrect Player Framework Name");
			extent.extentLoggerFail("", "Verified incorrect Player Framework Name");
		}
		return UserAgentExpected;
	}

	@SuppressWarnings("rawtypes")
	public void verifyRequiredTags(ArrayList assetDetails) throws Exception {
		extent.HeaderChildNode("ID 46 : Verify Required Tags");
		System.out.println("------------------- ID 46 : Verify Required Tags -------------------");
		String contentTitleAPI = assetDetails.get(0).toString();
		extent.extentLogger("", "Content Title from API: " + contentTitleAPI);
		logger.info("Content Title from API: " + contentTitleAPI);
		String contentIdAPI = assetDetails.get(1).toString();
		extent.extentLogger("", "Content ID from API: " + contentIdAPI);
		logger.info("Content ID from API: " + contentIdAPI);
		String assetNameExpected = "[" + contentIdAPI + "]" + " " + contentTitleAPI;
		String assetDurationAPI = assetDetails.get(2).toString();
		extent.extentLogger("apidata", "Asset Duration fetched from API: " + assetDurationAPI);
		logger.info("Asset Duration fetched from API: " + assetDurationAPI);

		String AssetNameActual = getElementPropertyToString("innerText", PWAConvivaPage.objAssetName, "Asset Name");
		logger.info("Asset Name from Conviva Tab : " + AssetNameActual);
		extent.extentLogger("", "Asset Name from Conviva Tab :  " + AssetNameActual);
		if (AssetNameActual.equals(assetNameExpected)) {
			logger.info("Verified correct Asset Name");
			extent.extentLogger("", "Verified correct Asset Name");
		} else {
			logger.error("Verified incorrect Asset Name");
			extent.extentLoggerFail("", "Verified incorrect Asset Name");
		}

		String AssetDurationActual = getElementPropertyToString("innerText", PWAConvivaPage.objAssetDuration,
				"Asset Duration");
		logger.info("Asset Duration from Conviva Tab : " + AssetDurationActual);
		extent.extentLogger("", "Asset Duration from Conviva Tab :  " + AssetDurationActual);
		if (AssetDurationActual.split(" ")[0].equals(assetDurationAPI)) {
			logger.info("Verified correct Asset Duration");
			extent.extentLogger("", "Verified correct Asset Duration");
		} else {
			logger.error("Verified incorrect Asset Duration");
			extent.extentLoggerFail("", "Verified incorrect Asset Name");
		}

	}

	@SuppressWarnings({ "unused", "rawtypes" })
	public void verifyCustomTags(ArrayList assetDetails, String zeeTab, String convivaTab) throws Exception {
		extent.HeaderChildNode("ID 47 : Verify Custom Tags");
		System.out.println("------------------- ID 47 : Verify Custom Tags -------------------");
		String contentTitleAPI = assetDetails.get(0).toString();
		extent.extentLogger("", "Content Title from API: " + contentTitleAPI);
		logger.info("Content Title from API: " + contentTitleAPI);
		String contentIdAPI = assetDetails.get(1).toString();
		extent.extentLogger("", "Content ID from API: " + contentIdAPI);
		logger.info("Content ID from API: " + contentIdAPI);
		String assetNameExpected = "[" + contentIdAPI + "]" + " " + contentTitleAPI;
		String episodeNumberAPI = assetDetails.get(3).toString();
		extent.extentLogger("apidata", "Episode number fetched from API: " + episodeNumberAPI);
		logger.info("Episode number fetched from API: " + episodeNumberAPI);
		String assetTypeAPI = assetDetails.get(4).toString();
		extent.extentLogger("", "Content Type fetched from API: " + assetTypeAPI);
		logger.info("Content Type fetched from API: " + assetTypeAPI);
		String tvShowAPI = assetDetails.get(5).toString();
		extent.extentLogger("apidata", "Show fetched from API: " + tvShowAPI);
		logger.info("Show fetched from API: " + tvShowAPI);
		String oriLangAPI = assetDetails.get(6).toString();
		extent.extentLogger("", "Language from API: " + oriLangAPI);
		logger.info("Language from API: " + oriLangAPI);
		String releaseDateAPI = assetDetails.get(7).toString();
		extent.extentLogger("", "Release Date from API: " + releaseDateAPI);
		logger.info("Release Date from API: " + releaseDateAPI);
		String genreAPI = assetDetails.get(8).toString();
		extent.extentLogger("", "Genre from API: " + genreAPI);
		logger.info("Genre from API: " + genreAPI);
		String siteExp = assetDetails.get(9).toString();
		extent.extentLogger("", "Expected Site: " + siteExp);
		logger.info("Expected Site: " + siteExp);
		String userAgentExp = assetDetails.get(10).toString();
		extent.extentLogger("", "Expected UserAgent fetched from Chrome: " + userAgentExp);
		logger.info("Expected UserAgent fetched from Chrome: " + userAgentExp);

		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to ZEE5 Tab");
		extent.extentLogger("", "Switched to ZEE5 Tab");
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		partialScroll();
		String version = getText(PWAHamburgerMenuPage.objBuildVersion);
		logger.info("App Build version is : " + version);
		extent.extentLogger("version", "App Build version is : " + version);

		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		String contentTypeAct = getElementPropertyToString("innerText", PWAConvivaPage.objContentType, "Content Type");
		logger.info("Content Type fetched from Conviva Tab : " + contentTypeAct);
		extent.extentLogger("", "Content Type fetched from Conviva Tab : " + contentTypeAct);
		if (contentTypeAct.equals(assetTypeAPI)) {
			logger.info("Verified correct Content Type");
			extent.extentLogger("", "Verified correct Content Type");
		} else {
			logger.error("Verified incorrect Browser");
			extent.extentLoggerFail("", "Verified incorrect Browser");
		}
		String deviceAct = getElementPropertyToString("innerText", PWAConvivaPage.objDevice, "Device");
		logger.info("Device fetched from Conviva Tab : " + deviceAct);
		extent.extentLogger("", "Device fetched from Conviva Tab : " + deviceAct);
		if (deviceAct.equals("Web")) {
			logger.info("Verified correct Device");
			extent.extentLogger("", "Verified correct Device");
		} else {
			logger.error("Verified incorrect Device");
			extent.extentLoggerFail("", "Verified incorrect Device");
		}
		String appVersionAct = getElementPropertyToString("innerText", PWAConvivaPage.objAppVersion,
				"ZEE5 App Version");
		logger.info("ZEE5 App Version fetched from Conviva Tab : " + appVersionAct);
		extent.extentLogger("", "ZEE5 App Version fetched from Conviva Tab : " + appVersionAct);
		if (appVersionAct.equals(version.split(" ")[1])) {
			logger.info("Verified correct ZEE5 App Version");
			extent.extentLogger("", "Verified correct ZEE5 App Version");
		} else {
			logger.error("Verified incorrect ZEE5 App Version");
			extent.extentLoggerFail("", "Verified incorrect ZEE5 App Version");
		}
		String langAct = getElementPropertyToString("innerText", PWAConvivaPage.objAudioLanguage, "Original Language");
		logger.info("Audio Language fetched from Conviva Tab : " + langAct);
		extent.extentLogger("", "Audio Language fetched from Conviva Tab : " + langAct);
		if (langAct.equals("en")) {
			logger.info("Verified correct Audio Language");
			extent.extentLogger("", "Verified correct Audio Language");
		} else {
			logger.error("Verified incorrect Audio Language");
			extent.extentLoggerFail("", "Verified incorrect Audio Language");
		}
		String categoryAct = getElementPropertyToString("innerText", PWAConvivaPage.objCategory, "Category");
		logger.info("Category fetched from Conviva Tab : " + categoryAct);
		extent.extentLogger("", "Category fetched from Conviva Tab : " + categoryAct);
		if (categoryAct.equals(assetTypeAPI)) {
			logger.info("Verified correct Category");
			extent.extentLogger("", "Verified correct Category");
		} else {
			logger.error("Verified incorrect Category");
			extent.extentLoggerFail("", "Verified incorrect Category");
		}
		String contentIDAct = getElementPropertyToString("innerText", PWAConvivaPage.objContentIDC, "Content ID");
		logger.info("Content ID fetched from Conviva Tab : " + contentIDAct);
		extent.extentLogger("", "Content ID fetched from Conviva Tab : " + contentIDAct);
		if (contentIDAct.equals(contentIdAPI)) {
			logger.info("Verified correct Content ID");
			extent.extentLogger("", "Verified correct Content ID");
		} else {
			logger.error("Verified incorrect Content ID");
			extent.extentLoggerFail("", "Verified incorrect Content ID");
		}
		String episodeNameAct = getElementPropertyToString("innerText", PWAConvivaPage.objEpisodeName, "Episode Name");
		logger.info("Episode Name fetched from Conviva Tab : " + episodeNameAct);
		extent.extentLogger("", "Episode Name fetched from Conviva Tab : " + episodeNameAct);
		if (episodeNameAct.equals(contentTitleAPI)) {
			logger.info("Verified correct Episode Name");
			extent.extentLogger("", "Verified correct Episode Name");
		} else {
			logger.error("Verified incorrect Episode Name");
			extent.extentLoggerFail("", "Verified incorrect Episode Name");
		}
		String episodeNumberAct = getElementPropertyToString("innerText", PWAConvivaPage.objEpisodeNumber,
				"Episode Number");
		logger.info("Episode Number fetched from Conviva Tab : " + episodeNumberAct);
		extent.extentLogger("", "Episode Number fetched from Conviva Tab : " + episodeNumberAct);
		if (episodeNumberAct.equals(episodeNumberAPI)) {
			logger.info("Verified correct Episode Number");
			extent.extentLogger("", "Verified correct Episode Number");
		} else {
			logger.error("Verified incorrect Episode Number");
			extent.extentLoggerFail("", "Verified incorrect Episode Number");
		}
		String genreAct = getElementPropertyToString("innerText", PWAConvivaPage.objGenreC, "Genre");
		logger.info("Genre fetched from Conviva Tab : " + genreAct);
		extent.extentLogger("", "Genre fetched from Conviva Tab : " + genreAct);
		if (genreAct.equals(genreAPI)) {
			logger.info("Verified correct Genre");
			extent.extentLogger("", "Verified correct Genre");
		} else {
			logger.error("Verified incorrect Genre");
			extent.extentLoggerFail("", "Verified incorrect Genre");
		}
		String originalLangAct = getElementPropertyToString("innerText", PWAConvivaPage.objOriginalLang,
				"Original Language");
		logger.info("Original Language fetched from Conviva Tab : " + originalLangAct);
		extent.extentLogger("", "Original Language fetched from Conviva Tab : " + originalLangAct);
		if (originalLangAct.equals(oriLangAPI)) {
			logger.info("Verified correct Original Language");
			extent.extentLogger("", "Verified correct Original Language");
		} else {
			logger.error("Verified incorrect Original Language");
			extent.extentLoggerFail("", "Verified incorrect Original Language");
		}
		String releaseDateAct = getElementPropertyToString("innerText", PWAConvivaPage.objPubDate, "Release Language");
		logger.info("Release Date fetched from Conviva Tab : " + releaseDateAct);
		extent.extentLogger("", "Release Date fetched from Conviva Tab : " + releaseDateAct);
		if (releaseDateAct.equals(releaseDateAPI)) {
			logger.info("Verified correct Release Date");
			extent.extentLogger("", "Verified correct Release Date");
		} else {
			logger.error("Verified incorrect Release Date");
			extent.extentLoggerFail("", "Verified incorrect Release Date");
		}
		scrollDownByY(150);
		String rootIDAct = getElementPropertyToString("innerText", PWAConvivaPage.objRootID, "Root ID");
		logger.info("Root ID fetched from Conviva Tab : " + rootIDAct);
		extent.extentLogger("", "Root ID fetched from Conviva Tab : " + rootIDAct);
		if (rootIDAct.equals(contentIdAPI)) {
			logger.info("Verified correct Root ID");
			extent.extentLogger("", "Verified correct Root ID");
		} else {
			logger.error("Verified incorrect Root ID");
			extent.extentLoggerFail("", "Verified incorrect Root ID");
		}
		String showAct = getElementPropertyToString("innerText", PWAConvivaPage.objShow, "Show");
		logger.info("Show fetched from Conviva Tab : " + showAct);
		extent.extentLogger("", "Show fetched from Conviva Tab : " + showAct);
		if (showAct.equals(tvShowAPI)) {
			logger.info("Verified correct Show");
			extent.extentLogger("", "Verified correct Show");
		} else {
			logger.error("Verified incorrect Show");
			extent.extentLoggerFail("", "Verified incorrect Show");
		}
		String siteAct = getElementPropertyToString("innerText", PWAConvivaPage.objSite, "Site");
		logger.info("Site fetched from Conviva Tab : " + siteAct);
		extent.extentLogger("", "Site fetched from Conviva Tab : " + siteAct);
		if (siteAct.equals(siteExp)) {
			logger.info("Verified correct Site");
			extent.extentLogger("", "Verified correct Site");
		} else {
			logger.error("Verified incorrect Site");
			extent.extentLoggerFail("", "Verified incorrect Site");
		}
		String userAgentAct = getElementPropertyToString("innerText", PWAConvivaPage.objUserAgent, "UserAgent");
		logger.info("UserAgent from Conviva Tab : " + userAgentAct);
		extent.extentLogger("", "UserAgent from Conviva Tab : " + userAgentAct);
		if (userAgentAct.equals(userAgentExp)) {
			logger.info("Verified correct UserAgent");
			extent.extentLogger("", "Verified correct UserAgent");
		} else {
			logger.error("Verified incorrect UserAgent");
			extent.extentLoggerFail("", "Verified incorrect UserAgent");
		}

	}

	public String dateConversionForConviva(String dateToConvert) throws Exception {
		// System.out.println("Date in String format sent: "+dateToConvert);
		Date date = new SimpleDateFormat("dd/MM/yyyy").parse(dateToConvert);
		// System.out.println("Date in Date format for Java: "+date);
		SimpleDateFormat formatter = new SimpleDateFormat("MMMM d, yyyy");
		String convertedDate = formatter.format(date);
		// System.out.println("Date in required String format : "+convertedDate);
		return convertedDate;
	}

	@SuppressWarnings("unused")
	public static String getValuesFromLocalStorage(String key) {
		WebStorage webStorage = (WebStorage) new Augmenter().augment(getWebDriver());
		LocalStorage localStorage = webStorage.getLocalStorage();
		SessionStorage sessionStorage = webStorage.getSessionStorage();
		return localStorage.getItem(key);
	}

	public void loginToConviva(String userid, String password) throws Exception {
		type(PWAConvivaPage.objUserNameField, userid, "Email Field");
		click(PWAConvivaPage.objNextButton, "Next button");
		type(PWAConvivaPage.objPasswordField, password, "Email Field");
		click(PWAConvivaPage.objSignInButton, "Sign In button");
	}

	public String getYourPublicIP() throws Exception {
		click(PWAConvivaPage.objSearchEditField, "Google Search field");
		type(PWAConvivaPage.objSearchEditField, "Whats my ip", "Search Edit Field");
		click(PWAConvivaPage.objWhatsMyIPSuggestion, "Google Suggestion");
		String myIP = getElementPropertyToString("innerText", PWAConvivaPage.objPublicIP, "Public IP");
		extent.extentLogger("", "Public IP fetched: " + myIP);
		logger.info("Public IP fetched: " + myIP);
		return myIP;
	}

	public void addIPToDeviceValidation(String ip) throws Exception {
		getWebDriver().get("https://pulse.conviva.com/device_validation/manage");
		waitTime(3000);
		scrollDownByY(300);
		click(PWAConvivaPage.objManageIPSortButton("For_Automation"), "Sort button");
		click(PWAConvivaPage.objEditIP("For_Automation"), "Edit button");
		clearField(PWAConvivaPage.objIPAddressField, "IP Address");
		waitTime(3000);
		type(PWAConvivaPage.objIPAddressField, ip, "IP Address");
		click(PWAConvivaPage.objUpdateButton, "Update button");
	}

	public void applyAutomationFilter() throws Exception {
		getWebDriver().get("https://pulse.conviva.com/reports/54/filters");
		waitTime(5000);
		// click(PWAConvivaPage.objFiltersButton,"Filters button");
		List<WebElement> filters = getWebDriver().findElements(PWAConvivaPage.objDeleteFilters);
		for (int i = 0; i < filters.size(); i++) {
			filters.get(i).click();
		}
		type(PWAConvivaPage.objFiltersEditField, "For_Automation", "Filters edit field");
		click(PWAConvivaPage.objForAutomationFilterSuggestion, "For_Automation filter suggestion");
		click(PWAConvivaPage.objApplyFilter, "Apply button");

	}

	@SuppressWarnings("unused")
	public void PWAVerifyTitleInAnchorTags(String userType) throws Exception {
		extent.HeaderChildNode("Task PWA2-6003 : SEO - Anchor Text and Link for Top Navigation, Mega Menu & Footer");
		logger.info("Task PWA2-6003 : SEO - Anchor Text and Link for Top Navigation, Mega Menu & Footer");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		Actions act = new Actions(getWebDriver());
		
		{
			// Home Mega Menu Bar
			extent.extentLogger("", "---------- Home Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Home");
			String anchorTitleForHomeExp = "Watch TV Shows, Originals, Movies & Live News Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForHomeExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForHomeExp);
			String anchorTitleForHome = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Home"),
					"Home anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForHome);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForHome);
			if (anchorTitleForHome.equals(anchorTitleForHomeExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		
		{
			// Movies Mega Menu Bar
			extent.extentLogger("", "---------- Movies Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Movies");
			String anchorTitleForMoviesExp = "Watch Movies Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForMoviesExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForMoviesExp);
			String anchorTitleForMovies = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Movies"),
					"Movies anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForMovies);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForMovies);
			if (anchorTitleForMovies.equals(anchorTitleForMoviesExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		
		{
			// TV Shows Mega Menu Bar
			extent.extentLogger("", "---------- TV Shows Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("TV Shows");
			String anchorTitleForShowsExp = "Watch TV Serials & Shows Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForShowsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForShowsExp);
			String anchorTitleForShows = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Shows"),
					"Shows anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForShows);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForShows);
			if (anchorTitleForShows.equals(anchorTitleForShowsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		
		{
			// Play Mega Menu Bar
			extent.extentLogger("", "---------- Play Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Play");
			String anchorTitleForPlayExp = "Play Game Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForPlayExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForPlayExp);
			String anchorTitleForPlay = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Play"),
					"Play anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForPlay);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForPlay);
			if (anchorTitleForPlay.equals(anchorTitleForPlayExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		
		{
			// Music Mega Menu Bar
			extent.extentLogger("", "---------- Music Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Music");
			String anchorTitleForMusicExp = "Watch Music Videos Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForMusicExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForMusicExp);
			String anchorTitleForMusic = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Music"),
					"Music anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForMusic);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForMusic);
			if (anchorTitleForMusic.equals(anchorTitleForMusicExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		
		{
			// Stories Mega Menu Bar
			extent.extentLogger("", "---------- Stories Mega Menu Bar verification -----------");
			String anchorTitleForStoriesExp = "Stories";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForStoriesExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForStoriesExp);
			String anchorTitleForStories = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Stories"),
					"Stories anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForStories);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForStories);
			if (anchorTitleForStories.equals(anchorTitleForStoriesExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
			navigateToHome();
		}
		
		{
			// Web Series Mega Menu Bar
			extent.extentLogger("", "---------- Web Series Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Web Series");
			String anchorTitleForZEE5OriginalsExp = "Watch ZEE5 Original Web Series & Movies";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForZEE5OriginalsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForZEE5OriginalsExp);
			String anchorTitleForZEE5Originals = getElementPropertyToString("title",
					PWAHomePage.objHomeBarText("ZEE5 Originals"), "ZEE5 Originals anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForZEE5Originals);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForZEE5Originals);
			if (anchorTitleForZEE5Originals.equals(anchorTitleForZEE5OriginalsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		
		{
			// Rent Mega Menu Bar
			extent.extentLogger("", "---------- Rent Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Rent");
			String anchorTitleForZeeplexExp = "Rent & Watch Movies on ZEEPLEX";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForZeeplexExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForZeeplexExp);
			String anchorTitleForZeeplex = getElementPropertyToString("title", PWAHomePage.objHomeBarText("ZEEPLEX"),
					"ZEE5 Originals anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForZeeplex);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForZeeplex);
			if (anchorTitleForZeeplex.equals(anchorTitleForZeeplexExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		
		{
			// News Mega Menu Bar
			extent.extentLogger("", "---------- News Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("News");
			String anchorTitleForNewsExp = "Watch Latest News & Updates";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForNewsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForNewsExp);
			String anchorTitleForNews = getElementPropertyToString("title", PWAHomePage.objHomeBarText("News"),
					"News anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForNews);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForNews);
			if (anchorTitleForNews.equals(anchorTitleForNewsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
			navigateToHome();
		}
		
		{
			// Premium Mega Menu Bar
			extent.extentLogger("", "---------- Premium Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Premium");
			String anchorTitleForPremiumExp = "ZEE5 Premium Package Subscription";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForPremiumExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForPremiumExp);
			String anchorTitleForPremium = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Premium"),
					"Premium anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForPremium);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForPremium);
			if (anchorTitleForPremium.equals(anchorTitleForPremiumExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		
		{
			// Kids Mega Menu Bar
			extent.extentLogger("", "---------- Kids Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Kids");
			String anchorTitleForKidsExp = "Watch Kids Shows, Cartoons. Movies & Videos Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForKidsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForKidsExp);
			String anchorTitleForKids = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Kids"),
					"Kids anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForKids);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForKids);
			if (anchorTitleForKids.equals(anchorTitleForKidsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		
		{
			// Live TV Mega Menu Bar
			extent.extentLogger("", "---------- Live TV Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Live TV");
			String anchorTitleForLiveTVExp = "Watch Live TV Channels Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForLiveTVExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForLiveTVExp);
			String anchorTitleForLiveTV = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Live TV"),
					"Live TV anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForLiveTV);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForLiveTV);
			if (anchorTitleForLiveTV.equals(anchorTitleForLiveTVExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		
		{
			// Videos Mega Menu Bar
			extent.extentLogger("", "---------- Videos Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Videos");
			String anchorTitleForVideosExp = "Watch Official Films Videos";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForVideosExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForVideosExp);
			String anchorTitleForVideos = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Videos"),
					"Videos anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForVideos);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForVideos);
			if (anchorTitleForVideos.equals(anchorTitleForVideosExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
	}

	public void PWAVerifyImageWebP(String userType) throws Exception {
		extent.HeaderChildNode("Task PWA2-6030 : Serve WebP image instead of JPEG");
		logger.info("Task PWA2-6030 : Serve WebP image instead of JPEG");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		waitTime(4000);
		String imageSource = getElementPropertyToString("src", PWAHomePage.objMastheadCarouselCurrentContentWeb,
				"Carousel Card");
		if (imageSource.contains("f_webp")) {
			logger.info("Tag img src attribute value contains f_webp as expected");
			extent.extentLogger("", "Tag img src attribute value contains f_webp as expected");
		} else {
			logger.error("Tag img src attribute value does not contain f_webp");
			extent.extentLoggerFail("", "Tag img src attribute value does not contain f_webp");
		}
		if (imageSource.contains("f_auto")) {
			logger.error("Tag img src attribute value should not contain f_auto");
			extent.extentLoggerFail("", "Tag img src attribute value should not contain f_auto");
		} else {
			logger.info("Tag img src attribute value does not contain f_auto as expected");
			extent.extentLogger("", "Tag img src attribute value does not contain f_auto as expected");
		}
	}

	public void PWAVerifyMetaTags(String userType) throws Exception {
		extent.HeaderChildNode(
				"Task PWA2-6005 : SEO - Meta Tags for Static Pages, Originals, Kids, Videos, Music Videos & Live TV");
		logger.info(
				"Task PWA2-6005 : SEO - Meta Tags for Static Pages, Originals, Kids, Videos, Music Videos & Live TV");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		extent.extentLogger("", "-------------- Meta Tags for Home Tab --------------");
		String homeTitleExpected = "ZEE5 - Watch TV Shows, 100+ Originals, Movies, News & Live TV Online";
		String homeDescExpected = "Watch premieres of your favourite TV show episodes a day before telecast on ZEE5 & explore blockbuster movies, 100+ original content, music videos, live TV channels, news in HD quality & language of your choice.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Home", homeTitleExpected, homeDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for ZEEPLEX Tab --------------");
		String zeeplexTitleExpected = "ZEEPLEX - Rent & Watch Latest Releases in Movies on ZEE5";
		String zeeplexDescExpected = "Rent a movie online on ZEEPLEX for as low as ₹99 and watch your choice of movie from new blockbuster releases to premier movies. Find the latest and popular movies on ZEE5 today.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "ZEEPLEX", zeeplexTitleExpected, zeeplexDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Club Tab --------------");
		String clubTitleExpected = "ZEE5 Club Pack: Subscribe and Watch Premier Episodes before TV Telecast, Selected ZEE5 Original and Movies on ZEE5";
		String clubDescExpected = "Join the ZEE5 Club to watch premieres of TV show episodes a day before telecast. Enjoy ZEE5-Alt Balaji Original Web Series, your favourite Zindagi Shows, Live TV, Kids Entertainment, Movies, Latest News & much more. Watch on 2 devices at a time.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Club", clubTitleExpected, clubDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Search Screen --------------");
		String searchTitleExpected = "Search for Shows, Movies, Originals, Live TV Channels & More on ZEE5";
		String searchDescExpected = "Search for your favourite ZEE5 shows, movies, originals, live TV channels, music videos, news and much more. Browse through the abundant options that you can watch and select what suits your mood.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Search", searchTitleExpected, searchDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Login Screen --------------");
		String loginTitleExpected = "Login to ZEE5 & watch the Best Shows, Movies, News and More";
		String loginDescExpected = "Login to ZEE5 and enjoy the Latest and the best of TV Shows, Movies, Originals, News, Live TV Channels and much more.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Login", loginTitleExpected, loginDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Sign Up Screen --------------");
		String signUpTitleExpected = "Register with ZEE5 - Enjoy Uninterrupted Video Experience and Help us serve you better";
		String signUpDescExpected = "Register with ZEE5 and enjoy the best of Bollywood & Hollywood movies, TV Shows, News and much more in Hindi, Marathi, English and other Regional Languages.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "SignUp", signUpTitleExpected, signUpDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Subscribe Screen --------------");
		String subscribeTitleExpected = "Subscribe to ZEE5 - Avail the Best offers with ZEE5 Premium & Club Subscription Plans";
		String subscribeDescExpected = "Get ZEE5 premium membership to watch latest episodes Premier before TV, All ZEE5 Originals, Movies, Live TV Channels & latest News online. Avail the best offers with ZEE5 monthly & yearly subscription plans; Watch all shows on 5 devices at a time";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Subscribe", subscribeTitleExpected,
				subscribeDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for ZEE5 Originals Screen --------------");
		String zee5OriginalsTitleExpected = "ZEE5 Originals - Watch ZEE5 Originals Web Series and Movies Online in HD";
		String zee5OriginalsDescExpected = "Explore ZEE5 Originals shows, movies and short films in HD quality. Explore new Web Series and Movies in Hindi, Marathi, English and other regional languages.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "ZEE5 Originals", zee5OriginalsTitleExpected,
				zee5OriginalsDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Web Series Page --------------");
		String webSeries = "Poison";
		String home = getParameterFromXML("url");
		String url = home + "zee5originals/details/poison/0-6-1558";
		String webSeriesPageTitleExpected = webSeries + " Web Series - Watch ZEE5 Originals Show " + webSeries
				+ " Online in HD on ZEE5";
		String webSeriesPageDescExpected = webSeries + " - ZEE5 Originals Web Series. 👀 Watch " + webSeries
				+ " full Web Series online in HD quality on ZEE5. Explore the star cast and watch all episodes of all seasons only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesPageTitleExpected,
				webSeriesPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Web Series Season Page --------------");
		webSeries = "Poison";
		String season = "1";
		url = home + "zee5originals/details/poison/0-6-1558/episodes";
		String webSeriesSeasonPageTitleExpected = webSeries + " Season " + season
				+ " - Watch All Episodes of ZEE5 Originals Show " + webSeries + " " + season + " in HD on ZEE5";
		String webSeriesSeasonPageDescExpected = webSeries + " Season " + season
				+ " Episodes - Watch all episodes of the ZEE5 Originals Web Series " + webSeries + " " + season
				+ ", online. Explore trailers, teasers & download all episodes in HD only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesSeasonPageTitleExpected,
				webSeriesSeasonPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Episode Page --------------");
		mandatoryRegistrationPopUp(userType);
		webSeries = "Poison";
		season = "1";
		String episode = "1";
		String episodeTitle = "The Hunter's Scent";
		url = home + "zee5originals/details/poison/0-6-1558/episode-1-the-hunters-scent/0-1-202652";
		String episodeTitleExpected = "Watch " + webSeries + " Season " + season + " Episode " + episode + " - "
				+ episodeTitle + " online in HD on ZEE5";
		String episodeDescExpected = "Watch " + webSeries + " ZEE5 Originals Web Series, Season " + season + " Episode "
				+ episode + ", " + episodeTitle + ". Explore all the episodes of Poison in HD quality on ZEE5. ";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, episodeTitleExpected, episodeDescExpected);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Web Series Season Page --------------");
		webSeries = "Poison";
		season = "2";
		url = home + "zee5originals/details/poison/0-6-1558/season-2/episodes";
		webSeriesSeasonPageTitleExpected = webSeries + " Season " + season
				+ " - Watch All Episodes of ZEE5 Originals Show " + webSeries + " " + season + " in HD on ZEE5";
		webSeriesSeasonPageDescExpected = webSeries + " Season " + season
				+ " Episodes - Watch all episodes of the ZEE5 Originals Web Series " + webSeries + " " + season
				+ ", online. Explore trailers, teasers & download all episodes in HD only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesSeasonPageTitleExpected,
				webSeriesSeasonPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Episode Page --------------");
		mandatoryRegistrationPopUp(userType);
		webSeries = "Poison";
		season = "2";
		episode = "1";
		episodeTitle = "Dark Horse";
		url = home + "zee5originals/details/poison/0-6-1558/episode-1-the-hunters-scent/0-1-202652";
		episodeTitleExpected = "Watch " + webSeries + " Season " + season + " Episode " + episode + " - " + episodeTitle
				+ " online in HD on ZEE5";
		episodeDescExpected = "Watch " + webSeries + " ZEE5 Originals Web Series, Season " + season + " Episode "
				+ episode + ", " + episodeTitle + ". Explore all the episodes of Poison in HD quality on ZEE5. ";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, episodeTitleExpected, episodeDescExpected);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Trailer Page --------------");
		mandatoryRegistrationPopUp(userType);
		webSeries = "Poison";
		season = "2";
		url = home + "zee5originals/details/poison/0-6-1558/poison-2-trailer/0-1-416653";
		String trailerTitleExpected = webSeries + " " + season + " Trailer - Watch " + webSeries + " " + season
				+ " Official Trailer in HD on ZEE5";
		String trailerDescExpected = webSeries + " " + season + " Official Trailer - Watch " + webSeries + " " + season
				+ " ZEE5 Originals Web Series trailer online in HD quality. Explore trailers, teasers & download all episodes in HD only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, trailerTitleExpected, trailerDescExpected);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Kids Tab --------------");
		String kidsTitleExpected = "Watch Kids Shows and Animated Movies Online in HD on ZEE5";
		String kidsDescExpected = "Watch Kids TV shows and movies online in HD. Find all popular kids shows, series and animated movies on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Kids", kidsTitleExpected, kidsDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Kids Show Page Page --------------");
		webSeries = "Sa Re Ga Ma Pa Li'l Champs 2019";
		url = home + "kids/kids-shows/sa-re-ga-ma-pa-lil-champs-2019/0-6-1317";
		webSeriesSeasonPageTitleExpected = "Watch " + webSeries + " Kids Show Online on ZEE5";
		webSeriesSeasonPageDescExpected = "Watch " + webSeries
				+ " Show online in HD. Also explore kid’s latest movies, videos & show’s episodes on ZEE5..";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesSeasonPageTitleExpected,
				webSeriesSeasonPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Videos Tab --------------");
		String videosTitleExpected = "Watch Film Videos, Promo Videos, Trailers and Music Videos Free Online on ZEE5";
		String videosDescExpected = "Enjoy watching movie videos, promo videos, music videos, Bollywood songs and celebrity gossips in 12 different languages online for free on ZEE5";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Videos", videosTitleExpected, videosDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Live TV Tab --------------");
		String liveTVTitleExpected = "Live Streaming TV Shows, News, Movies, TV Channels Online in HD on ZEE5";
		String liveTVDescExpected = "Enjoy 90+ Live TV channels online only on ZEE5 in HD. With ZEE5, watch your favourite TV shows, news, movies & entertainment videos live in Hindi, English other regional languages.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Live TV", liveTVTitleExpected, liveTVDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Channel Page --------------");
		mandatoryRegistrationPopUp(userType);
		String channel = "TV9 Marathi News";
		url = home + "channels/details/tv9-marathi/0-9-257";
		String channelTitleExpected = "Watch " + channel + " Channel Live Online in HD on ZEE5";
		String channelDescExpected = "Watch live streaming of " + channel
				+ " channel in HD quality. Also explore other live channel steaming like News, Entertainment, Music and more only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, channelTitleExpected, channelDescExpected);
		extent.extentLogger("", "-------------- Meta Tags Channel Guide Page --------------");
		url = home + "tvguide";
		String channelGuideTitleExpected = "ZEE5 TV Guide Listings : View Schedule for all Live TV Channels on ZEE5";
		String channelGuideDescExpected = "View TV guide listings for all the Live TV Channels and explore the shows schedules on ZEE5. Know when to watch your favourite TV shows live online.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, channelGuideTitleExpected, channelGuideDescExpected);
		mandatoryRegistrationPopUp(userType);

	}

	public void PWAVerifyMetaTagsForTwitter(String userType) throws Exception {

		extent.HeaderChildNode("Task PWA2-5652 : SEO - Title, Description and OG for Twitter");
		logger.info("Task PWA2-5652 : SEO - Title, Description and OG for Twitter");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		extent.extentLogger("", "-------------- Meta Tags for Shows Tab --------------");
		String home = getParameterFromXML("url");
		getWebDriver().get(home + "tvshows");
		logger.info("Navigated to Shows page");
		extent.extentLogger("", "Navigated to Shows page");
		waitTime(4000);
		String showTitleExpected = "Watch Best TV Shows, Serials, Spoilers & Full Episodes Online | ZEE5";
		String showDescExpected = "Enjoy top TV Shows, TV Serials in Hindi, Marathi and other regional languages online in Full HD. Explore latest episodes of all your favourite shows aired on ZEE channels on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showTitleExpected, showDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Shows Details Page --------------");
		getWebDriver().get(home + "tvshows/details/kundali-bhagya/0-6-366");
		logger.info("Navigated to Shows Details page");
		extent.extentLogger("", "Navigated to Shows Details page");
		waitTime(4000);
		String showDetailsTitleExpected = "Kundali Bhagya TV Serial, Watch Tomorrow's Full Episodes Online Before TV on ZEE5";
		String showDetailsDescExpected = "Enjoy tomorrow's Premiere Episodes before tv; latest & full episodes of Kundali Bhagya TV serial online, starring Sanjay Gagnani,Anjum Fakih,Shraddha Arya,Naveen Saini,Abhishek Kapur,Ruhi Chaturvedi,Anisha Hinduja,Dheeraj Dhoopar,Manit Joura,Supriya Shukla. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showDetailsTitleExpected,
				showDetailsDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for List Episodes Page --------------");
		getWebDriver().get(home + "tvshows/details/kundali-bhagya/0-6-366/episodes");
		logger.info("Navigated to List Episodes page");
		extent.extentLogger("", "Navigated to List Episodes page");
		waitTime(4000);
		String showListEpisodesTitleExpected = "Watch & Enjoy All the Episodes of Kundali Bhagya TV Serial Online on ZEE5";
		String showListEpisodesDescExpected = "Binge Watch Kundali Bhagya TV Serial Online. Now select & watch your favorite episodes from the complete list of Kundali Bhagya episodes, starring Sanjay Gagnani,Anjum Fakih,Shraddha Arya,Naveen Saini,Abhishek Kapur,Ruhi Chaturvedi,Anisha Hinduja,Dheeraj Dhoopar,Manit Joura,Supriya Shukla. Watch all the episodes in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showListEpisodesTitleExpected,
				showListEpisodesDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Specific Episode Page --------------");
		getWebDriver().get(
				home + "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-october-27-2020/0-1-manual_1skn6kk1den8");
		logger.info("Navigated to Specific Episode page");
		extent.extentLogger("", "Navigated to Specific Episode page");
		waitTime(4000);
		String showSpecificEpisodeTitleExpected = "Watch Kundali Bhagya TV Serial 27th October 2020 Full Episode Online on ZEE5";
		String showSpecificEpisodeDescExpected = "Enjoy 27th October 2020's full episode of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch Kareena threatens Sameer to stay away from Srishti full episode. View best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showSpecificEpisodeTitleExpected,
				showSpecificEpisodeDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Specific Spoiler Page --------------");
		getWebDriver().get(home
				+ "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-october-28-2020-episode-spoiler/0-1-manual_a61qrpapbio0");
		logger.info("Navigated to Specific Spoiler page");
		extent.extentLogger("", "Navigated to Specific Spoiler page");
		waitTime(4000);
		String showSpecificSpoilerTitleExpected = "Watch Kundali Bhagya TV Serial Spoiler of 28th October 2020 Online on ZEE5";
		String showSpecificSpoilerDescExpected = "Enjoy 28th October 2020's spoiler of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showSpecificSpoilerTitleExpected,
				showSpecificSpoilerDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Specific Webisode Page --------------");
		getWebDriver().get(home
				+ "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-october-27-2020-webisode/0-1-manual_37msvkdj6utg");
		logger.info("Navigated to Specific Webisode page");
		extent.extentLogger("", "Navigated to Specific Webisode page");
		waitTime(4000);
		String showWebisodeTitleExpected = "Watch Kundali Bhagya TV Serial Webisode of 27th October 2020 Online on ZEE5";
		String showWebisodeDescExpected = "Enjoy 27th October 2020's webisode of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showWebisodeTitleExpected,
				showWebisodeDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Week Short Page --------------");
		getWebDriver().get(home
				+ "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-week-in-short-19th-october-2020-to-24th-october-2020/0-1-manual_2goo4apg01ug");
		logger.info("Navigated to Week Short page");
		extent.extentLogger("", "Navigated to Week Short page");
		waitTime(4000);
		String showWeekShortTitleExpected = "Watch Kundali Bhagya TV Serial Full Week's Episodes in Short 19th October 2020 - 24th October 2020 Online on ZEE5";
		String showWeekShortDescExpected = "Enjoy 19th October 2020 - 24th October 2020's full week in short episode of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showWeekShortTitleExpected,
				showWeekShortDescExpected);

	}

	public void PWABreadcrumbImplementation(String userType) throws Exception {
		extent.HeaderChildNode(
				"Task PWA2-5569 : Desktop - Showcase breadcrumb at front-end for user and search engine bot");
		logger.info("Task PWA2-5569 : Desktop - Showcase breadcrumb at front-end for user and search engine bot");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String home = getParameterFromXML("url");
		extent.extentLogger("", "-------------- Breadcrumb verification in My Profile screen--------------");
		if (!userType.equals("Guest")) {
			click(PWAHomePage.objOpenProfile, "Profile icon");
			click(PWAHomePage.objOpenProfileIcon, "My Profile");
			verifyElementPresent(PWAHomePage.objMyProfileBreadCrumb, "My Profile Breadcrumb");
			click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
			String currentUrl = getWebDriver().getCurrentUrl();
			logger.info("Current url after navigation: " + currentUrl);
			extent.extentLogger("", "Current url after navigation: " + currentUrl);
			if (home.equals(currentUrl)) {
				logger.info("Navigated to Home Page");
				extent.extentLogger("", "Navigated to Home Page");
				logger.info("Breadcrumb navigation is successful");
				extent.extentLogger("", "Breadcrumb navigation is successful");
			} else {
				logger.error("Failed to navigate to Home Page");
				extent.extentLoggerFail("", "Failed to navigate to Home Page");
				logger.error("Breadcrumb navigation unsuccessful");
				extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
			}

		}
		extent.extentLogger("", "-------------- Breadcrumb verification in View All screen--------------");
		Response tabResponse = ResponseInstance.getResponseForPages("home", "en,hi,kn");
		String trayTitle = tabResponse.jsonPath().get("buckets[1].title");
		swipeTillTray(5, trayTitle, "\"" + trayTitle + "\" tray");
		click(PWALandingPages.objViewAllOfTray(trayTitle), "View all button for tray " + trayTitle);
		verifyElementPresent(PWAHomePage.objViewAllBreadCrumb("Home", trayTitle), trayTitle + " Breadcrumb");
		click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
		String currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current url after navigation: " + currentUrl);
		extent.extentLogger("", "Current url after navigation: " + currentUrl);
		if (home.equals(currentUrl)) {
			logger.info("Navigated to Home Page");
			extent.extentLogger("", "Navigated to Home Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Home Page");
			extent.extentLoggerFail("", "Failed to navigate to Home Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		extent.extentLogger("", "-------------- Breadcrumb verification in Player --------------");
		String movie = "Robin Hood Forever Enemies";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, movie, "Search Field");
		click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(movie), "Searched content");
		waitTime(5000);
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Why Register Popup") == true) {
				click(PWAPlayerPage.objCloseBtn, "Close Register Popup");
			}
		}
		verifyElementPresent(PWAHomePage.objMovieBreadCrumb(movie), movie + " Breadcrumb");
		click(PWAHomePage.objBreadCrumb(2), "Movies breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		if (currentUrl.equals(home + "movies")) {
			logger.info("Navigated to Movies Page");
			extent.extentLogger("", "Navigated to Movies Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Movies Page");
			extent.extentLoggerFail("", "Failed to navigate to Movies Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current url after navigation: " + currentUrl);
		extent.extentLogger("", "Current url after navigation: " + currentUrl);
		if (home.equals(currentUrl)) {
			logger.info("Navigated to Home Page");
			extent.extentLogger("", "Navigated to Home Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Home Page");
			extent.extentLoggerFail("", "Failed to navigate to Home Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		extent.extentLogger("", "-------------- Breadcrumb verification in Live TV --------------");
		navigateToAnyScreenOnWeb("Live TV");
		verifyElementPresent(PWAHomePage.objLivePlayerBreadCrumb, "Live TV Breadcrumb");
		click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current url after navigation: " + currentUrl);
		extent.extentLogger("", "Current url after navigation: " + currentUrl);
		if (home.equals(currentUrl)) {
			logger.info("Navigated to Home Page");
			extent.extentLogger("", "Navigated to Home Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Home Page");
			extent.extentLoggerFail("", "Failed to navigate to Home Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}

		extent.extentLogger("", "-------------- Breadcrumb verification in Show Details --------------");
		String show = "Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, show, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(show), "Searched content");
		verifyElementPresent(PWAHomePage.objShowDetailsBreadCrumb(show), show + " Breadcrumb");
		click(PWAHomePage.objBreadCrumb(2), "Shows breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		if (currentUrl.equals(home + "tvshows")) {
			logger.info("Navigated to Shows Page");
			extent.extentLogger("", "Navigated to Shows Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Shows Page");
			extent.extentLoggerFail("", "Failed to navigate to Shows Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current url after navigation: " + currentUrl);
		extent.extentLogger("", "Current url after navigation: " + currentUrl);
		if (home.equals(currentUrl)) {
			logger.info("Navigated to Home Page");
			extent.extentLogger("", "Navigated to Home Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Home Page");
			extent.extentLoggerFail("", "Failed to navigate to Home Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		extent.extentLogger("", "-------------- Breadcrumb verification in Channels --------------");
		navigateToAnyScreenOnWeb("Live TV");
		String channel = getElementPropertyToString("innerText",
				PWALandingPages.objFirstAssetInTrayIndex("FREE Channels"), "Channel Title");
		System.out.println(channel);
		click(PWALandingPages.objFirstAssetInTrayIndex("FREE Channels"), "First card under Free Channels");
		verifyElementPresent(PWAHomePage.objChannelsBreadCrumb(channel), channel + " Breadcrumb");
		click(PWAHomePage.objBreadCrumb(2), "Channel breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		if (currentUrl.equals(home + "channels")) {
			logger.info("Navigated to Channels Page");
			extent.extentLogger("", "Navigated to Channels Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Channels Page");
			extent.extentLoggerFail("", "Failed to navigate to Channels Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current url after navigation: " + currentUrl);
		extent.extentLogger("", "Current url after navigation: " + currentUrl);
		if (home.equals(currentUrl)) {
			logger.info("Navigated to Home Page");
			extent.extentLogger("", "Navigated to Home Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Home Page");
			extent.extentLoggerFail("", "Failed to navigate to Home Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		extent.extentLogger("", "-------------- Breadcrumb verification in My Subscriptions --------------");
		if (userType.equals("SubscribedUser") || userType.equals("ClubUser")) {
			click(PWAHomePage.objOpenProfile, "Profile icon");
			click(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
			verifyElementPresent(PWAHomePage.objMySubscriptionsBreadCrumb, "My Subscriptions Breadcrumb");
			click(PWAHomePage.objBreadCrumb(2), "My Profile breadcrumb");
			verifyElementPresent(PWAHomePage.objMyProfileBreadCrumb, "My Profile page");
			click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
			currentUrl = getWebDriver().getCurrentUrl();
			logger.info("Current url after navigation: " + currentUrl);
			extent.extentLogger("", "Current url after navigation: " + currentUrl);
			if (home.equals(currentUrl)) {
				logger.info("Navigated to Home Page");
				extent.extentLogger("", "Navigated to Home Page");
				logger.info("Breadcrumb navigation is successful");
				extent.extentLogger("", "Breadcrumb navigation is successful");
			} else {
				logger.error("Failed to navigate to Home Page");
				extent.extentLoggerFail("", "Failed to navigate to Home Page");
				logger.error("Breadcrumb navigation unsuccessful");
				extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
			}
			click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
			currentUrl = getWebDriver().getCurrentUrl();
			logger.info("Current url after navigation: " + currentUrl);
			extent.extentLogger("", "Current url after navigation: " + currentUrl);
			if (home.equals(currentUrl)) {
				logger.info("Navigated to Home Page");
				extent.extentLogger("", "Navigated to Home Page");
				logger.info("Breadcrumb navigation is successful");
				extent.extentLogger("", "Breadcrumb navigation is successful");
			} else {
				logger.error("Failed to navigate to Home Page");
				extent.extentLoggerFail("", "Failed to navigate to Home Page");
				logger.error("Breadcrumb navigation unsuccessful");
				extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
			}
		}
	}

	public void PWASubtitleSelection(String userType) throws Exception {
		extent.HeaderChildNode(
				"Task PWA2-4178 : If subtitle language is selected; the same should be enables by default for next contents.");
		logger.info(
				"Task PWA2-4178 : If subtitle language is selected; the same should be enables by default for next contents.");
		String content = "Kundali Bhagya";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(content), "Searched content");
		waitTime(4000);
		partialScroll();
		checkElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(5000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		if (!(userType.equals("SubscribedUser") || userType.equals("ClubUser"))) {
			waitForPlayerAdToComplete("Video Player");
		}
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		click(PWAHomePage.objSubtitleButton, "Subtitle button");
		click(PWAHomePage.objSubtitleEnglish, "Subtitle English");
		/////////////////////////////////////////////////////
		WebElement progressBar = findElement(PWAPlayerPage.progressBar);
		int progressBarWidth = progressBar.getSize().getWidth();
		System.out.println(progressBarWidth);
		int progressBarX = progressBar.getLocation().getX();
		System.out.println(progressBarX);
		int progressBarEndX = progressBarX + progressBarWidth;
		System.out.println(progressBarEndX);
		WebElement scrubber = findElement(PWAPlayerPage.objPlayerScrubber);
		int scrubberX = scrubber.getLocation().getX();
		System.out.println(scrubberX);
		int offset = progressBarEndX - scrubberX - 10;
		/////////////////////////////////////
		Actions act = new Actions(getWebDriver());
		act.moveToElement(scrubber, offset, 0).click().build().perform();
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "Scrubbed to end of the player");
		logger.info("Scrubbed to end of the player");
		waitTime(10000);
		if (!(userType.equals("SubscribedUser") || userType.equals("ClubUser"))) {
			extent.extentLogger("", "Postroll Ad play check");
			logger.info("Postroll Ad play check");
			waitForPlayerAdToComplete("Video Player");
			extent.extentLogger("", "Preroll Ad play check");
			logger.info("Preroll Ad play check");
			waitForPlayerAdToComplete("Video Player");
		}
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		click(PWAHomePage.objSubtitleButton, "Subtitle button");
		verifyElementPresent(PWAHomePage.objSubtitleEnglishSelected, "Subtitle English tickmarked");
	}

	public void PWAVerifyMetaTagsThroughScriptPageSource(String userType, String tab, String expectedTitle,
			String expectedDesc) throws Exception {
		navigateToHome();
		navigateToAnyScreenOnWeb(tab);
		logger.info("Expected title : " + expectedTitle);
		extent.extentLogger("", "Expected title : " + expectedTitle);
		logger.info("Expected description : " + expectedDesc);
		extent.extentLogger("", "Expected description : " + expectedDesc);
		String pageSource = getWebDriver().getPageSource();
		System.out.println(pageSource);
		String title = pageSource.split("title")[1].split(">")[1].split("<")[0].replace("&amp;", "&");
		logger.info("Actual <title> value : " + title);
		extent.extentLogger("", "Actual <title> value : " + title);
		String ogtitle = pageSource.split("og:title\" content=\"")[1].split("\"><")[0].replace("&amp;", "&");
		logger.info("Actual og:title content value : " + ogtitle);
		extent.extentLogger("", "Actual og:title content value : " + ogtitle);
		String ogdescription = pageSource.split("og:description\" content=\"")[1].split("\"><")[0].replace("&amp;",
				"&");
		logger.info("Actual og:description content value : " + ogdescription);
		extent.extentLogger("", "Actual og:description content value : " + ogdescription);
		if (title.equals(expectedTitle)) {
			logger.info("<title> value is as expected");
			extent.extentLogger("", "<title> value is as expected");
		} else {
			logger.error("<title> value is not as expected");
			extent.extentLoggerFail("", "<title> value is not as expected");
		}
		if (ogtitle.equals(expectedTitle)) {
			logger.info("og:title content value is as expected");
			extent.extentLogger("", "og:title content value is as expected");
		} else {
			logger.error("og:title content value is not as expected");
			extent.extentLoggerFail("", "og:title content value is not as expected");
		}
		if (ogdescription.equals(expectedDesc)) {
			logger.info("og:description content value is as expected");
			extent.extentLogger("", "og:description content value is as expected");
		} else {
			logger.error("og:description content value is not as expected");
			extent.extentLoggerFail("", "og:description content value is not as expected");
		}

	}

	public void PWAVerifyMetaTagsThroughExternalPageSource(String userType, String navigationPoint,
			String expectedTitle, String expectedDesc) throws Exception {
		navigateToHome();
		if (navigationPoint.equalsIgnoreCase("Search"))
			click(PWAHomePage.objSearchBtn, "Search icon");
		else if (navigationPoint.equalsIgnoreCase("Login"))
			click(PWALoginPage.objWebLoginBtn, "Login button");
		else if (navigationPoint.equalsIgnoreCase("SignUp"))
			click(PWALoginPage.objSignUpBtnWEB, "Sign up for FREE button");
		else if (navigationPoint.equalsIgnoreCase("Subscribe"))
			click(PWAHomePage.objSubscribeBtn, "Subscribe button");
		else if (navigationPoint.contains(".com"))
			getWebDriver().get(navigationPoint);
		else
			navigateToAnyScreenOnWeb(navigationPoint);
		logger.info("Expected title : " + expectedTitle);
		extent.extentLogger("", "Expected title : " + expectedTitle);
		logger.info("Expected description : " + expectedDesc);
		extent.extentLogger("", "Expected description : " + expectedDesc);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		waitTime(3000);
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual og:title content value : " + ogtitle);
		extent.extentLogger("", "Actual og:title content value : " + ogtitle);
		String ogdescription = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "Title");
		ogdescription = ogdescription.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual og:description content value : " + ogdescription);
		extent.extentLogger("", "Actual og:description content value : " + ogdescription);
		if (ogtitle.equals(expectedTitle)) {
			logger.info("og:title content value is as expected");
			extent.extentLogger("", "og:title content value is as expected");
		} else {
			logger.error("og:title content value is not as expected");
			extent.extentLoggerFail("", "og:title content value is not as expected");
		}
		if (ogdescription.equals(expectedDesc)) {
			logger.info("og:description content value is as expected");
			extent.extentLogger("", "og:description content value is as expected");
		} else {
			logger.error("og:description content value is not as expected");
			extent.extentLoggerFail("", "og:description content value is not as expected");
		}

	}

	public void PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(String userType, String expectedTitle,
			String expectedDesc) throws Exception {
		logger.info("Expected title : " + expectedTitle);
		extent.extentLogger("", "Expected title : " + expectedTitle);
		logger.info("Expected description : " + expectedDesc);
		extent.extentLogger("", "Expected description : " + expectedDesc);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		waitTime(3000);
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual twitter:title content value : " + ogtitle);
		extent.extentLogger("", "Actual twitter:title content value : " + ogtitle);
		String ogdescription = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Title");
		ogdescription = ogdescription.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual twitter:description content value : " + ogdescription);
		extent.extentLogger("", "Actual twitter:description content value : " + ogdescription);
		if (ogtitle.equals(expectedTitle)) {
			logger.info("twitter:title content value is as expected");
			extent.extentLogger("", "twitter:title content value is as expected");
		} else {
			logger.error("twitter:title content value is not as expected");
			extent.extentLoggerFail("", "twitter:title content value is not as expected");
		}
		if (ogdescription.equals(expectedDesc)) {
			logger.info("twitter:description content value is as expected");
			extent.extentLogger("", "twitter:description content value is as expected");
		} else {
			logger.error("twitter:description content value is not as expected");
			extent.extentLoggerFail("", "twitter:description content value is not as expected");
		}
	}

	public String getLanguageComplete(String languageAPI) throws Exception {
		if (languageAPI.equals("kn"))
			return "Kannada";
		else if (languageAPI.equals("en"))
			return "English";
		else if (languageAPI.equals("mr"))
			return "Marati";
		else if (languageAPI.equals("hi"))
			return "Hindi";
		else if (languageAPI.equals("te"))
			return "Telugu";
		else if (languageAPI.equals("ta"))
			return "Tamil";
		else if (languageAPI.equals("ml"))
			return "Malayalam";
		else if (languageAPI.equals("bn"))
			return "Bengali";
		else
			return "";
	}

	public void PWAVerifyPageFreezeForChannel(String userType) throws Exception {
		extent.HeaderChildNode("Defect PWA2-5158 : \"&xplorHD\" channel consumption screen verification");
		logger.info("Defect PWA2-5158 : \"&xplorHD\" channel consumption screen verification");
		String content = "xplorHD";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchedResult(content), "Searched content");
		waitTime(4000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.subscribePopUp, "Subscription popup");
			verifyElementPresentAndClick(PWAPlayerPage.ObjSubscriptionpopupCloseIcon, "Subscription popup close icon");
			verifyElementPresent(PWALiveTVPage.objPlayerInlineSubscriptionLink, "Player inline Subscribtion link");
		} else {
			verifyElementPresent(PWAPlayerPage.objLiveTag, "Live Tag");
			verifyElementPresent(PWAPlayerPage.pauseBtn, "Play/Pause icon");
			verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
		}
	}

	public void PWAEmbedFunctionality(String userType) throws Exception {
		extent.HeaderChildNode("Task PWA2-5554 : Embed functionality check");
		logger.info("Task PWA2-5554 : Embed functionality check");
		String content = "Kundali Bhagya";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitTime(2000);
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(content), "Searched content");
		waitTime(4000);
		partialScroll();
		checkElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(5000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		waitTime(10000);
		partialScroll();
		click(PWAPlayerPage.objEmbedButton, "Embed button");
		verifyElementPresent(PWAPlayerPage.objEmbedHeader, "Embed Video header");
		verifyElementPresent(PWAPlayerPage.objEmbedText, "Embed text");
		verifyElementPresent(PWAPlayerPage.objEmbedCheckbox, "Embed Checkbox");
		verifyElementPresent(PWAPlayerPage.objEmbedStartAtText, "Start At text");
		verifyElementPresent(PWAPlayerPage.objEmbedStartAtValue, "Start At value 0:00");
		verifyElementPresent(PWAPlayerPage.objEmbedCopyButton, "Embed Copy button");
		verifyElementPresent(PWAPlayerPage.objEmbedCloseButton, "Embed Close button");
		String embedtext = getElementPropertyToString("innerText", PWAPlayerPage.objEmbedText, "Embed text");
		if (embedtext.contains("start=\"0:00\"")) {
			logger.error("The Embed text contains \'start=\"0:00\"\' even though checkbox is unchecked");
			extent.extentLoggerFail("", "The Embed text contains \'start=\"0:00\"\' even though checkbox is unchecked");
		} else {
			logger.info(
					"The Embed text does not contain \'start=\"0:00\"\' because checkbox is unchecked, expected behavior");
			extent.extentLogger("",
					"The Embed text does not contain \'start=\"0:00\"\' because checkbox is unchecked, expected behavior");
		}
		click(PWAPlayerPage.objEmbedCheckbox, "Embed Checkbox");
		embedtext = getElementPropertyToString("innerText", PWAPlayerPage.objEmbedText, "Embed text");
		if (embedtext.contains("start=\"0:00\"")) {
			logger.info("The Embed text contains \'start=\"0:00\"\' because checkbox is checked, expected behavior");
			extent.extentLogger("",
					"The Embed text contains \'start=\"0:00\"\' because checkbox is checked, expected behavior");
		} else {
			logger.error("The Embed text does not contain \'start=\"0:00\"\' even though checkbox is checked");
			extent.extentLoggerFail("",
					"The Embed text does not contain \'start=\"0:00\"\' even though checkbox is checked");
		}
		findElement(PWAPlayerPage.objEmbedStartAtValue).clear();
		logger.info("Cleared Start At text value");
		extent.extentLogger("", "Cleared Start At text value");
		type(PWAPlayerPage.objEmbedStartAtValue, "16:19", "Start duration");
		waitTime(2000);
		embedtext = getElementPropertyToString("innerText", PWAPlayerPage.objEmbedText, "Embed text");
		if (embedtext.contains("start=\"16:19\"")) {
			logger.info("The Embed text contains \'start=\"16:19\"\' after entering Start At value 16:19");
			extent.extentLogger("", "The Embed text contains \'start=\"16:19\"\' after entering Start At value 16:19");
		} else {
			logger.error("The Embed text does not contain \'start=\"16:19\"\' after entering Start At value 16:19");
			extent.extentLoggerFail("",
					"The Embed text does not contain \'start=\"16:19\"\' after entering Start At value 16:19");
		}
		click(PWAPlayerPage.objEmbedCloseButton, "Embed Close button");
		if (checkElementDisplayed(PWAPlayerPage.objEmbedHeader, "Embed Video header")) {
			logger.error("Embed Close button functionality failed");
			extent.extentLoggerFail("", "Embed Close button functionality failed");
		} else {
			logger.info("Embed Close button functionality passed");
			extent.extentLogger("", "Embed Close button functionality passed");
		}
	}

	public void PWAClickOnPromotionalBanners(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("Defect PWA2-5286 : Click on Promotional Banner");
			logger.info("Defect PWA2-5286 : Click on Promotional Banner");
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			String currentUrl = "", homeUrl = "";
			homeUrl = getParameterFromXML("url");
			click(PWAHomePage.objSubscribeBtn, "Subscribe button");
			List<WebElement> carouselDots = findElements(PWAHomePage.objPromotionalBannerCarouselDots);
			for (int dot = 0; dot < carouselDots.size(); dot++) {
				click(PWAHomePage.objPromotionalBannerCarouselDots(dot + 1), "Carousel Dot " + (dot + 1));
				click(PWAHomePage.objPromotionalBanner, "Promotional Banner " + (dot + 1));
				currentUrl = getWebDriver().getCurrentUrl();
				logger.info("Current URL : " + currentUrl);
				extent.extentLogger("", "Current URL : " + currentUrl);
				if (currentUrl.equals(homeUrl + "myaccount/subscription")) {
					logger.info("Click on Promotional Banner shows no response, expected behavior");
					extent.extentLogger("", "Click on Promotional Banner shows no response, expected behavior");
				} else {
					logger.error("Click on Promotional Banner has caused page navigation");
					extent.extentLoggerFail("", "Click on Promotional Banner has caused page navigation");
				}
			}
			getWebDriver().navigate().back();
			logger.info("Called driver back");
			extent.extentLogger("", "Called driver back");
			currentUrl = getWebDriver().getCurrentUrl();
			logger.info("Current URL : " + currentUrl);
			extent.extentLogger("", "Current URL : " + currentUrl);
			if (currentUrl.equals(homeUrl)) {
				logger.info("Navigated back to Home page");
				extent.extentLogger("", "Navigated back to Home page");
			} else {
				logger.error("Failed to navigate back to Home page");
				extent.extentLoggerFail("", "Failed to navigate back to Home page");
			}
		}
	}

	public void PWAZeeplexDisclaimer(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-5409 : ZEEPLEX-Addition of disclaimer text for user on frontend");
		logger.info("PWA2-5409 : ZEEPLEX-Addition of disclaimer text for user on frontend");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		navigateToAnyScreenOnWeb("ZEEPLEX");
		String disclaimerText = getElementPropertyToString("innerText", PWAHomePage.objZeePlexDisclaimer,
				"Disclaimer text");
		String expectedDisclaimerText = "ZEEPLEX movies are not part of ZEE5 Premium Subscription";
		if (disclaimerText.contains(expectedDisclaimerText)) {
			logger.info("Expected Disclaimer text is displayed : " + expectedDisclaimerText);
			extent.extentLogger("titles", "Expected Disclaimer text is displayed : " + expectedDisclaimerText);
		} else {
			logger.info("Disclaimer text displayed : " + disclaimerText);
			extent.extentLogger("titles", "Disclaimer text displayed : " + disclaimerText);
			logger.error("Expected Disclaimer text is not displayed");
			extent.extentLoggerFail("", "Expected Disclaimer text is not displayed");
		}

	}

	public void verifyMandatoryRegistrationPopUpCount(String userType) throws Exception {
		String home = getParameterFromXML("url");
		String url = "";
		JavascriptExecutor js = (JavascriptExecutor) getWebDriver();
		if (userType.equals("Guest")) {
			js.executeScript("window.localStorage.setItem('mandatoryRegistrationPopupCount','0')");
			extent.HeaderChildNode("PWA2-6113 : Mandatory Registration allow video views from 5 to 2");
			logger.info("PWA2-6113 : Mandatory Registration allow video views from 5 to 2");
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			url = home + "movies/details/robin-hood-enemies-forever/0-0-103560";
			getWebDriver().get(url);
			logger.info("First content is played");
			extent.extentLogger("", "First content is played");
			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up")) {
				click(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up close icon");
			}
			waitForPlayerAdToComplete("Video");
			String count = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationPopupCount')")
					.toString();
			logger.info("mandatoryRegistrationPopupCount value in local Storage : " + count);
			extent.extentLogger("", "mandatoryRegistrationPopupCount value in local Storage : " + count);

			url = home + "movies/details/robin-hood-and-the-invincible-knight/0-0-103553";
			getWebDriver().get(url);
			logger.info("Second content is played");
			extent.extentLogger("", "Second content is played");
			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up")) {
				click(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up close icon");
			}
			waitForPlayerAdToComplete("Video");
			count = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationPopupCount')")
					.toString();
			logger.info("mandatoryRegistrationPopupCount value in local Storage : " + count);
			extent.extentLogger("", "mandatoryRegistrationPopupCount value in local Storage : " + count);

			url = home + "movies/details/robin-hood-kings-return/0-0-144742";
			getWebDriver().get(url);
			logger.info("Third content is played");
			extent.extentLogger("", "Third content is played");
			verifyElementPresent(PWAPlayerPage.objWhyRegisterPopUp, "Create New Account Popup");
			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up close icon")) {
				logger.error("Close icon in Create New Account Pop Up should not be displayed on playing 3rd content");
				extent.extentLoggerFail("",
						"Close icon in Create New Account Pop Up should not be displayed on playing 3rd content");
			} else {
				logger.info(
						"Close icon in Create New Account Pop Up is not displayed on playing 3rd content, expected behavior");
				extent.extentLogger("",
						"Close icon in Create New Account Pop Up is not displayed on playing 3rd content, expected behavior");
			}
			count = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationPopupCount')")
					.toString();
			logger.info("mandatoryRegistrationPopupCount value in local Storage : " + count);
			extent.extentLogger("", "mandatoryRegistrationPopupCount value in local Storage : " + count);
			if (count.equals("2")) {
				logger.info("mandatoryRegistrationPopupCount update is as expected");
				extent.extentLogger("", "mandatoryRegistrationPopupCount update is as expected");
			} else {
				logger.error("mandatoryRegistrationPopupCount update is not as expected");
				extent.extentLoggerFail("", "mandatoryRegistrationPopupCount update is not as expected");
			}
			mandatoryRegistrationPopUp(userType);
		}
		extent.HeaderChildNode("PWA2-5454 : Handling country mismatch in URL");
		logger.info("PWA2-5454 : Handling country mismatch in URL");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String currentUrl = getWebDriver().getCurrentUrl();
		if (currentUrl.contains("global")) {
			logger.error("Home page contains \"global\" in the URL");
			extent.extentLoggerFail("", "Home page contains \"global\" in the URL");
		} else {
			logger.info("Home page does not contain \"global\" in the URL, expected behavior");
			extent.extentLogger("", "Home page does not contain \"global\" in the URL, expected behavior");
		}
		extent.HeaderChildNode("Task PWA2-5455 : Handling language mismatch in URL");
		logger.info("Task PWA2-5455 : Handling language mismatch in URL");
		click(PWAHomePage.objLanguage, "Language button");
		click(PWAHomePage.objMarathiWEB, "Marathi Display language");
		click(PWAHamburgerMenuPage.objApply, "Apply button on Display Langauge dropdown");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objApplybutton, "Apply button on Content Language dropdown");
		url = home + "hi/movies/details/comedy-couple/0-0-213623";
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(10000);
		currentUrl = getWebDriver().getCurrentUrl();
		if (currentUrl.contains("mr/movies/details/comedy-couple/0-0-213623")) {
			logger.info("Current url fetched : " + currentUrl);
			extent.extentLogger("", "Current url fetched : " + currentUrl);
			logger.info("Redirection to set display language successful");
			extent.extentLoggerPass("", "Redirection to set display language successful");
		} else {
			logger.info("Current url fetched : " + currentUrl);
			extent.extentLogger("", "Current url fetched : " + currentUrl);
			logger.error("Redirection to set display language failed");
			extent.extentLoggerFail("", "Redirection to set display language failed");
		}
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objLanguage, "Language button");
		click(PWAHomePage.objEnglishWEB, "English Display language");
		click(PWAHamburgerMenuPage.objApply, "Apply button on Display Langauge dropdown");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objApplybutton, "Apply button on Content Language dropdown");
		waitTime(4000);
		extent.HeaderChildNode("PWA2-3873 : \"Recommended Videos for You\" next to the player on Videos playback");
		url = home + "videos/details/forbidden-love-press-conference/0-0-224005";
		logger.info("Launched video Forbidden Love Press Conference");
		extent.extentLogger("", "Launched video Forbidden Love Press Conference");
		getWebDriver().get(url);
		waitTime(5000);
		String trayName = getElementPropertyToString("innerText", PWAHomePage.objTrayBesidePlayer,
				"tray beside player");
		logger.info("Tray name displayed beside player: " + trayName);
		extent.extentLogger("", "Tray name displayed beside player: " + trayName);
		if (trayName.equals("Recommended Videos for You")) {
			logger.info("Expected tray name is displayed");
			extent.extentLogger("", "Expected tray name is displayed");
		} else {
			logger.error("Tray name should be Recommended Videos for You");
			extent.extentLoggerFail("", "Tray name should be Recommended Videos for You");
		}
		extent.HeaderChildNode("PWA2-4421 : guest token should not be refreshed if user logs in or logs out");
		logger.info("PWA2-4421 : guest token should not be refreshed if user logs in or logs out");
		if ((userType.equals("Guest"))) {
			String guestToken1 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logger.info("Guest Token fetched from local storage before login: " + guestToken1);
			extent.extentLogger("", "Guest Token fetched from local storage before login: " + guestToken1);
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
			loginWithUserEmail(Username, Password);
			String guestToken2 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logger.info("Guest Token fetched from local storage after login: " + guestToken2);
			extent.extentLogger("", "Guest Token fetched from local storage after login: " + guestToken2);
			if (guestToken1.equals(guestToken2)) {
				logger.info("Same Guest Token before and after login, expected behavior");
				extent.extentLogger("", "Same Guest Token before and after login, expected behavior");
			} else {
				logger.error("Guest Token is not same before and after login");
				extent.extentLoggerFail("", "Guest Token is not same before and after login");
			}
			logout();
		} else {
			String guestToken1 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logger.info("Guest Token fetched from local storage before logout: " + guestToken1);
			extent.extentLogger("", "Guest Token fetched from local storage before logout: " + guestToken1);
			logout();
			String guestToken2 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logger.info("Guest Token fetched from local storage after logout: " + guestToken2);
			extent.extentLogger("", "Guest Token fetched from local storage after logout: " + guestToken2);
			if (guestToken1.equals(guestToken2)) {
				logger.info("Same Guest Token before and after logout, expected behavior");
				extent.extentLogger("", "Same Guest Token before and after logout, expected behavior");
			} else {
				logger.error("Guest Token is not same before and after logout");
				extent.extentLoggerFail("", "Guest Token is not same before and after logout");
			}
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
			loginWithUserEmail(Username, Password);

		}

	}

	public void verifyPremiumPopUpForPremiumLiveChannel(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-4699 : Verify Subscription Pop Up For Premium Live Channel");
		logger.info("PWA2-4699 : Verify Subscription Pop Up For Premium Live Channel");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String channel = "Zee Kannada";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, channel + "\n", "Search Edit box: " + channel);
		waitTime(4000);
		verifyElementPresent(PWASearchPage.objSearchedResult(channel), "Search Result");
		click(PWALiveTVPage.objLivelogo, "Live logo");
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.subscribePopUp, "Subscription popup");
			verifyElementPresentAndClick(PWAPlayerPage.ObjSubscriptionpopupCloseIcon, "Subscription popup close icon");
			verifyElementPresent(PWALiveTVPage.objPlayerInlineSubscriptionLink, "Player inline Subscribtion link");
		} else {
			verifyElementPresent(PWAPlayerPage.objLiveTag, "Live Tag");
			verifyElementPresent(PWAPlayerPage.pauseBtn, "Play/Pause icon");
			verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
		}

	}

	public void verifyClubTagForLiveTVContents(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-3700 : Club badge for Live TV channels");
		logger.info("PWA2-3700 : Club badge for Live TV channels");
		boolean foundPremium = false, foundClub = false;
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		navigateToAnyScreenOnWeb("Live TV");
		for (int i = 0; i < 4; i++) {
			List<WebElement> premiumIcons = findElements(PWAHomePage.objPremiumIcon);
			if (premiumIcons.size() > 0) {
				logger.error("Premium icon found for Live contents in Live TV Tab");
				extent.extentLoggerFail("", "Premium icon found for Live contents in Live TV Tab");
				foundPremium = true;
				break;
			} else {
				Swipe("UP", 1);
			}
		}
		if (foundPremium == false) {
			logger.info("Premium icon not found for Live contents in Live TV Tab, expected behavior");
			extent.extentLogger("", "Premium icon not found for Live contents in Live TV Tab, expected behavior");
		}
		click(PWAHomePage.objBackToTopArrow, "Back to Top arrow");
		waitTime(2000);
		for (int i = 0; i < 4; i++) {
			List<WebElement> clubIcons = findElements(PWAHomePage.objClubIcon);
			if (clubIcons.size() > 0) {
				logger.info("Club icon found for Live contents in Live TV Tab, expected behavior");
				extent.extentLogger("", "Club icon found for Live contents in Live TV Tab, expected behavior");
				foundClub = true;
				break;
			} else {
				scrollDownByY(300);
				logger.info("Scrolled down ..");
				extent.extentLogger("", "Scrolled down ..");
			}
		}
		if (foundClub == false) {
			logger.error("Club icon not found for Live contents in Live TV Tab");
			extent.extentLoggerFail("", "Club icon not found for Live contents in Live TV Tab");
		}

	}

	public void PWAVerifyZeePlexContents(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-7202 : Any trailer featured in the collection is showcased in the front-end");
		logger.info("PWA2-7202 : Any trailer featured in the collection is showcased in the front-end");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String tab = "ZEEPLEX";
		navigateToAnyScreenOnWeb(tab);
		Response tabResponse = ResponseInstance.getResponseForPages(tab.toLowerCase(), "en,hi,kn");
		int items = tabResponse.jsonPath().get("buckets[0].items.size()");
		String title = "", type = "";
		partialScroll();
		partialScroll();
		for (int i = 0; i < items; i++) {
			title = tabResponse.jsonPath().get("buckets[0].items[" + i + "].title");
			type = tabResponse.jsonPath().get("buckets[0].items[" + i + "].asset_subtype");
			logger.info("API returned title: " + title + " of asset_subtype: " + type);
			extent.extentLogger("", "API returned title: " + title + " of asset_subtype: " + type);
			verifyElementPresent(PWAMoviesPage.objTVODTitle(title), title + " in UI");
		}

	}

	public void PWAVerifyWatchTrailerCTA(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-7034 : \"Watch trailer\" CTA for shows and zee-original contents.");
		logger.info("PWA2-7034 : \"Watch trailer\" CTA for shows and zee-original contents.");
		extent.extentLogger("", "-------------- Validation for Shows content --------------");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String showcontent = "Kritika reveals about her marriage with Prithvi - Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, showcontent, "Search edit");
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchedResult(showcontent), "Searched content");
		waitTime(4000);
		partialScroll();
		verifyElementPresentAndClick(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
		waitTime(4000);
		if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
			logger.error("Watch Trailer Button functionality failed");
		}

		extent.extentLogger("", "-------------- Validation for ZEE5 Originals content --------------");
		String zee5content = "The Three B.Techs";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, zee5content, "Search edit");
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchedResult(zee5content), "Searched content");
		waitTime(4000);
		partialScroll();
		verifyElementPresentAndClick(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
		waitTime(4000);
		if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
			logger.error("Watch Trailer Button functionality failed");
		}
		mandatoryRegistrationPopUp(userType);
	}

	public void PWAWatchPromoAndVerifyTitle(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6936 : \"undefined Trailer\" Meta title - fix verification");
		logger.info("PWA2-6936 : \"undefined Trailer\" Meta title - fix verification");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String showcontent = "Baarish";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, showcontent, "Search edit");
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("Shows"), "Shows Tab");
		waitTime(2000);
		click(PWASearchPage.objSearchedResult(showcontent), "Searched content");
		waitTime(4000);
		partialScroll();
		click(PWAPlayerPage.objWatchPromo, "Watch Promo icon");
		waitTime(4000);
		if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
			logger.error("Watch Trailer Button functionality failed");
		}
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title").toString();
		extent.extentLogger("", "Navigated to the consumption page: " + consumptionPageTitle);
		logger.info("Navigated to the consumption page " + consumptionPageTitle);
		if (consumptionPageTitle.contains(showcontent)) {
			extent.extentLogger("", "Navigated to the correct consumption page");
			logger.info("Navigated to the correct consumption page");
		} else {
			extent.extentLoggerFail("n", "Failed to navigate to the correct Consumption page");
			logger.error("Failed to navigate to the correct Consumption page");
		}
		mandatoryRegistrationPopUp(userType);

	}

	public void PWAWatchMovieAndThenClickTrailer(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			navigateToHome();
			extent.HeaderChildNode("PWA2-6932 : Plays any movie for sometime and tap on \"Watch trailer\" CTA");
			logger.info("PWA2-6932 : Plays any movie for sometime and tap on \"Watch trailer\" CTA");
			click(PWAHomePage.objSearchBtn, "Search icon");
			String movie = "Popcorn Monkey Tiger";
			type(PWASearchPage.objSearchEditBox, movie, "Search edit");
			waitTime(3000);
			click(PWASearchPage.objSearchMoviesTab, "Movies tab");
			click(PWASearchPage.objspecificSearch, "Searched content");
			waitTime(10000);
			try {
				Actions act = new Actions(getWebDriver());
				WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
				act.moveToElement(scrubber, 200, 0).click().build().perform();
				extent.extentLogger("", "Scrubbed the player");
				logger.info("Scrubbed the player");
				waitTime(10000);
			} catch (Exception e) {
			}
			waitTime(7000);
			click(PWASearchPage.objWEBWatchTrailerBtn, "Watch Trailer option");
			waitTime(4000);
			if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player")) {
				extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
				logger.error("Watch Trailer Button functionality failed");
			}
		}
	}

	public void PWAWatchNewsVODAndThenClickAnotherContent(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6995 : Play any news VOD content and play any other content from the same page");
		logger.info("PWA2-6995 : Play any news VOD content and play any other content from the same page");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		navigateToAnyScreenOnWeb("News");
		swipeTillTrayAndClickFirstAsset(userType, 15, "Trending News", "Trending News tray", "News");
		String consumptionTitle1 = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title in Consumption Page").toString();
		extent.extentLogger("", "Consumption page title: " + consumptionTitle1);
		logger.info("Consumption page title: " + consumptionTitle1);
		mouseHover();
		click(PWAPlayerPage.pauseBtn, "Pause button");
		swipeTillTrayAndClickFirstAsset(userType, 15, "Today's Headlines", "Today's Headlines tray", "Consumptions");
		String consumptionTitle2 = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title in Consumption Page").toString();
		extent.extentLogger("", "Consumption page title: " + consumptionTitle2);
		logger.info("Consumption page title: " + consumptionTitle2);
		if (consumptionTitle1.equals(consumptionTitle2)) {
			extent.extentLoggerFail("", "Content click in VOD News Consumptions has failed");
			logger.error("Content click in VOD News Consumptions has failed");
		}
		mouseHover();
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		System.out.println("Current Duration: " + currentDuration);
		extent.extentLogger("", "Current Duration: " + currentDuration);
		logger.info("Current Duration: " + currentDuration);
		waitTime(10000);
		mouseHover();
		String currentDuration10 = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Duration after some time: " + currentDuration10);
		logger.info("Duration after some time: " + currentDuration10);
		if (currentDuration.equals(currentDuration10)) {
			extent.extentLoggerFail("", "Content play from VOD News Consumptions has failed");
			logger.error("Content play from VOD News Consumptions has failed");
		} else {
			extent.extentLogger("", "Content play from VOD News Consumptions has passed");
			logger.info("Content play from VOD News Consumptions has passed");
		}
	}

	public void PWAClickSubscribeDuringAdPlay(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("PWA2-6823 : Ad and Content play after clicking Subscribe below player");
			logger.info("PWA2-6823 : Ad and Content play after clicking Subscribe below player");
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			click(PWAHomePage.objSearchBtn, "Search icon");
			String content = "Prithvi offers Sarla a fake apology - Kundali Bhagya";
			type(PWASearchPage.objSearchEditBox, content, "Search edit");
			waitTime(3000);
			click(PWASearchPage.objspecificSearch, "Searched content");
			if (userType.equals("Guest")) {
				waitTime(3000);
				if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
					click(PWASearchPage.objCloseRegisterDialog, "Close Button");
				}
			}

			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("Ad play in progress");
				extent.extentLogger("", "Ad play in progress");
				click(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, "Subscribe button below player during Ad Play");
				verifyElementPresent(PWASubscriptionPages.objSubscribepopup, "Subscribe popup");
				click(PWAPremiumPage.objClosePremiumPopup, "Subscribe popup close button");
				waitForPlayerAdToComplete("Video Player");
				mouseHover();
				String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
						"Current duration");
				System.out.println("Current Duration: " + currentDuration);
				extent.extentLogger("", "Current Duration: " + currentDuration);
				if (currentDuration.equals("") || currentDuration.equals(null)) {
					extent.extentLoggerFail("", "Ad and Content failed to resume after dismissing pop up");
					logger.error("Ad and Content failed to resume after dismissing pop up");
				} else {
					extent.extentLogger("", "Ad and Content resumed after dismissing pop up, expected behavior");
					logger.info("Ad and Content resumed after dismissing pop up, expected behavior");
				}
			}
		}
	}

	public void PWAVmaxAdForMusicAndNews(String userType) throws Exception {
		mandatoryRegistrationPopUp(userType);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			extent.HeaderChildNode("PWA2-6824 : Vmax Ads for Music and VOD News");
			logger.info("PWA2-6824 : Vmax Ads for Music and VOD News");
			navigateToAnyScreenOnWeb("News");
			swipeTillTrayAndClickFirstAsset(userType, 15, "Trending News", "Trending News tray", "News");
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				waitForPlayerAdToComplete("Video Player");
				extent.extentLoggerFail("", "Vmax Ad played for VOD News content, expected behavior");
				logger.error("Vmax Ad played for VOD News content, expected behavior");
			} else {
				extent.extentLoggerFail("", "Vmax Ad failed to play for VOD News content");
				logger.error("Vmax Ad failed to play for VOD News content");
			}
			mandatoryRegistrationPopUp(userType);
			navigateToAnyScreenOnWeb("Music");
			waitTime(3000);
			verifyElementPresentAndClick(PWAPlayerPage.objFirstCardFigureFromTray, "First card image from first rail");
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				waitForPlayerAdToComplete("Video Player");
				extent.extentLoggerFail("", "Vmax Ad played for VOD News content, expected behavior");
				logger.error("Vmax Ad played for VOD News content, expected behavior");
			} else {
				extent.extentLoggerFail("", "Vmax Ad failed to play for VOD News content");
				logger.error("Vmax Ad failed to play for VOD News content");
			}
			mandatoryRegistrationPopUp(userType);
		}
		extent.HeaderChildNode("PWA2-6880 : Content is getting paused with mute state verification");
		logger.info("PWA2-6880 : Content is getting paused with mute state verification");
		if (userType.equals("SubscribedUser")) {
			navigateToHome();
			navigateToAnyScreenOnWeb("Music");
			waitTime(10000);
			verifyElementPresentAndClick(PWAPlayerPage.objFirstCardFigureFromTray, "First card image from first rail");
			waitTime(5000);
		}
		verifyElementPresentAndClick(PWAPlayerPage.objCardBesidePlayerImage, "Card beside player");
		waitTime(10000);
		verifyElementPresent(PWAPlayerPage.objMuteButton, "Mute button");
	}

	public void PWALatestEpisodeInURLAndCheckSubscribe(String userType) throws Exception {
		extent.HeaderChildNode(
				"PWA2-6993 : Appending the playback URL as \"latest/latest1\" and verifying Subscribe CTA");
		logger.info("PWA2-6993 : Appending the playback URL as \"latest/latest1\" and verifying Subscribe CTA");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String home = getParameterFromXML("url");
		extent.extentLogger("", "---------- Appending \"latest\" to show url -----------");
		String url = home + "zee5originals/details/baarish/0-6-2614/latest";
		getWebDriver().get(url);
		logger.info("URL opened: " + url);
		extent.extentLogger("", "URL opened: " + url);
		waitTime(5000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.objGetPremium, "Subscribe button below player");
		} else {
			if (checkElementDisplayed(PWAPlayerPage.objGetPremium,
					"Subscribe button below player for Subscribed user")) {
				extent.extentLoggerFail("",
						"Subscribe button below player should not be displayed for Subscribed user");
				logger.error("Subscribe button below player should not be displayed for Subscribed user");
			}
		}
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "---------- Appending \"latest1\" to show url -----------");
		url = home + "zee5originals/details/poison/0-6-1558/latest1";
		getWebDriver().get(url);
		logger.info("URL opened: " + url);
		extent.extentLogger("", "URL opened: " + url);
		waitTime(5000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.objGetPremium, "Subscribe button below player");
		} else {
			if (checkElementDisplayed(PWAPlayerPage.objGetPremium,
					"Subscribe button below player for Subscribed user")) {
				extent.extentLoggerFail("",
						"Subscribe button below player should not be displayed for Subscribed user");
				logger.error("Subscribe button below player should not be displayed for Subscribed user");
			}
		}
		mandatoryRegistrationPopUp(userType);
	}

	public void PWAVerifyingRefreshForShowDetailsAndConsumptions(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6897 : Refreshing show detail page and episode consumption page");
		logger.info("PWA2-6897 : Refreshing show detail page and episode consumption page");
		extent.extentLogger("", "---------- Refreshing show detail page -----------");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String show = "Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, show, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(show), "Searched content");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String showPageTitleBeforeRefresh = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Show Title").toString();
		logger.info("Show Title displayed before refresh: " + showPageTitleBeforeRefresh);
		extent.extentLogger("", "Show Title displayed before refresh: " + showPageTitleBeforeRefresh);
		String url = getWebDriver().getCurrentUrl();
		logger.info("URL displayed: " + url);
		extent.extentLogger("", "URL displayed: " + url);
		getWebDriver().get(url);
		logger.info("Refreshed page");
		extent.extentLogger("", "Refreshed page");
		waitTime(5000);
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String showPageTitleAfterRefresh = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Show Title").toString();
		logger.info("Show Title displayed after refresh: " + showPageTitleAfterRefresh);
		extent.extentLogger("", "Show Title displayed after refresh: " + showPageTitleAfterRefresh);
		if (showPageTitleAfterRefresh.equals(showPageTitleBeforeRefresh) && !showPageTitleAfterRefresh.equals("")
				&& !showPageTitleAfterRefresh.equals(null)) {
			logger.info("Page refresh successful");
			extent.extentLogger("", "Page refresh successful");
		} else {
			extent.extentLoggerFail("", "Page refresh failed");
			logger.error("Page refresh failed");
		}
		extent.extentLogger("", "---------- Refreshing episode detail page -----------");
		mandatoryRegistrationPopUp(userType);
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(5000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		mandatoryRegistrationPopUp(userType);
		String consumptionPageTitleBeforeRefresh = getElementPropertyToString("innerText",
				PWAPlayerPage.objContentTitle, "Content Title").toString();
		logger.info("Episode Title displayed before refresh: " + consumptionPageTitleBeforeRefresh);
		extent.extentLogger("", "Episode Title displayed before refresh: " + consumptionPageTitleBeforeRefresh);
		url = getWebDriver().getCurrentUrl();
		logger.info("URL displayed: " + url);
		extent.extentLogger("", "URL displayed: " + url);
		getWebDriver().get(url);
		logger.info("Refreshed page");
		extent.extentLogger("", "Refreshed page");
		mandatoryRegistrationPopUp(userType);
		waitTime(5000);
		String consumptionPageTitleAfterRefresh = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title").toString();
		logger.info("Show Title displayed after refresh: " + consumptionPageTitleAfterRefresh);
		extent.extentLogger("", "Show Title displayed after refresh: " + consumptionPageTitleAfterRefresh);
		if (consumptionPageTitleAfterRefresh.equals(consumptionPageTitleBeforeRefresh)
				&& !consumptionPageTitleAfterRefresh.equals("") && !consumptionPageTitleAfterRefresh.equals(null)) {
			logger.info("Page refresh successful");
			extent.extentLogger("", "Page refresh successful");
		} else {
			extent.extentLoggerFail("", "Page refresh failed");
			logger.error("Page refresh failed");
		}
	}

	public void PWAVerifyNextContentPlayAfterBeforeTVContent(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("PWA2-6852 : Verify next content play after before TV content");
			logger.info("PWA2-6852 : Verify next content play after before TV content");
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			swipeTillTrayAndClickAsset(userType, 15, "Before Zee TV", "Before TV tray", "Home");
			waitTime(7000);
			String contentPlayed = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
					"Content Title").toString();
			logger.info("Content name playing: " + contentPlayed);
			extent.extentLogger("", "Content name playing: " + contentPlayed);
			if (checkElementDisplayed(PWAPlayerPage.subscribePopUp, "Subscription popup")) {
				waitTime(3000);
				click(PWAPlayerPage.ObjSubscriptionpopupCloseIcon, "Subscription popup close icon");
			}
			waitTime(7000);
			waitForPlayerAdToComplete("Video Player");
			String nextContent = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "Content Title")
					.toString();
			logger.info("Content name playing: " + nextContent);
			extent.extentLogger("", "Content name playing: " + nextContent);
			if (contentPlayed.equals(nextContent)) {
				logger.error("Next content failed to play after before tv promo play");
				extent.extentLoggerFail("", "Next content failed to play after before tv promo play");
			} else {
				logger.info("Next content played successfully after before tv promo play");
				extent.extentLogger("", "Next content played successfully after before tv promo play");
			}
		}
	}

	public boolean swipeTillTrayAndClickAsset(String userType, int noOfSwipes, String trayTitle, String message,
			String tab) throws Exception {
		int swipeCount = 0;
		String trayTitleInUI = "", temp = "";
		boolean found = false, titleDisplayed = false;
		List<WebElement> trays;
		ArrayList<String> titles = new ArrayList<String>();
		for (int i = 0; i <= noOfSwipes; i++) {
			trays = new ArrayList<WebElement>();
			trays = getWebDriver().findElements(PWALandingPages.objTrayTitle);
			for (int tr = 0; tr < trays.size(); tr++) {
				try {
					titles.add(trays.get(tr).getAttribute("innerText"));
				} catch (Exception e) {
				}
			}
			for (int traycount = 0; traycount < titles.size(); traycount++) {
				temp = titles.get(traycount);
				if (temp.toLowerCase().contains(trayTitle.toLowerCase())) {
					trayTitleInUI = temp;
					if (!titleDisplayed) {
						logger.info(trayTitleInUI + " is present in " + tab + " page");
						extent.extentLogger("trayfound", trayTitleInUI + " is present in " + tab + " page");
						titleDisplayed = true;
					}
					if (trayTitle.equals("Shows")) {
						try {
							// handle mandatory pop up
							mandatoryRegistrationPopUp(userType);
							getWebDriver().findElement(PWALandingPages.objFirstAssetInTrayIndex(trayTitleInUI)).click();
							found = true;
						} catch (Exception e) {
						}
					} else {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						try {
							JSClick(PWALandingPages.objFirstAssetInTrayIndex(trayTitleInUI), "First Asset");
							found = true;
						} catch (Exception e1) {
						}
					}
					if (found == true) {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						waitTime(2000);
						return true;
					} else {
						scrollDownByY(150);
					}
				}
			}
			scrollDownByY(350);
			waitTime(5000);
			swipeCount++;
			logger.info("Scrolled down");
			extent.extentLogger("scrolled", "Scrolled down");
			if (swipeCount == noOfSwipes) {
				logger.error("Failed to locate tray " + trayTitle);
				extent.extentLoggerFail("failedToLocate", "Failed to locate card " + trayTitle);
				logger.error("Failed to locate first card");
				extent.extentLoggerFail("failedToLocate", "Failed to locate card");
			}
		}
		return false;
	}

	public void PWAClickSubscribeDuringTrailerPlay(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			extent.HeaderChildNode("PWA2-6864 : Trailer play after clicking Subscribe below player");
			logger.info("PWA2-6864 : Trailer play after clicking Subscribe below player");
			click(PWAHomePage.objSearchBtn, "Search icon");
			String content = "Soojidaara | Trailer";
			type(PWASearchPage.objSearchEditBox, content, "Search edit");
			waitTime(3000);
			click(PWASearchPage.objspecificSearch, "Searched content");
			if (userType.equals("Guest")) {
				waitTime(3000);
				if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
					click(PWASearchPage.objCloseRegisterDialog, "Close Button");
				}
			}
			waitTime(5000);
			click(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, "Subscribe button below player during Ad Play");
			verifyElementPresent(PWASubscriptionPages.objSubscribepopup, "Subscribe popup");
			click(PWAPremiumPage.objClosePremiumPopup, "Subscribe popup close button");
			mouseHover();
			String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
					"Current duration");
			System.out.println("Current Duration: " + currentDuration);
			extent.extentLogger("", "Current Duration: " + currentDuration);
			if (currentDuration.equals("") || currentDuration.equals(null)) {
				extent.extentLoggerFail("", "Trailer failed to resume after dismissing pop up");
				logger.error("Trailer failed to resume after dismissing pop up");
			} else {
				extent.extentLogger("", "Trailer resumed after dismissing pop up, expected behavior");
				logger.info("Trailer resumed after dismissing pop up, expected behavior");
			}
		}
	}

	public void PWAVerifyNewsVODPlay(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6926 : Verify error is not displayed on playing News VOD Content");
		logger.info("PWA2-6926 : Verify error is not displayed on playing News VOD Content");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String home = getParameterFromXML("url");
		ArrayList<String> urlsToOpen = new ArrayList<String>();
		urlsToOpen.add(home
				+ "news/details/international-womens-day-2021-date-history-significance-and-theme-of-the-day/0-0-newsauto_626t9qsgl500");
		urlsToOpen.add(
				home + "news/details/budget-2021-p-chidambaram-talks-about-budget-2021/0-0-newsauto_6u2nna3ugl70)");
		urlsToOpen.add(home + "news/details/bank-of-maharashtra-gold-loans-pre-roll/0-0-newsauto_47pt91la0ag0");
		urlsToOpen.add(
				home + "news/details/dixon-technologies-cfo-on-growth-run-rate-and-more/0-0-newsauto_1smvmfh58ep8");
		urlsToOpen.add(
				home + "news/details/budget-2021-who-gets-affected-by-proposed-epf-changes/0-0-newsauto_5g26jf84rkg0");
		urlsToOpen.add(home + "news/details/government-to-unveil-securities-related-laws/0-0-newsauto_6m35kvcf4lm0");
		String currentUrl = "";
		for (int i = 0; i < urlsToOpen.size(); i++) {
			currentUrl = urlsToOpen.get(i);
			getWebDriver().get(currentUrl);
			logger.info("Navigated to News VOD content : " + currentUrl);
			extent.extentLogger("", "Navigated to News VOD content : " + currentUrl);
			waitTime(4000);
			if (checkElementDisplayed(PWAHomePage.objOopsNoInfo, "Oops! No Information available")) {
				extent.extentLoggerFail("", "News VOD content play failed");
				logger.error("News VOD content play failed");
			} else {
				String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
						"Content Title").toString();
				if (consumptionPageTitle.equals("") || consumptionPageTitle.equals(null)) {
					extent.extentLoggerFail("", "Failed to fetch News VOD content title");
					logger.error("Failed to fetch News VOD content title");
				} else {
					extent.extentLogger("", "News VOD content title : " + consumptionPageTitle);
					logger.info("News VOD content title : " + consumptionPageTitle);
				}
			}
		}
	}

	public void PWAVerifyImageAssetForZee5Logo(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6964 : Verify Image Asset For Zee5 Logo");
		logger.info("PWA2-6964 : Verify Image Asset For Zee5 Logo");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		extent.extentLogger("", "---------- Verify ZEE5 Logo src attribute value in Home page-----------");
		String source = getElementPropertyToString("src", PWAHomePage.objZeeLogo, "ZEE5 Logo").toString();
		extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + source);
		logger.info("Value of src attribute of ZEE5 Logo: " + source);
		if (source.contains("/images/ZEE5_logo.svg")) {
			extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
		} else {
			extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
			logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
		}
		if (userType.equals("Guest")) {
			extent.extentLogger("",
					"---------- Verify ZEE5 Logo src attribute value in Forgot Password page-----------");
			click(PWALoginPage.objLoginBtnWEB, "Login button");
			waitTime(5000);
			click(PWALoginPage.objForgotPasswordTxt, "Forgot Password link");
			String sourceInForgotPassPage = getElementPropertyToString("src",
					PWAHomePage.objZeeLogoInForgotPasswordPage, "ZEE5 Logo").toString();
			extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + sourceInForgotPassPage);
			logger.info("Value of src attribute of ZEE5 Logo: " + sourceInForgotPassPage);
			if (sourceInForgotPassPage.contains("/images/ZEE5_logo.svg")) {
				extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
				logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			} else {
				extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
				logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
			}
		}
		extent.extentLogger("", "---------- Verify ZEE5 Logo src attribute value in Show Details page-----------");
		navigateToHome();
		String show = "Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, show, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(show), "Searched content");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String sourceInShowPage = getElementPropertyToString("src", PWAHomePage.objZeeLogo, "ZEE5 Logo").toString();
		extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + sourceInShowPage);
		logger.info("Value of src attribute of ZEE5 Logo: " + sourceInShowPage);
		if (sourceInShowPage.contains("/images/ZEE5_logo.svg")) {
			extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
		} else {
			extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
			logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
		}
		extent.extentLogger("", "---------- Verify ZEE5 Logo src attribute value in Consumptions page-----------");
		navigateToHome();
		String episode = "Prithvi offers Sarla a fake apology - Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, episode, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(episode), "Searched content");
		String sourceInPlayerPage = getElementPropertyToString("src", PWAHomePage.objZeeLogo, "ZEE5 Logo").toString();
		extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + sourceInPlayerPage);
		logger.info("Value of src attribute of ZEE5 Logo: " + sourceInPlayerPage);
		if (sourceInPlayerPage.contains("/images/ZEE5_logo.svg")) {
			extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
		} else {
			extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
			logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
		}
		mandatoryRegistrationPopUp(userType);
	}

	public void TasksAndDefects(String userType) throws Exception {
		PWAVerifyTitleInAnchorTags(userType);
		PWAVerifyImageWebP(userType);
		PWAVerifyMetaTags(userType);
		PWABreadcrumbImplementation(userType);
		PWASubtitleSelection(userType);
		PWAVerifyPageFreezeForChannel(userType);
		PWAEmbedFunctionality(userType);
		PWAClickOnPromotionalBanners(userType);
		PWAZeeplexDisclaimer(userType);
		verifyPremiumPopUpForPremiumLiveChannel(userType);
		verifyMandatoryRegistrationPopUpCount(userType);
		verifyClubTagForLiveTVContents(userType);
		PWAVerifyMetaTagsForTwitter(userType);
		PWAVerifyZeePlexContents(userType);
		PWAVerifyWatchTrailerCTA(userType);
		PWAWatchPromoAndVerifyTitle(userType);
		PWAWatchMovieAndThenClickTrailer(userType);
		PWAWatchNewsVODAndThenClickAnotherContent(userType);
		PWAClickSubscribeDuringAdPlay(userType);
		PWAVmaxAdForMusicAndNews(userType);
		PWALatestEpisodeInURLAndCheckSubscribe(userType);
		PWAVerifyingRefreshForShowDetailsAndConsumptions(userType);
		PWAVerifyNextContentPlayAfterBeforeTVContent(userType);
		PWAClickSubscribeDuringTrailerPlay(userType);
		PWAVerifyNewsVODPlay(userType);
		PWAVerifyImageAssetForZee5Logo(userType);
	}
	
	public void tvShowsValidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_041: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_042 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + ", Second content title :"
				+ secondCarouselTitle + " and Third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + ", Second content title :" + secondCarouselTitle
				+ " and Third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}

		extent.HeaderChildNode(" HLS_043 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode("HLS_046,HLS_044 : Verify that user is able to rotate tray");
		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			waitTime(3000);
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		extent.HeaderChildNode(" HLS_045 : Verify the premium tag for all premium content card");
		waitTime(3000);
		for (int i = 0; i < 10; i++) {
			if (getWebDriver().findElements(PWAHomePage.objClubTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is isplayed");
				break;
			} else {
				scrollDownByY(300);
				if (i == 4) {
					logger.info("Premium tag is not displayed");
					extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				}
			}
		}
		click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
		extent.HeaderChildNode(" HLS_047 : Navigate to the TV show Details Screen");
		mandatoryRegistrationPopUp(userType);
		String nextPageTitle = "";
		boolean firstAssetClicked = swipeTillTrayAndClickFirstAsset(userType, 15, "Trending Shows",
				"Trending Shows tray", tabName);
		if (firstAssetClicked) {
			try {
				nextPageTitle = getText(PWAShowsPage.objShowsTitle);
				logger.info("Shows Details page is displayed: " + nextPageTitle);
				extent.extentLogger("showDetails", "Shows Details page is displayed: " + nextPageTitle);
			} catch (Exception e) {
				try {
					nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
					logger.info("Player screen is displayed: " + nextPageTitle);
					extent.extentLogger("playerScreen", "Player screen is displayed: " + nextPageTitle);
				} catch (Exception e1) {
					nextPageTitle = "";
				}
			}
		}
		if (!nextPageTitle.equals("")) {
			logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			screencapture();
			if (!userType.equals("SubscribedUser"))
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
			try {
				getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
			} catch (Exception e) {
			}
		} else {
			logger.error("Failed to navigate to Details page: \"" + nextPageTitle + "\"");
			extent.extentLoggerFail("playerScreen", "Failed to navigate to Details page: \"" + nextPageTitle + "\"");
		}

		extent.HeaderChildNode(" HLS_049 : Verify play Free content from the show page");
		mandatoryRegistrationPopUp(userType);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsShow");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(4000);
		partialScroll();
		checkElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(2000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		click(PWAHomePage.objZeelogo1, "Zee Logo");

		extent.HeaderChildNode(" HLS_050 : Verify play Premium content from the show page");
		verifyLandscapeforPremiumContentWeb();

		navigateToAnyScreenOnWeb(tabName);

		extent.HeaderChildNode(" HLS_051 : Verify the Play, share and add to watch list CTA buttons ");
		trayTitleAndContentValidationWithApiDataMovie(tabName, "tvshows");

		extent.HeaderChildNode("HLS_052 :Verify the right side bottom arrow ");
		scrollToBottomOfPageWEB();
		logger.info("Scrolled Up the page");
		if (scrollToElement(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn)) {
			click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon");
		} else {
			logger.error("Back to Top Arrow icon is not displayed");
			extent.extentLoggerFail("", "Back to Top Arrow icon is not displayed");
		}

		extent.HeaderChildNode(
				" HLS_053 :Verify the Before TV are available, HLS_054 :Verify the  Before TV content playback");
		waitTime(2000);
		// Before Zee TV
		mandatoryRegistrationPopUp(userType);
		nextPageTitle = "";
		firstAssetClicked = swipeTillTrayAndClickFirstAssetType2(userType, 15, "Premiere Episodes | Before Zee TV",
				"Before Zee TV tray", tabName);
		if (firstAssetClicked) {
			try {
				nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				logger.info("Player screen is displayed");
				extent.extentLogger("playerScreen", "Player screen is displayed");
			} catch (Exception e1) {
				nextPageTitle = "";
			}
		}
		if (!nextPageTitle.equals("")) {
			logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			if (!userType.equals("SubscribedUser"))
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
			try {
				getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
			} catch (Exception e) {
			}
		} else {
			logger.error("Failed to navigate to Consumptions page: \"" + nextPageTitle + "\"");
			extent.extentLoggerFail("playerScreen",
					"Failed to navigate to Consumptions page: \"" + nextPageTitle + "\"");
		}
	}
	
	public void webSeriesValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_157: Verify user navigation " + tabName + "page");

		PWAPagesNavigationAndTabHighlight(tabName);
		extent.HeaderChildNode(" HLS_158 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);// update

		extent.HeaderChildNode(" HLS_159 : Verify On click View All/> ");
		scrollDownWEB();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");// update
		}
		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(5000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLoggerFail("View All", "Not navigated to View All Page");// update
			}
		}
		Back(1);

		extent.HeaderChildNode("HLS_161 :Verify that Play, share, watchlist CTA");
		trayTitleAndContentValidationWithApiDataZeeoriginals(tabName, "webseries");

		extent.HeaderChildNode("HLS_162 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		waitTime(2000);
		extent.HeaderChildNode("HLS_163 : Verify the Premium icons are displayed ");
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
				break;

			} else {
				logger.info("Premium tag is not displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				partialScrollDown();
			}

		}
//		for (int i = 0; i < 5; i++) {
//			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
//				logger.info("club tag is displayed");
//				extent.extentLogger("club Tag", "club Tag is displayed");
//				break;
//
//			} else {
//				logger.info("club tag is not displayed");
//				extent.extentLogger("club Tag", "club Tag is not displayed");
//				partialScrollDown();
//			}
//
//		}

		extent.HeaderChildNode("HLS_164 : Verify the Premium user is able to watch all the zee originals shows");
		if (userType.equalsIgnoreCase("Subscribeduser")) {
			navigateToAnyScreenOnWeb(tabName);
			swipeTillTrayAndClickFirstAsset(userType, 15, "Best of ZEE5 Originals in Kannada",
					"Best of ZEE5 Originals in Kannada tray", tabName);
//			scrollToTheElementWEB(PWAHomePage.objtrayname("Best of ZEE5 Originals in Hindi"));
//			checkElementDisplayed(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
//			click(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");

			// click(PWAShowsPage.objFirstAssetTitleFirstRail, "Content Title in Details
			// Page");
			waitTime(5000);
			checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
			click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("user is able to watch the zee originals shows");
				extent.extentLogger("zee originals shows", "user is able to watch the zee originals shows");
			} else {
				logger.info("user is not able to watch the zee originals shows");
				extent.extentLoggerFail("zee originals shows", "user is not able to watch the zee originals shows");// update
			}
		}

		if (userType.equalsIgnoreCase("Clubuser")) {
			extent.HeaderChildNode(
					"HLS_165 : Verify the Club user is able to watch all the zee originals shows from Zee originals page");
			navigateToAnyScreenOnWeb("ZEE5 Originals");
			checkElementDisplayed(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			click(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			waitTime(3000);
			JSClick(PWAShowsPage.objEpisodeCard, "First Episode Card");

			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("club user is able to watch the zee originals shows");
				extent.extentLogger("zee originals shows", "club user is able to watch the zee originals shows");
			} else {
				logger.info("club user is not able to watch the zee originals shows");
				extent.extentLoggerFail("zee originals shows",
						" club user is not able to watch the zee originals shows");// update
			}
			Back(1);
		}
		extent.HeaderChildNode("HLS_166 : Verify user is able to watch the First Episode of the originals shows");
		navigateToAnyScreenOnWeb(tabName);
//		scrollToTheElementWEB(PWAHomePage.objtrayname("Best of ZEE5 Originals in Kannada"));
//		checkElementDisplayed(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		swipeTillTrayAndClickFirstAsset(userType, 15, "Best of ZEE5 Originals in Kannada", "Best of ZEE5 Originals in Kannada tray", tabName);
		click(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		waitTime(8000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("user is able to watch the First Episode");
			extent.extentLogger("zee originals shows", "user is able to watch the First Episode");
		} else {
			logger.info("user is not able to watch the First Episode");
			extent.extentLoggerFail("zee originals shows", " user is not  able to watch the First Episode");// update
		}
//		navigateToAnyScreenOnWeb(tabName);

		extent.HeaderChildNode(
				"HLS_167 : Verify user can Navigate to the Original shows Details Screen post click on any Show Thumbnail Card");
		navigateToAnyScreenOnWeb(tabName);
		// scrollToTheElementWEB(PWAHomePage.objtrayname("Best of ZEE5 Originals in
		// Hindi"));
		JSClick(PWAHamburgerMenuPage.objFirstcontentCard, "First Card");
		waitTime(3000);

		checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("user is able to watch the zee originals shows");
			extent.extentLogger("zee originals shows", "user is navigated to the zee5originals shows");
		} else {
			logger.info("user is not navigated to the zee originals shows");
			extent.extentLoggerFail("zee originals shows", "user is not navigated to the zee 5riginals shows");// update
		}
		if (userType.equalsIgnoreCase("Guest")) {
//			extent.HeaderChildNode(
//					"HLS_168 : Verify the GET CLUB CTA is displayed on the  Club originals detail screen");
//			navigateToAnyScreenOnWeb("ZEE5 Originals");
//			checkElementDisplayed(PWAHamburgerMenuPage.objClubcontentcard, " club content card");
//			click(PWAHamburgerMenuPage.objClubcontentcard, "club content card");
//			waitTime(3000);
//			click(PWAHamburgerMenuPage.objClub, "GET CLUB");
//			Back(1);

			extent.HeaderChildNode(
					"HLS_169 : Verify the GET Premium CTA is displayed on the  zee5 originals detail screen");
			String keyword = "Rangbaaz";
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWAHomePage.objSearchField, keyword + "\n", "Search");
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			verifyElementPresent(PWAShowsPage.objGetPremiumCTAInShowDetails, "Buy Plan CTA in originals details");
			checkElementDisplayed(PWAShowsPage.objShowdeatilPlayIcon, "Play icon in originals details");
			Back(1);
		}
	}
	

	public void defects(String userType, String tabName) throws Exception
	{
		
		extent.HeaderChildNode("Date validation for off air shows (PWA2-4403)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Nashe ", "Search Field");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objFirstsearchcard, "Search content");
		checkElementDisplayed(PWAHamburgerMenuPage.objcontentdate, "Content date");
		String b = getText(PWAHamburgerMenuPage.objcontentdate);
		System.out.println(b);
		logger.info("Off Air Show description displayed : "+b);
		extent.extentLogger("", "Off Air Show description displayed : "+b);
		
		if(b.toLowerCase().contains("jan") || b.toLowerCase().contains("feb") || b.toLowerCase().contains("mar") 
		|| b.toLowerCase().contains("apr") || b.toLowerCase().contains("may") || b.toLowerCase().contains("jun") 
		|| b.toLowerCase().contains("jul") || b.toLowerCase().contains("aug") || b.toLowerCase().contains("sep") 
		|| b.toLowerCase().contains("oct") || b.toLowerCase().contains("nov") || b.toLowerCase().contains("dec"))
		{
			logger.info("Date should not be displayed for off air shows");
			extent.extentLoggerFail("", "Date is displayed for off air shows");
		}
		else 
		{
			logger.info("Date is not displayed for off air shows, expected behavior");
			extent.extentLogger(" ", "Date is not displayed for off air shows, expected behavior");
		}
		
		extent.HeaderChildNode("Play CTA validation on carousel (PWA2_4342)");
		navigateToAnyScreenOnWeb("Movies");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.Objnextarrowcarousel, "Next arrow ");
		waitTime(3000);
		
		verifyElementPresent(PWAKidsPage.objPlayButton, "Play text on Carousel card");
		
		if (userType.equalsIgnoreCase("Subscribeduser"))
		{
			extent.HeaderChildNode("Qwikcilver payment PAY button validation (PWA2-4398)");
			logout();
			
//			String Username = getParameterFromXML("ClubuserName");
//			String Password = getParameterFromXML("ClubPassword");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "promo@mailnesia.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(10000);
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Upgrade button");
			String a = getText(PWAHamburgerMenuPage.objhighestpackcard);
			System.out.println(a);
			extent.extentLogger("", "Selected Amount is displayed : " + a);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinueButton,"Continue button");
			checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
			checkElementDisplayed(PWASubscriptionPages.objAccountInfoDetails, "Account Info Details in Payments Section");
			waitTime(5000);
					WebElement iframeElement = null;
					if (getPlatform().equalsIgnoreCase("Android")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					} else if (getPlatform().equalsIgnoreCase("Web")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					}
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking,"Net banking");
					waitTime(3000);
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption,"Payment option");
					waitTime(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objproceedtopay,"Procced to pay");
					JSClick(PWAHamburgerMenuPage.objproceedtopay,"Procced to pay");
					waitTime(5000);
					Back(1);
					//verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinueButton,"Continue button");
					waitTime(3000);
					//scrollToBottomOfPageWEB();
					scrollToTheElementWEB(PWAHamburgerMenuPage.objQwikcilver);
					checkElementDisplayed(PWAHamburgerMenuPage.objQwikcilver, "Qwikcilver arrow button");
					JSClick(PWAHamburgerMenuPage.objQwikcilver, "Qwikcilver arrow button");
					//verifyElementPresentAndClick(PWAHamburgerMenuPage.objQwikcilver, "Qwikcilver arrow button");
					waitTime(3000);
					//verifyElementPresent(PWAHamburgerMenuPage.objPay, "Pay button");
					
					if (checkElementDisplayed(PWAHamburgerMenuPage.objPay, "Pay button")) {
						extent.extentLogger("", "Pay button is visiable");
						logger.error("Pay is visiable");
					} else {
						extent.extentLoggerFail("", "Pay button  is  not visiable");
						logger.info("Pay button  is  not visiable");
					}
				scrollUp(); 
				extent.HeaderChildNode("Amount validation (PWA2-4343) ");
					checkElementDisplayed(PWAHamburgerMenuPage.objTotalPayable,"Total amount");
					
					String totalamt1 = getText(PWAHamburgerMenuPage.objTotalPayable);
					System.out.println(totalamt1+".00");
					String totalamt11 = totalamt1+".00";
					extent.extentLogger("", "pack Amount in payment page: " + totalamt11);
					waitTime(5000);
					waitTime(5000);
					//WebElement iframeElement = null;
					if (getPlatform().equalsIgnoreCase("Android")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					} else if (getPlatform().equalsIgnoreCase("Web")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					}
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking,"Net banking");
					waitTime(3000);
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption,"Payment option");
					waitTime(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objproceedtopay,"Procced to pay");
					click(PWAHamburgerMenuPage.objproceedtopay,"Procced to pay");
					//click(PWAHamburgerMenuPage.objproceedtopay,"Procced to pay");
					waitTime(5000);
					waitForElement(PWAHamburgerMenuPage.objtotalamount2,20,"Total amount");
					String totalamt2 = getText(PWAHamburgerMenuPage.objtotalamount2);
					System.out.println(totalamt2);
					extent.extentLogger("", "pack Amount in payment Process page : " + totalamt2);
					waitTime(5000);
					Back(1);
					waitForElement(PWASubscriptionPages.objZEE5Logo,20, "Zee5 Logo");
					if(totalamt11!=(totalamt2))
					{
						logger.info("correct Amount is displayed : " +totalamt11);
						extent.extentLogger("", "correct Amount is displayed : " + totalamt11);
					}
					else 
					{
						logger.info("Incorrect Differential Amount is displayed : " +totalamt11);
						extent.extentLoggerFail("", "Incorrect Differential Amount is displayed :" +totalamt11);
					}
					
					
					verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
					logout();
					
//					verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
//					logout();
					String SubscribedUsername = getParameterFromXML("SubscribedUserName");
					String SubscribedPassword = getParameterFromXML("SubscribedPassword");
					//waitForElementAndClickIfPresent(PWAHomePage.objNotNow, 30, "Notification popup");
					verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
					waitTime(3000);
					verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
					type(PWALoginPage.objEmailField, SubscribedUsername, "Email Field");
					waitTime(3000);
					verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
					type(PWALoginPage.objPasswordField, SubscribedPassword, "Password field");
					waitTime(5000);
					click(PWALoginPage.objWebLoginButton, "Login Button");
					waitTime(3000);	
		}
		
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Display Language validatiuon (PWA2-4393)");
			Kannadalanguageselection();
			waitTime(3000);
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objcontinueinkannada, "continue Button ");
			waitTime(3000);
			
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "luckyigscon0074@gmail.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objproceedbtn,"Proceed button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "vasilucky@123", "Password field");
			waitTime(5000);
			click(PWAHamburgerMenuPage.objproceed2btn,"Proceed button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
				
			if (checkElementDisplayed(PWAHomePage.objHomeBarText("Home"),"Home tab")) {
				extent.extentLogger("", "home page should be displayed based on the selected language of logged in user,expected behaviour");
				logger.error("home page should be displayed based on the selected language of logged in user, expected behaviour");
			} else {
				extent.extentLoggerFail("", "The page is translated based on guest user display language.");
				logger.info("The page is translated based on guest user display language.");
			}
			EnglishLanguageselection();
			logout();
		waitTime(3000);
		
		}
		
		

		

		
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) 
		{
		
		extent.HeaderChildNode("Verification of buttons in other display language (PWA2_4352)");
		
		Kannadalanguageselection();
		waitTime(3000);
		navigateToAnyScreenOnWeb("?????");
		//verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		//waitForElementAndClick(PWAHamburgerMenuPage.objgetclubinKannada, 20, "Get club");
		verifyElementPresent(PWAHamburgerMenuPage.objgetclubinKannada, "Get club in kannada");
		JSClick(PWAHamburgerMenuPage.objgetclubinKannada, "Get club in kannada");
		waitTime(5000);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		EnglishLanguageselection();
	
		}
		
		
		if(userType.equalsIgnoreCase("Guest"))
		{
			extent.HeaderChildNode("Login text validation (PWA2-4354)");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, "Dhoop Chhaon ", "Search Field");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objFirstsearchcard, "Search content");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPlayBtn, "Play  Button");
			waitForPlayerAdToComplete("Video Player");
			waitForElement(PWAHamburgerMenuPage.objlogintext, 20, "Login text");
			String bbb = getText(PWAHamburgerMenuPage.objlogintext);
			System.out.println(bbb);
			logger.info("Login text on player : "+bbb);
			extent.extentLogger("", "Login text on player  : "+bbb);
			if (bbb.contains("You must login to watch it for FREE"))
			{
				logger.info("You must login to watch it for FREE should display , expected behavior");
				extent.extentLoggerPass("", "You must login to watch it for FREE should display,  expected behavior");
			}
			else 
			{
				logger.info("You must login to watch it for FREE should display ");
				extent.extentLogger(" ", "You must login to watch it for FREE is not displayed");
			}
			
		}
		
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser"))
		{
			extent.HeaderChildNode("Continue Watching tray validatiuon (PWA2-4414)");
			navigateToAnyScreenOnWeb("Kids");
			if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel")) {
				click(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
				if (checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Subscribe Pop Up")) {

					verifyElementPresentAndClick(PWAPremiumPage.objClosePremiumPopup, "Premium PopUp Close icon");
				}
		}
			Back(1);
			navigateToAnyScreenOnWeb("Kids");
			if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue Watching tray") == false) {
				extent.extentLogger("Verify Continue Watching tray",
						"Continue watching tray is not displayed in Kids page,expected behaviour");
				logger.info("Continue watching tray is not displayed in Kids page , expected behaviour");
			} else {
				softAssert.assertAll();
				extent.extentLoggerFail("Verify Continue Watching tray",
						"Continue watching tray is displaying in Kids page");
				logger.info("Continue watching tray is displaying in Kids page");
			}
	}
	
		
		
		
		if (userType.equalsIgnoreCase("Subscribeduser"))
		{
			
			waitTime(3000);
			extent.HeaderChildNode("carousel play button validatiuon (PWA2-4447)");
		Hindilanguageselection();
			navigateToAnyScreenOnWeb("????");
			waitForElement(PWAPremiumPage.objHerocarouselPlayBtn("Kundali Bhagya"), 20 ,"Play button on carousel");
			verifyElementPresent(PWAPremiumPage.objHerocarouselPlayBtn("Kundali Bhagya"), "Play button on carousel");
			verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(2000);
		EnglishLanguageselection();
		
			
		}
		
		
		if (userType.equals("SubscribedUser")) 
		{
			extent.HeaderChildNode("The prefilled data in the Eduauraa SSO page validation (PWA2-4226)");
			verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objprofileusername, "Profile name");
			click(PWAHamburgerMenuPage.objprofileusername, "Profile name");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
			String firstName = findElement(PWAHamburgerMenuPage.objEditProfileFirstName).getAttribute("value");

			System.out.println(firstName);
			logger.info("First name : "+firstName);
			extent.extentLogger("", "First name : "+firstName);
			String LastName = findElement(PWAHamburgerMenuPage.objEditProfilLastName).getAttribute("value");
			//String b = getText(PWAHamburgerMenuPage.objEditProfilLastName);
			System.out.println(LastName);
			logger.info("last name : "+LastName);
			extent.extentLogger("", "last name : "+LastName);
			String c =  firstName +" "+ LastName;
			System.out.println(c);
			logger.info("First and last name : "+c);
			extent.extentLogger("", "First and last name : "+c);
			
			navigateToAnyScreenOnWeb("Kids");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHomePage.objFirstItemLearnWithEduauraaTray,
					"First card under Learn with Eduauraa tray");
			verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in View All page");

		
			checkElementDisplayed(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer ");
			click(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer ");
			checkElementDisplayed(PWAPlayerPage.objContinue, "Continue offer ");
			click(PWAPlayerPage.objContinue, "Continue offer ");
			waitTime(4000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objeduauraaprofileicon, "Profile icon");
			
			verifyElementPresent(PWAHamburgerMenuPage.objeduauraaprofiledetails, "Profile details");
			String d = getText(PWAHamburgerMenuPage.objeduauraaprofiledetails);
			System.out.println(d);
			logger.info("Eduauraa proile details : "+d);
			extent.extentLogger("", "Eduauraa proile details : "+d);
			
			if(c.contentEquals(d))
			{
				logger.info("Eduauraa account data should be same as Zee5 , expected behavior");
				extent.extentLoggerPass("", "Eduauraa account data should be same as Zee5  ,  expected behavior");
				
			} else {
				logger.error("Eduauraa account data is not same as Zee5 ");
				extent.extentLoggerFail("", "Eduauraa account data is not same as Zee5 ");
			}
			Back(1);
		}
		
		
		if (userType.equals("SubscribedUser"))
		{
			extent.HeaderChildNode("Eduauraa SSO screen validation (PWA2-4198)");
			navigateToAnyScreenOnWeb("Kids");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHomePage.objFirstItemLearnWithEduauraaTray,
					"First card under Learn with Eduauraa tray");
			verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in View All page");
				checkElementDisplayed(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer ");
				click(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer ");
				checkElementDisplayed(PWAPlayerPage.objContinue, "Continue offer ");
				click(PWAPlayerPage.objContinue, "Continue offer ");
				if (checkElementDisplayed(PWAHamburgerMenuPage.objEduauraaSignupPage, "EduauraaSign Up page")) {
					logger.error("User is navigated to EduauraaSign Up page");
					extent.extentLoggerFail("", "User is navigated to EduauraaSign Up page");
				} else {
					logger.info("User should be directly navigated to the Eduauraa landing page ,  expected behavior.");
					extent.extentLoggerPass("", "User should be directly navigated to the Eduauraa landing page,  expected behavior");
				}
				Back(1);
		}
		
		extent.HeaderChildNode("Eduauraa Consumption page is redirected to a new tab validation (PWA2-4137)");
		navigateToAnyScreenOnWeb("Kids");
		waitTime(5000);
		waitForElementAndClick(PWAPremiumPage.objHerocarouselPlayBtn("Eduauraa"), 20, "Play button on Eduauraa carousel");
		//verifyElementPresent(PWAPremiumPage.objHerocarouselPlayBtn("Eduauraa"), "Play button on carousel");
		ArrayList<String> tabs = new ArrayList<String>(getWebDriver().getWindowHandles());
		int a = ( tabs.size());
		System.out.println("No. of tabs: " + a);
		logger.info("No of tabs opened: "+a);
		extent.extentLogger("", "No of tabs opened: "+a);
		
		if(a>=2)
		{
			logger.error("Eduauraa content is played on new tab ");
			extent.extentLoggerFail("", "Eduauraa content is played on new tab ");
		} else {
			logger.info("Eduauraa content should be played on the same tab  , expected behavior");
			extent.extentLoggerPass("", "Eduauraa content should be played on the same tab ,  expected behavior");
		}
		
		if (userType.equals("SubscribedUser")) 
		{
			extent.HeaderChildNode(" User is redirected to the Zee5 Home page instead of the Kids page after logout from the Eduauraa Profile.(PWA2-4506)");
			navigateToAnyScreenOnWeb("Kids");
			verifyElementPresentAndClick(PWAHomePage.objFirstItemLearnWithEduauraaTray,
					"First card under Learn with Eduauraa tray");
			verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in View All page");
			
			
				checkElementDisplayed(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer");
				click(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer");
				checkElementDisplayed(PWAPlayerPage.objContinue, "Continue offer");
				click(PWAPlayerPage.objContinue, "Continue offer");
				verifyElementPresent(PWAHamburgerMenuPage.objeduauraadropdown, "Eduauraa drop down");
				click(PWAHamburgerMenuPage.objeduauraadropdown, "Eduauraa drop down");
				waitTime(5000);
				verifyElementPresent(PWAHamburgerMenuPage.objeduauraalogout, "Eduauraa Logout");
				click(PWAHamburgerMenuPage.objeduauraalogout, "Eduauraa Logout");
				waitTime(3000);
				verifyElementPresent(PWAHamburgerMenuPage.objconfirmpopupYes, "confirm popup");
				click(PWAHamburgerMenuPage.objconfirmpopupYes, "confirm popup");
				checkElementDisplayed(PWAHomePage.objFirstItemLearnWithEduauraaTray,"First card under Learn with Eduauraa tray");
//				String Activetab = getText(PWAHomePage.objActiveTab);
//				System.out.println(Activetab);
				if(checkElementDisplayed(PWAHomePage.objFirstItemLearnWithEduauraaTray,"First card under Learn with Eduauraa tray"))
				{
					logger.info("User is redirected to the Kids page , expected behavior");
					extent.extentLoggerPass("", "\"User is redirected to the Kids page , expected behavior ");
				} else {
					logger.info("User is redirected to the Home page ");
					extent.extentLoggerFail("", "User is redirected to the Home page");
				}
		}
		
		
		
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
			extent.HeaderChildNode("validating the full screen mode when content autoplay play (PWA2-4227)");
			//navigateToAnyScreenOnWeb(tabName);
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
			
			type(PWASearchPage.objSearchEditBox, "Learn about the stethoscope ", "Search bar");
			waitTime(5000);
			
			verifyElementPresent(PWASearchPage.objseconddata, "Searched result");
			JSClick(PWASearchPage.objseconddata, "Searched result");
			waitTime(15000);
			
			verifyElementPresentAndClick(PWAPlayerPage.maximizeBtn, "Maximize window icon");
			//verifyElementPresent(PWAPlayerPage.minimizeBtn, "Minimize window icon");
			upnextrail(userType);
			waitTime(3000);
			if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize window icon")) 
			{
				logger.info("Player is in full screen mode");
				extent.extentLogger("Terms of Use", "Player is in full screen mode");
			}
			else 
			{
				logger.info("Player switched to portrait screen");
				extent.extentLoggerFail(" ", "Player switched to portrait screen");
			}
			
		}
		
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser"))
		{
			
			extent.HeaderChildNode("claim offer validation based on display language (PWA2-4162)");
		navigateToAnyScreenOnWeb("Kids");
		verifyElementPresentAndClick(PWAHomePage.objFirstItemLearnWithEduauraaTray,"First card under Learn with Eduauraa tray");
		verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in View All page");
		Kannadalanguageselection();
		if (userType.equals("NonSubscribedUser"))
		{
		checkElementDisplayed(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer  ");
		
		String claimoffer = getText(PWAPlayerPage.objclaimofferBelowPlayerScreen);
		System.out.println(claimoffer);
		if (claimoffer.contentEquals("Claim Offer")) {
			extent.extentLoggerFail("IncorrectText", "InCorrect text is displayed:"+ claimoffer );
			logger.info("InCorrect text is displayed: " + claimoffer);
		} else {
			extent.extentLogger("correctText","correct text is displayed: " + claimoffer);
			logger.error("correct text is  displayed: " + claimoffer);
		}
		}
		if (userType.equals("SubscribedUser"))
		{
			checkElementDisplayed(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer");
			
			String Gotoeduauraa = getText(PWAPlayerPage.objGoToEduauraa);
			System.out.println(Gotoeduauraa);
			if (Gotoeduauraa.contentEquals("Go to Eduauraa")) {
				extent.extentLoggerFail("IncorrectText", "InCorrect text is displayed:"+ Gotoeduauraa );
				logger.info("InCorrect text is displayed: " + Gotoeduauraa);
			} else {
				extent.extentLogger("correctText","correct text is displayed: " + Gotoeduauraa);
				logger.error("correct text is  displayed: " + Gotoeduauraa);
			}
			
		}
		EnglishLanguageselection();
		}
		
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) 
		{
			extent.HeaderChildNode(" PWA2-4161 : Page navigated to search landing screen when user click browser back /device back button from the Zee5 subscription page ");
			navigateToAnyScreenOnWeb(tabName);
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
			
			type(PWASearchPage.objSearchEditBox, "Learn about the stethoscope", "Search bar");
			verifyElementPresentAndClick(PWASearchPage.objfirstdata, "Searched result");
			waitTime(15000);
			checkElementDisplayed(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer ");
			click(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer ");
			if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title")) {
				logger.info("Navigated to select pack Page");
				extent.extentLogger(" Zee5 Subscription Page", "Navigated to select pack Page");
			} else {
				logger.info("Not navigated to select pack Page");
				extent.extentLogger("Zee5 Subscription Page", "Not navigated to select pack Page");
			}
			Back(1);
			waitTime(10000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Navigated back to the Eduauraa consumption page.");
				extent.extentLogger("Consumption Page", "Navigated back to the Eduauraa consumption page.");
			} else {
				logger.info("Not navigated back to the Eduauraa consumption page.");
				extent.extentLoggerFail("Consumption Page", "Not navigated back to the Eduauraa consumption page.");//update
			}

		
		}
		
		extent.HeaderChildNode("claim offer validation through search content (PWA2-4158)");
		navigateToAnyScreenOnWeb("Kids");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Calculating Compound Interest ", "Search Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWASearchPage.objfirstdata, "Searched result");
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) 
		{
	
		if (verifyElementPresent(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer")) {
			logger.info("\"Claim offer\" CTA Strip should be displayed below the player , expected behaviour");
			extent.extentLogger(" ", "\"Claim offer\" CTA Strip should be displayed below the player , expected behaviour");
		} else {
			logger.info("\"Claim offer\"  CTA Strip fails to display below the player");
			extent.extentLogger("Zee5 Subscription Page", "\"Claim offer\"  CTA Strip fails to display below the player");
		}
		}
		if(userType.equalsIgnoreCase("Subscribeduser"))
		{
			if (checkElementDisplayed(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer")) {
				logger.info("\"Go to Eduauraa\" CTA Strip should be displayed below the player , expected behaviour");
				extent.extentLogger(" ", "\"Go to Eduauraa\" CTA Strip should be displayed below the player , expected behaviour");
			} else {
				logger.info("\"Go to Eduauraa\"  CTA Strip fails to display below the player");
				extent.extentLogger("", "\"Go to Eduauraa\"  CTA Strip fails to display below the player");
			}
		}
		
		if (userType.equalsIgnoreCase("Subscribeduser"))
		{
			waitTime(5000);
			logout();
			//extent.HeaderChildNode("Login as club User");
//			String Username = getParameterFromXML("ClubuserName");
//			String Password = getParameterFromXML("ClubPassword");
			extent.HeaderChildNode("Watch latest cta text based on display language validation (PWA2_4621)");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "Clubpack_24948@mailnesia.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "ABCD1234", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);

			verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(2000);
			Kannadalanguageselection();
			waitTime(3000);
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
			
			type(PWASearchPage.objSearchEditBox, "Baarish ", "Search bar");
			waitTime(3000);
			verifyElementPresentAndClick(PWASearchPage.objfirstdata, "Searched result");
			waitTime(10000);
			verifyElementPresent(PWAShowsPage.objWatchLatestCTA, "Watch Latest CTA button");
			String watchLatestCTAText = getText(PWAShowsPage.objWatchLatestCTA);
			System.out.println(watchLatestCTAText);
			if (watchLatestCTAText.contains("Watch First Episode")) {
				extent.extentLoggerFail("IncorrectButtonText", "InCorrect button text displayed: " + watchLatestCTAText);
				logger.info("InCorrect button text displayed: " + watchLatestCTAText);
			} else {
				extent.extentLogger("correctButtonText",
						"correct button text displayed: " + watchLatestCTAText);
				logger.error("correct button text displayed: " + watchLatestCTAText);
			}
			
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
			EnglishLanguageselection();
			waitTime(3000);
			
			logout();
			extent.HeaderChildNode("Login as Subscribed User");
			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");
			
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, SubscribedUsername, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, SubscribedPassword, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			waitTime(30000);
			
		}
		
		
			extent.HeaderChildNode("How it works validation (PWA2-4947)");
			if(userType.equalsIgnoreCase("Guest"))
			{
				navigateToAnyScreenOnWeb(tabName);
			}
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser"))
		{
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
		}
		 verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent,"Zee plex content");
		 ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
			click(PWAHamburgerMenuPage.objTrailer, "Trailer");
			 ScrollToTheElementWEB(PWAHamburgerMenuPage.objhowitworks);
			 waitTime(3000);
			 click(PWAHamburgerMenuPage.objhowitworks, "How it works");
			 if(checkElementDisplayed(PWAHamburgerMenuPage.objhowitworksexpand, "How it works popup"))
				{
					extent.extentLoggerPass("",
							"How it works able to click, expected behaviour");
					logger.info("How it works able to click, expected behaviour");
				} else {
					softAssert.assertAll();
					extent.extentLoggerFail(" ",
							"How it works able to click");
					logger.error("How it works able to click");
				}
			 
			 extent.HeaderChildNode("Zee plex tab validation in my watchlist page (PWA2-4929)");
				if(userType.equalsIgnoreCase("Guest"))
				{
					navigateToAnyScreenOnWeb(tabName);
				}
			if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser"))
			{
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
			}

			 verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent,"Zee plex content");
			 ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
				click(PWAHamburgerMenuPage.objTrailer, "Trailer");
				extent.HeaderChildNode("Rent now popup  validation in full screen mode after trailer playback (PWA2-4870)");
				verifyElementPresentAndClick(PWAPlayerPage.maximizeBtn, "Maximize window icon");
				verifyElementPresent(PWAPlayerPage.minimizeBtn, "Minimize window icon");
				waitForElement(PWAHamburgerMenuPage.objrentalsubscribelink, 20, "rental link");
//				click(PWAHamburgerMenuPage.objrentalsubscribelink,"rental link");
//				verifyElementPresent(PWAHamburgerMenuPage.objrentforINRpopup, "Rental popup");
				if (checkElementDisplayed(PWAHamburgerMenuPage.objrentforINRpopup, "Rental popup")) {
					extent.extentLoggerPass("", "Rental popup is displayed");

				} else {
					logger.error("Failed to displayed Rental popup");
					extent.extentLoggerFail("", "Failed to displayed Rental popup");
				}
//				Back(1);
 
 
				extent.HeaderChildNode("Rent now popup validation in fulll screen mode (PWA2-4868)");
				click(PWAHamburgerMenuPage.objrentalsubscribelink,"rental link");
				verifyElementPresent(PWAHamburgerMenuPage.objrentforINRpopup, "Rental popup");
				if (checkElementDisplayed(PWAHamburgerMenuPage.objrentforINRpopup, "Rental popup")) {
					extent.extentLoggerPass("", "Rental popup is displayed");

				} else {
					logger.error("Failed to displayed Rental popup");
					extent.extentLoggerFail("", "Failed to displayed Rental popup");
				}
				Back(1);
				
				if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser"))
				{
					extent.HeaderChildNode("Zee plex tab validation in my watchlist page (PWA2-4929)");
//					waitTime(3000);
//					checkElementDisplayed(PWAHamburgerMenuPage.objzeeplexcontent,"Zee plex content");
//					 ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
//						click(PWAHamburgerMenuPage.objTrailer, "Trailer");
				waitTime(3000);
				// Click on Add to Watchlist option
				//ScrollToTheElement(PWAPlayerPage.watchListBtn);
				partialScroll();
				waitTime(3000);
				click(PWAPlayerPage.watchListBtn, "Add to Watchlist");
				if (verifyElementExist(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
					// verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile
					// Icon");
					click(PWALandingPages.objWebProfileIcon, "Profile Icon");

					boolean myAccountPresent = verifyElementExist(PWAHamburgerMenuPage.objWEBMyAccount, "My Account");
					if (myAccountPresent == true) {
						verifyElementPresentAndClick(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
						Thread.sleep(3000);
						verifyElementPresent(PWAAddToWatchListPage.objzeeplex, "Zeeplex");
						click(PWAAddToWatchListPage.objzeeplex, "Zeeplex");
						Thread.sleep(5000);
						click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all");
						Thread.sleep(5000);
						if(checkElementDisplayed(PWAAddToWatchListPage.objzeeplex, "Zeeplex"))
						{
							extent.extentLoggerFail("Verify zeeplex tab",
									"Zeeplex tab is display in my watchlist");
							logger.info("Zeeplex tab is display in my watchlist");
						} else {
							softAssert.assertAll();
							extent.extentLogger("Verify zeeplex tab",
									"Zeeplex tab is not display in my watchlist , expected behaviour");
							logger.info("Zeeplex tab is not display in my watchlist , expected behaviour");
						}
						}
					}
				}

				if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser"))
				{
					extent.HeaderChildNode("validating zeeplex name in my transaction (PWA2-5050)");
					logout();
					TVODLogin();
					if (verifyElementExist(PWALandingPages.objWebProfileIcon, "Profile Icon")) 
					{
						// verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile
						// Icon");
						click(PWALandingPages.objWebProfileIcon, "Profile Icon");

						boolean myAccountPresent = verifyElementExist(PWAHamburgerMenuPage.objWEBMyAccount, "My Account");
						if (myAccountPresent == true) {
							verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyTransactions, "MyTransactions");
							Thread.sleep(3000);
							verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPage, "MyTransaction Page");
							Thread.sleep(5000);
							
						}
					}
			
				
				verifyElementPresent(PWAHamburgerMenuPage.objPackTitle, "Pack title");
				String packtitle = getText(PWAHamburgerMenuPage.objPackTitle);
				System.out.println(packtitle);
				if (packtitle.contentEquals("ZEEPLEX")) {
					extent.extentLoggerFail("IncorrectText", "ZEEPLEX is getting displayed instead of the content name:"+ packtitle );
					logger.error("ZEEPLEX is getting displayed instead of the content name: " + packtitle);
				} else {
					extent.extentLogger("correctText","Plex content name should be displayed instead of ZEEPLEX, expected behaviour: " + packtitle);
					logger.info("Plex content name should be displayed instead of ZEEPLEX, expected behaviour: " + packtitle);
				}
				logout();
				//ZeeWEBPWALogin(userType);
				}

				extent.HeaderChildNode("How it works popup validation (PWA2-5049)");
				if(userType.equalsIgnoreCase("Guest"))
				{
					navigateToAnyScreenOnWeb(tabName);
				}
			if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser"))
			{
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
			}
			partialScroll();
			verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent,"Zee plex content");
			 ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
				click(PWAHamburgerMenuPage.objTrailer, "Trailer");
				 ScrollToTheElementWEB(PWAHamburgerMenuPage.objhowitworks);
				 waitTime(3000);
				
				
				 click(PWAHamburgerMenuPage.objhowitworks, "How it works");
				 verifyElementPresent(PWAHamburgerMenuPage.objhowitworksexpand,"How it works Expand"); 
				 click(PWAHamburgerMenuPage.objhowitworksexpand,"How it works Expand ");
				 if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
						logger.error("Navigated to Consumption Page");
						extent.extentLoggerFail("Consumption Page", "Navigated to the Trailer Consumption playback screen");
					} else {
						logger.info("Not navigated to the Trailer Consumption playback screen");
						extent.extentLogger("Consumption Page", "Not navigated to the Trailer Consumption playback screen");
					}
				// Back(1);
				 
				 extent.HeaderChildNode(" how it works ?  validation (PWA2-5126)");
				 verifyElementPresent(PWAHamburgerMenuPage.objhowitworks, "How it works");
				 String Howitworks = getText(PWAHamburgerMenuPage.objhowitworks);
				 System.out.println(Howitworks);
				if (Howitworks.contentEquals("How it Works ?")) {
						
						extent.extentLogger("correctText",
								"\"How it Works?\" CTA text should be displayed on the ZeePlex Landing Page Banner , expected behaviour: " + Howitworks);
						logger.error("\"How it Works?\" CTA text should be displayed on the ZeePlex Landing Page Banner , expected behaviour : " + Howitworks);
					} else {
						extent.extentLoggerFail("IncorrectText", "\"?\" is missing on the \"How it Works\" CTA text on the ZeePlex Landing Page Banner." );
						logger.info("\"?\" is missing on the \"How it Works\" CTA text on the ZeePlex Landing Page Banner.: " + Howitworks);
					}
				 if (checkElementDisplayed(PWAHamburgerMenuPage.objclosepopup, "How it works popup") == true) {
						verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosepopup, "POP-UP CLOSE BUTTON");
						
					}
				 
//				 extent.HeaderChildNode("upnext player validation (PWA2-4874)");
//					upnext(userType);
					
					
//					 extent.HeaderChildNode(" \"Movie name\" and \"released by\" terms validation based on display language (PWA2-4877)");
//					 if (userType.equalsIgnoreCase("Guest")) {
//							navigateToAnyScreenOnWeb(tabName);
//						}
//						if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
//							verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
//						
//						}
//						verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent, "Zee plex content");
//					 ScrollToTheElementWEB(PWAHamburgerMenuPage.objrentforINR);
//						click(PWAHamburgerMenuPage.objrentforINR, "Rent for INR");
//						waitTime(5000);
//						verifyElementPresent(PWAHamburgerMenuPage.objcontentname, "Content name ");
//						String contentnametext = getText(PWAHamburgerMenuPage.objcontentname);
//						System.out.println(contentnametext);
//						extent.extentLogger("", " The movie name is  : " + contentnametext);
//						
//						verifyElementPresent(PWAHamburgerMenuPage.objrelease, "Released By");
//						String Releasednametext = getText(PWAHamburgerMenuPage.objrelease);
//						System.out.println(Releasednametext);
//						
//						extent.extentLogger("", " The Released by : " + Releasednametext);
//						
//						Back(1);
//						waitTime(3000);
						
						
						extent.HeaderChildNode("Content playback continue is background when Zee plex rental pop is in Foreground (PWA2-4890)");
						if (userType.equalsIgnoreCase("Guest")) {
							navigateToAnyScreenOnWeb(tabName);
						}
						if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
							verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
						
						}
						verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent, "Zee plex content");
						
						waitTime(3000);
						ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
						click(PWAHamburgerMenuPage.objTrailer,"Trailer");
						waitTime(20000);
						Actions action = new Actions(getWebDriver());
						action.moveToElement(findElement(PWAPlayerPage.objPlaybackVideoOverlay));
						action.perform();
						verifyElementPresent(PWAPlayerPage.currentDurationTime, "Current duration time");
						String durationtext = getText(PWAPlayerPage.currentDurationTime);
						System.out.println(durationtext);
						logger.info("The current duration time: "+durationtext);
						extent.extentLogger("", "The current duration time : "+durationtext);
						
						verifyElementPresent(PWAHamburgerMenuPage.objrentforinrbelowtheplayer, "Rent for INR");
						click(PWAHamburgerMenuPage.objrentforinrbelowtheplayer, "Rent for INR");
						
						String durationtext1 = getText(PWAPlayerPage.currentDurationTime);
						System.out.println(durationtext1);
						logger.info("After clicking on rental popup duration time : "+ durationtext1);
						extent.extentLogger("", "After clicking on rental popup duration time : "+ durationtext1);
						
						if(durationtext.equals(durationtext1))
						{
							logger.info("Content should be paused if popup is displayed. , Expected behaviour");
							extent.extentLogger(" ", "Content should be paused if popup is displayed. , Expected behaviour");
						} else {
							logger.error("Zee plex rent popup displayed and Content fails to pause in consumption screen.");
							extent.extentLoggerFail(" ", "Zee plex rent popup displayed and Content fails to pause in consumption screen.");
						}
						
						
						extent.HeaderChildNode("payment page validation through rent for INR (PWA2-4905)");
						if(userType.equalsIgnoreCase("Guest"))
						{
							navigateToAnyScreenOnWeb(tabName);
						}
					if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser"))
					{
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
					}
					partialScroll();
					verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent,"Zee plex content");
					ScrollToTheElementWEB(PWAHamburgerMenuPage.objrentforINR);
					click(PWAHamburgerMenuPage.objrentforINR, "Rent for INR");
					//verifyElementPresentAndClick(PWAHamburgerMenuPage.objRentForINRbutton, "Rent for INR button");
					click(PWAHamburgerMenuPage.objrentforINRpopup, "Rental Pop Up");
					if (userType.equals("Guest"))
					{
						type(PWALoginPage.objEmailField, "Zee5latest@gmail.com", "Email");
						click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Proceed button");
						waitTime(3000);
						checkElementDisplayed(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");
						type(PWASubscriptionPages.objPasswordField, "User@123", "Password");
						click(PWASubscriptionPages.objProceedButtonInPassword, "Proceed");
					}
					waitTime(5000);
					waitTime(5000);
					WebElement iframeElement = null;
					if (getPlatform().equalsIgnoreCase("Android")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					} else if (getPlatform().equalsIgnoreCase("Web")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					}

					
					verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
					
					if (checkElementDisplayed(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option")) {
						logger.info("Payment page is displayed");
						extent.extentLoggerPass("", "Payment page is displayed");

					} else {
						logger.error("Failed to displayed Payment page ");
						extent.extentLoggerFail("", "Failed to displayed Payment page ");
					}
					
					//verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentforINRpopupClose, "Rental Pop Up Close icon");
					Back(1);
					
//					extent.HeaderChildNode("Releasing date for upcoming movie validation (PWA2-4900)");
//					waitTime(15000);
//					if (userType.equalsIgnoreCase("Guest")) {
//						navigateToAnyScreenOnWeb(tabName);
//					}
//					if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
//						verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
//					
//					}
//					verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent, "Zee plex content");
//					// content");
//					if(checkElementDisplayed(PWAHamburgerMenuPage.objupcomingmovietray, "Upcoming movies"))
//					{
//					waitTime(3000);
//					ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
//					click(PWAHamburgerMenuPage.objTrailer,"Trailer");
//					waitTime(3000);
//					verifyElementPresent(PWAPlayerPage.watchListBtn, "Add to Watchlist");
//					click(PWAPlayerPage.watchListBtn, "Add to Watchlist");
//					waitTime(3000);
//					
//					
//					String contentName2 = getElementPropertyToString("innerText", PWAPlayerPage.objContentName, "Title");
//					verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
//					waitTime(3000);
//					click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
//					if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
//						click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
//					}
//					waitTime(3000);
//					click(PWAAddToWatchListPage.objVideoTab, "Videos tab");
//					String ContentNameAddedToWatchlist = null;
//
//					List<WebElement> contentsInWatchlist = findElements(
//							By.xpath("(//h3[contains(@class,'cardTitle overflowEllipsis')]//a)"));
//					ArrayList<String> ContentNameInWatchlist = new ArrayList<String>();
//					for (int i = 0; i < contentsInWatchlist.size(); i++) {
//						ContentNameInWatchlist.add(contentsInWatchlist.get(i).getText());
//					}
//					for (int i = 0; i < ContentNameInWatchlist.size(); i++) {
//
//						if (contentName2.equals(ContentNameInWatchlist.get(i))) {
//							ContentNameAddedToWatchlist = ContentNameInWatchlist.get(i);
//						}
//					}
//					if (contentName2.equals(ContentNameAddedToWatchlist)) {
//					
//					click(PWAHamburgerMenuPage.objcontentcardinmywatchlist,"Content card");
//					
//					if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
//						logger.info("Navigated to Consumption Page with Trailer");
//						extent.extentLogger("Consumption Page", "Premium content with Trailer is displayed");
//					} else {
//						logger.info("Didn't navigate to Consumption Page");
//						extent.extentLoggerFail("Consumption Page", "Premium content with Trailer is not displayed");
//					}
//					verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
//				}
//					}
//					
//					
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
					extent.HeaderChildNode("News page validation  (PWA2-4962)");
					verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
					waitTime(2000);
					type(PWASearchPage.objSearchEditBox, "Binna-trailer ", "Search Field");
					waitTime(3000);
					click(PWASearchPage.objfirstdata, "searched content");
					waitTime(10000);
					waitForElement(PWAHamburgerMenuPage.objGetPremiumPopup, 20 , "GET PREMIUM POPUP");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
					navigateToAnyScreenOnWeb("News");
					checkElementDisplayed(PWAHamburgerMenuPage.objplaybtncarousel, "Play button on carousel");
					click(PWAHamburgerMenuPage.objplaybtncarousel, "Play button on carousel");
					if(verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button"))
					{
						logger.info("The content should be played and the page should be responsive , Expected behaviour");
						extent.extentLogger(" ", "The content should be played and the page should be responsive , Expected behaviour");
					} else {
						logger.error("continues loading is displayed on the player");
						extent.extentLoggerFail(" ", "continues loading is displayed on the player");
					}
		}		
					
					extent.HeaderChildNode("zeeplex tab validation based on display Language (PWA2-4956)");
					
					if(userType.equalsIgnoreCase("Guest"))
					{
						Kannadalanguageselection();
						navigateToAnyScreenOnWeb("ZEEPLEX");
						String tab = getText(PWAHamburgerMenuPage.objzeeplextab);
						System.out.println(tab);
						
						if (tab.contentEquals("ZEEPLEX")) {
							extent.extentLoggerFail("IncorrectText", "InCorrect text is displayed: " + tab );
							logger.info("InCorrect text is displayed: " + tab);
						} else {
							extent.extentLogger("correctText",
									"correct text is displayed: " + tab);
							logger.error("correct text is  displayed: " + tab);
						}
						EnglishLanguageselection();
					}
					if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser"))
					{
						Kannadalanguageselection();
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
					String c = getText(PWAHamburgerMenuPage.objzeeplextab);
					System.out.println(c);
					
					if (c.contentEquals("ZEEPLEX")) {
						extent.extentLoggerFail("IncorrectText", "InCorrect text is displayed: " + c );
						logger.info("InCorrect text is displayed: " + c);
					} else {
						extent.extentLogger("correctText",
								"correct text is displayed: " + c);
						logger.error("correct text is  displayed: " + c);
					}
					EnglishLanguageselection();
					}
					
//					extent.HeaderChildNode("Releasing date for upcoming movie validation (PWA2-4925)");
//					waitTime(15000);
//					if (userType.equalsIgnoreCase("Guest")) {
//						navigateToAnyScreenOnWeb(tabName);
//					}
//					if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
//						verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
//					}
//			
//					
//					verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent, "Zee plex content");
//					// content");
//					if(checkElementDisplayed(PWAHamburgerMenuPage.objupcomingmovietray, "Upcoming movies"))
//					{
//					waitTime(3000);
//					ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
//					click(PWAHamburgerMenuPage.objTrailer,"Trailer");
//					
//					verifyElementPresent(PWAHamburgerMenuPage.objreleasingdate, "Releasing date ");
//					String releasedate = getText(PWAHamburgerMenuPage.objreleasingdate);
//					System.out.println(releasedate);
//					logger.info("Releasing on : "+releasedate);
//					extent.extentLogger("", "Releasing on : "+releasedate);
//					
//					if(releasedate.contentEquals("th"))
//					{
//						logger.info("Releasing  text should contain \"th \"  under the player bands of upcoming movie trailer playback, expected behavior ");
//						extent.extentLoggerPass("", "Releasing  text should contain \"th \"  under the player bands of upcoming movie trailer playback , expected behavior ");
//			
//					} else
//					{
//						logger.error("The releasing text doesn't contains \"th\" under the player bands of upcoming movie trailer playback ");
//						extent.extentLoggerFail("", "The releasing text doesn't contains \"th\" under the player bands of upcoming movie trailer playback ");
//					}
//					//verifyElementPresent(PWANewsPage.objVolume, "Volume Control on Autoplaying carousel");
//				
//				}
//					
					extent.HeaderChildNode("Autoplay validation (PWA2-5147)");
					navigateToAnyScreenOnWeb("News");
					boolean autoPlayed = verifyAutoPlay("News");
					if (autoPlayed == true) 
					{
						verifyElementPresent(PWANewsPage.objLive, "LIVE badge on Autoplaying carousel");
						verifyElementPresent(PWANewsPage.objVolume, "Volume Control on Autoplaying carousel");
						JSClick(PWANewsPage.objLive, "LIVE badge on Autoplaying carousel");
						waitTime(10000);
						if (checkElementDisplayed(PWAPlayerPage.objPlayerPause, "Player")) {
							logger.info("Navigated to Consumption Page, Expected behavior ");
							extent.extentLogger("Consumption Page", "Navigated to Consumption Page, Expected behavior ");
						} else {
							logger.info("Something went wrong is displayed on player");
							extent.extentLoggerFail("Consumption Page", "Something went wrong is displayed on player");
						}

					}
					
					if(userType.equalsIgnoreCase("Guest"))
					{
						extent.HeaderChildNode("subscription popup validation through search content  (PWA2-5158)");
						verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
						waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
						type(PWASearchPage.objSearchEditBox, "xplor  ", "Search Field");
						verifyElementPresent(PWAHamburgerMenuPage.objFirstsearchcard, "Searched card");
						checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Player In-line Subscribe link");
						click(PWAHamburgerMenuPage.objSubscribeNowLink, "Player In-line Subscribe link");
						if (verifyElementPresent(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) 
						{
							verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
						}
						
					}
					
					extent.HeaderChildNode("TV9 marathi Consumption page is redirected to a new tab validation (PWA2-5154)");
					
					waitTime(5000);
					verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
					JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
					waitTime(2000);
					waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content Languages");
					waitTime(2000);
					//click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply buttton");
					waitTime(3000);
					verifyElementPresentAndClick(PWAHomePage.objMarathiWEB, "Marathi option");
					
					
					waitTime(3000);
					click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply buttton");
					waitTime(3000);
					navigateToAnyScreenOnWeb("News");
					
					//waitForElementAndClick(PWAHamburgerMenuPage.objtv9marathi, 20 ,"TV9 Marathi");
					verifyElementPresent(PWAHamburgerMenuPage.objtv9marathi, "TV9 Marathi");
					//click(PWAHamburgerMenuPage.objtv9marathi, "TV9 Marathi");
					JSClick(PWANewsPage.objLive, "LIVE badge on Autoplaying carousel");
					ArrayList<String> tabs1 = new ArrayList<String>(getWebDriver().getWindowHandles());
					int aaa = ( tabs1.size());
					System.out.println("No. of tabs: " + aaa);
					logger.info("No of tabs opened: "+aaa);
					extent.extentLogger("", "No of tabs opened: "+aaa);
					
					if(aaa>=2)
					{
						logger.error("TV9 marathi content is played on new tab ");
						extent.extentLoggerFail("", "TV9 marathi content is played on new tab ");
					} else {
						logger.info("TV9 marathi content should be played on the same tab  , expected behavior");
						extent.extentLoggerPass("", "TV9 marathi content should be played on the same tab ,  expected behavior");
					}
					
					if(userType.equalsIgnoreCase("NonSubscribeduser"))
					{
					extent.HeaderChildNode("Juspay iFrame validation (PWA2-5175)");
					verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
					waitTime(2000);
					verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
					waitTime(3000);
					
					waitTime(5000);
					//WebElement iframeElement = null;
					if (getPlatform().equalsIgnoreCase("Android")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					} else if (getPlatform().equalsIgnoreCase("Web")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					}
					
					verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
					waitTime(5000);
					waitTime(3000);
					if (checkElementDisplayed(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option")) {
						extent.extentLoggerPass("", "Payment page is displayed");

					} else {
						logger.error("Failed to displayed Payment page ");
						extent.extentLoggerFail("", "Failed to displayed Payment page ");
					}
				Back(1);
				
					extent.HeaderChildNode("Highest selected pack page validation (PWA2-5227)");
					
					if(verifyElementPresent(PWAHamburgerMenuPage.objallacesshighestpack, "Highest pack"))	
					{
						String i = getText(PWAHamburgerMenuPage.objallacesshighestpack);
						System.out.println(i);
						extent.extentLoggerPass("", "Highest pack is selected : " + i );

					} else {
						logger.error("Failed to select the Highest pack ");
						extent.extentLoggerFail("", "Failed to select the Highest pack ");
							}
					
					waitTime(2000);
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
					
					}
					
					if(userType.equalsIgnoreCase("Subscribeduser"))
					{
						extent.HeaderChildNode("Transaction cards validation in my transaction page(PWA2-5177)");
						if (verifyElementExist(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
							// verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile
							// Icon");
							click(PWALandingPages.objWebProfileIcon, "Profile Icon");

							boolean myAccountPresent = verifyElementExist(PWAHamburgerMenuPage.objWEBMyAccount, "My Account");
							if (myAccountPresent == true) {
								verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyTransactions, "MyTransactions");
								Thread.sleep(3000);
								verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPage, "MyTransaction Page");
								Thread.sleep(5000);
								
								if (verifyElementPresent(PWAHamburgerMenuPage.objtransationcard, "Transaction cards")) {
									logger.info("All the purchased details should be displayed in the respective pages, expected behaviour");
									extent.extentLoggerPass("", "All the purchased details should be displayed in the respective pages, expected behaviour");

								} else {
									logger.error("Purchased details fails to display in my Transactions pages.");
									extent.extentLoggerFail("", "Purchased details fails to display in my Transactions pages.");
								}
								
								verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My subscription");
								Thread.sleep(3000);
								verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionPage, "My subscription Page");
								Thread.sleep(5000);
								
								if (verifyElementPresent(PWAHamburgerMenuPage.objtransationcard, "Transaction cards")) {
									logger.info("All the purchased details should be displayed in the respective pages, expected behaviour");
									extent.extentLoggerPass("", "All the purchased details should be displayed in the respective pages, expected behaviour");

								} else {
									logger.error("Purchased details fails to display in my MySubscription pages.");
									extent.extentLoggerFail("", "Purchased details fails to display in my MySubscription pages. ");
								}	
								
								
								
							}
							
							

						}
						
					}
					
					
					extent.HeaderChildNode("Continuous Loading animator validation (PWA2-5242)");
					verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
					waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
					
					type(PWASearchPage.objSearchEditBox, "zee5 Kids ", "Search bar");
					waitTime(5000);
					
					verifyElementPresent(PWASearchPage.objfirstdata, "Searched result");
					click(PWASearchPage.objfirstdata, "Searched result");
					waitTime(15000);
					JSClick(PWAPlayerPage.pauseBtn, "Pause icon");
					waitTime(15000);
					if (checkElementDisplayed(PWAPlayerPage.maximizeBtn, "maximum window icon")) 
					{
						logger.info("content should be play, expected behaviour");
						extent.extentLogger("", "content should be play , expected behaviour ");
					}
					else 
					{
						logger.error("Continuous Loading animator is displayed");
						extent.extentLoggerFail(" ", "Continuous Loading animator is displayed");
					}
					
					if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
					{
						
					
					extent.HeaderChildNode("Error message validation in account page  (PWA2-5240)");
					
					waitTime(2000);
					verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");

					waitTime(2000);
					
					verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title");
					waitTime(2000);
					verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
					if (userType.equals("NonSubscribedUser"))
					{
						verifyElementPresent(PWAHamburgerMenuPage.objerrormessage, "Error message");
						String errormessage = getText(PWAHamburgerMenuPage.objerrormessage);
						System.out.println(errormessage);
						logger.info("The error message on the payment page : "+errormessage);
						extent.extentLogger("", "The error message on the payment page  : "+errormessage);
						if(errormessage.contentEquals("HDFC bank, ICICI,"))
						{
							logger.info("The correct error message is displayed , Expected behaviour");
							extent.extentLogger(" ", "The correct error message is displayed , Expected behaviour");
						} else {
							logger.error("Incorrect error message is displayed ");
							extent.extentLoggerFail(" ", "Incorrect error message is displayed ");
						}
					}
					if (userType.equals("Guest"))
					{
						type(PWALoginPage.objEmailField, "Zee5latest@gmail.com", "Email");
						click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Proceed button");
						waitTime(3000);
						checkElementDisplayed(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");
						type(PWASubscriptionPages.objPasswordField, "User@123", "Password");
						click(PWASubscriptionPages.objProceedButtonInPassword, "Proceed");
						waitTime(3000);
						verifyElementPresent(PWAHamburgerMenuPage.objerrormessage, "Error message");
						String errormessage = getText(PWAHamburgerMenuPage.objerrormessage);
						System.out.println(errormessage);
						logger.info("The error message on the payment page : "+errormessage);
						extent.extentLogger("", "The error message on the payment page  : "+errormessage);
						if(errormessage.contentEquals("HDFC bank, ICICI,"))
						{
							logger.info("The correct error message is displayed , Expected behaviour");
							extent.extentLogger(" ", "The correct error message is displayed , Expected behaviour");
						} else {
							logger.error("Incorrect error message is displayed ");
							extent.extentLoggerFail(" ", "Incorrect error message is displayed ");
						}
					}
					
					extent.HeaderChildNode("Home Page validation when click on specific Promotional Banner on the Subscription Page (PWA2-5286)");
					Back(1);
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objsubscriptionpageimg, "Promotional Banner ");
					if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title")) 
					{
						logger.info("Not navigated to home page");
						extent.extentLogger("", "Not navigated to home page");
					}
					else 
					{
						logger.error("Navigated to home page");
						extent.extentLoggerFail(" ", "Navigated to home page");
					}
					}
					
					
					
					extent.HeaderChildNode("ZeePlex - Theatre comes to you banner below the  player  (PWA2-5283)");
					if(userType.equalsIgnoreCase("Guest"))
					{
						navigateToAnyScreenOnWeb(tabName);
					}
					if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser"))
					{
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
					}
					 verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent,"Zee plex content");
					 ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
						click(PWAHamburgerMenuPage.objTrailer, "Trailer");
						waitTime(15000);
					verifyElementPresent(PWAHamburgerMenuPage.objzeeplexplayerbanner, "zeeplex logo below the player");
					click(PWAHamburgerMenuPage.objrecocard,"Reco card");
					if (checkElementDisplayed(PWAHamburgerMenuPage.objzeeplexplayerbanner, "zeeplex logo below the player")) 
					{
						logger.info("ZeePlex - Theatre Comes to you Below player Strip displayed for Few seconds on playing Premium or Club Content player.");
						extent.extentLoggerFail(" ", "ZeePlex - Theatre Comes to you Below player Strip displayed for Few seconds on playing Premium or Club Content player.");
						
					}
					else 
					{
						logger.info("Theatre Comes to you Below player Strip should not be displayed for Premium or Club movie player, expected behaviour");
						extent.extentLoggerPass("", "Theatre Comes to you Below player Strip should not be displayed for Premium or Club movie player, expected behaviour");
					}
					
					extent.HeaderChildNode("User is redirected to page not found when clicked on \"News/video/Movie/Show \"term in meta-data below the player (PWA2-5330)");
					navigateToAnyScreenOnWeb("News");
					waitTime(5000);
					scrollToTheElementWEB(PWALandingPages.objFirstAssetInTrayIndex("Trending News"));
					verifyElementPresent(PWALandingPages.objFirstAssetInTrayIndex("Trending News"), "content card");
					click(PWALandingPages.objFirstAssetInTrayIndex("Trending News"), "content card");
					waitTime(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objmetadataofcontenttype,"metadata below the player");
					click(PWAHamburgerMenuPage.objmetadataofcontenttype,"metadata below the player");
					waitTime(3000);
					if(checkElementDisplayed(PWALandingPages.objFirstAssetInTrayIndex("Trending News"), "content card"))
					{
						logger.info(" Screen should navigate to a particular landing page , Expected behaviour");
						extent.extentLogger(" ", "Screen should navigate to a particular landing page , Expected behaviour");
					} else {
						logger.info("Screen is redirected to page not found. ");
						extent.extentLoggerFail(" ", "Screen is redirected to page not found. ");
					}
					
					click(PWAHomePage.objZeeLogo, "Zee logo");
					
					navigateToAnyScreenOnWeb("Movies");
					waitTime(5000);
					
					verifyElementPresent(PWAHamburgerMenuPage.objrecocard, "content card");
					click(PWAHamburgerMenuPage.objrecocard, "content card");
					waitTime(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objmetadataofcontenttype,"metadata below the player");
					click(PWAHamburgerMenuPage.objmetadataofcontenttype,"metadata below the player");
					waitTime(3000);
					if(checkElementDisplayed(PWAHamburgerMenuPage.objrecocard, "content card"))
					{
						logger.info(" Screen should navigate to a particular landing page , Expected behaviour");
						extent.extentLogger(" ", "Screen should navigate to a particular landing page , Expected behaviour");
					} else {
						logger.info("Screen is redirected to page not found. ");
						extent.extentLoggerFail(" ", "Screen is redirected to page not found. ");
					}
					
					click(PWAHomePage.objZeeLogo, "Zee logo");
					
					navigateToAnyScreenOnWeb("Shows");
					waitTime(5000);
					
					waitForElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, 10);
					checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
					mandatoryRegistrationPopUp(userType);
					click(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
					waitTime(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objmetadataofcontenttype,"metadata below the player");
					click(PWAHamburgerMenuPage.objmetadataofcontenttype,"metadata below the player");
					waitTime(3000);
					if(checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card"))
					{
						logger.info(" Screen should navigate to a particular landing page , Expected behaviour");
						extent.extentLogger(" ", "Screen should navigate to a particular landing page , Expected behaviour");
					} else {
						logger.info("Screen is redirected to page not found. ");
						extent.extentLoggerFail(" ", "Screen is redirected to page not found. ");
					}
					click(PWAHomePage.objZeeLogo, "Zee logo");

					extent.HeaderChildNode("continues loading validation for before tv content (PWA2-5175)");
					navigateToAnyScreenOnWeb("Club");
					checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"),"Before TV");
					click(PWAHomePage.objFirstContentCardOfTray("Before"),"Before TV");
					click(PWAPlayerPage.pauseBtn, "Pause button");
					if(verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize window icon"))
					{
						logger.info("Before TV content is able to play ");
						extent.extentLoggerPass("", "Before TV content is able to play ");

					} else
					{
						logger.error("Failed to play before TV content  ");
						extent.extentLoggerFail("", "Failed to play before TV content ");
							
					}
					
					extent.HeaderChildNode("Auto playback of content continues loading validation (PWA2-5349)");
					navigateToAnyScreenOnWeb(tabName);
					boolean autoPlayed1 = verifyAutoPlay(tabName);
					if (autoPlayed1 == true) 
					{
						
						if(verifyElementPresent(PWANewsPage.objLive, "LIVE badge on Autoplaying carousel"))
						{
							logger.info("Zee5 Kids Live Channel carousel should be autoplay back Normally , expected behavior ");
							extent.extentLoggerPass("", "Zee5 Kids Live Channel carousel should be autoplay back Normally , expected behavior ");

						} else
						{
							logger.error("continues loading animator is displayed for Zee5 Kids Live Channel. ");
							extent.extentLoggerFail("", "continues loading animator is displayed for Zee5 Kids Live Channel.");
						}
						//verifyElementPresent(PWANewsPage.objVolume, "Volume Control on Autoplaying carousel");
						
					}
					
					if(userType.equals("NonSubscribeduser"))
					{
						
						extent.HeaderChildNode("Parental Lock Popup validation player even after entered the pin for Before TV Episode (PWA2-5352)");
						verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
						verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
						checkElementDisplayed(PWALoginPage.objPasswordField, "password field");
						String password = "";
						if (userType.equals("Non-Subscribed")) {
							password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
									.getParameter("NonsubscribedPassword");
						} else if (userType.equals("Subscribed")) {
							password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
									.getParameter("SubscribedPassword");
						}
						type(PWALoginPage.objPasswordField, password, "Password field");
						click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
						waitTime(2000);
						checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
						checkElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
						verifyElementPresentAndClick(PWAHamburgerMenuPage.objRestrictAll, "Restrict all option");
						verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1, "Set Lock Field");
						type(PWAHamburgerMenuPage.objParentalLockPin1, "1", "ParentalLockPin");
						type(PWAHamburgerMenuPage.objParentalLockPin2, "2", "ParentalLockPin");
						type(PWAHamburgerMenuPage.objParentalLockPin3, "3", "ParentalLockPin");
						type(PWAHamburgerMenuPage.objParentalLockPin4, "4", "ParentalLockPin");
						waitTime(4000);
						verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
						waitTime(2000);
						checkElementDisplayed(PWAHomePage.objZeeLogo, "zee logo");
						waitTime(3000);
						navigateToAnyScreenOnWeb("Shows");
						waitTime(3000);
						scrollToElement(PWAHomePage.objFirstContentCardOfTray("Before"));
						click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
						if (checkElementDisplayed(PWAHamburgerMenuPage.objParentalLockPopUpInPlayer, "Parent control Popup")) {
							type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
							type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
							type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
							type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
						}
						waitTime(5000);
						waitForPlayerAdToComplete("Video Player");
						click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
						if (checkElementDisplayed(PWAPlayerPage.playBtn, "Pause icon")) {
							logger.info("Parental Lock Popup should not be displayed after entering the valid Pin.expected behaviour,");
							extent.extentLoggerPass("Playback", "Parental Lock Popup should not be displayed after entering the valid Pin.expected behaviour");
						} else {
							logger.error(" Parental Lock Popup displayed twice on the player even after entered the valid pin");
							extent.extentLoggerFail("Playback", " Parental Lock Popup displayed twice on the player even after entered the valid pin");
						}
						click(PWAHomePage.objZeeLogo, "zee logo");
						waitTime(5000);
						verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
						verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
						checkElementDisplayed(PWALoginPage.objPasswordField, "password field");
						type(PWALoginPage.objPasswordField, password, "Password field");
						waitTime(2000);
						click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
						waitTime(2000);
						checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
						click(PWAHamburgerMenuPage.objParentalLockNoRestrictionOption, "No restriction option");
						checkElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
						verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
						waitTime(2000);
						verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
					}
					
					extent.HeaderChildNode("validating the Top5 most watched videos viewall btn functionality (PWA2-5528)");
					navigateToAnyScreenOnWeb("News");
					waitTime(3000);
					scrollToTheElementWEB(PWAHomePage.objtrayname("Top 5 Most Watched News Videos"));
					waitTime(3000);
					click(PWAHamburgerMenuPage.objtop5watchednewa,"Top 5 Most Watched News Videos");
					waitTime(2000);
					if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
						logger.info("Navigated to View All Page , expected behaviour");
						extent.extentLoggerPass("View All", "Navigated to View All Page, expected behaviour");
					} else {
						logger.error("\"404! Not found\" page is displayed ");
						extent.extentLoggerFail("", "\"404! Not found\" page is displayed ");
					}
					
					if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) 
					{
						extent.HeaderChildNode("VISA img validation even after user removed the card numbers in Credit/DebitCard Payment option. (PWA2-5529)");
						verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
						waitTime(3000);
						verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
						waitTime(3000);
						
						if (userType.equals("Guest")) {
							verifyElementPresent(PWALoginPage.objEmailField, "Sign in page");
							type(PWALoginPage.objEmailField, "Zee5latest@gmail.com", "Email");
							click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Proceed button");
							waitTime(3000);
							checkElementDisplayed(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");
							type(PWASubscriptionPages.objPasswordField, "User@123", "Password");
							click(PWASubscriptionPages.objProceedButtonInPassword, "Proceed");
							waitTime(3000);
							if (checkElementDisplayed(PWASubscriptionPages.objAccountDetailInSubscription, "Account details")) {
								logger.info("Verified subscribe flow for logged in user");
								extent.extentLogger("Verification", "Verified subscribe flow for logged in user");
							}
						}
						checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
						waitTime(3000);
					
						waitTime(5000);
						//WebElement iframeElement = null;
						if (getPlatform().equalsIgnoreCase("Android")) {
							iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
							Thread.sleep(5000);
							Thread.sleep(5000);
							Thread.sleep(5000);
							getWebDriver().switchTo().frame(iframeElement);
						} else if (getPlatform().equalsIgnoreCase("Web")) {
							iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
							Thread.sleep(5000);
							Thread.sleep(5000);
							Thread.sleep(5000);
							getWebDriver().switchTo().frame(iframeElement);
						}

						verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
						waitTime(5000);
						checkElementDisplayed(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,
								"Enter Credit/Debit Card Details");
						checkElementDisplayed(PWASubscriptionPages.objCardNumber, "Enter Card Number Field");
						click(PWASubscriptionPages.objCardNumber, "Enter Card Number Field");
						type(PWASubscriptionPages.objCardNumber, "4", "card number");
						verifyElementPresent(PWAHamburgerMenuPage.objvisaimg, "Visa img");
						
						clearField(PWASubscriptionPages.objCardNumber, "card number");
						
						if(checkElementDisplayed(PWAHamburgerMenuPage.objvisaimg, "Visa img"))
						{
							logger.info(" VISA card type should be removed once user cleared the card details  , Expected behaviour");
							extent.extentLogger(" ", " VISA card type should be removed once user cleared the card details , Expected behaviour");
						} else {
							logger.error("VISA card type is not removed once user cleared the card details ");
							extent.extentLoggerFail(" ", "VISA card type is not removed once user cleared the card details ");
						}
						
					}
					
					extent.HeaderChildNode("Error message validation in account page  (PWA2-5528)");
					
					waitTime(2000);
					verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");

					waitTime(2000);
					
					verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title");
					waitTime(2000);
					verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
					if (userType.equals("NonSubscribedUser"))
					{
						verifyElementPresent(PWAHamburgerMenuPage.objerrormessage, "Error message");
						String errormessage = getText(PWAHamburgerMenuPage.objerrormessage);
						System.out.println(errormessage);
						logger.info("The error message on the payment page : "+errormessage);
						extent.extentLogger("", "The error message on the payment page  : "+errormessage);
						
						if(errormessage.contentEquals("This is an Auto-renewal (recurring) plan. Use any Credit Card or a Debit Card from HDFC bank, ICICI, Axis, Kotak, Citi, Canara, SCB, Deutsche, Corporation Bank. Don't have these Cards, click here"))
						{
							logger.info("The correct error message is displayed , Expected behaviour");
							extent.extentLogger(" ", "The correct error message is displayed , Expected behaviour");
						} else {
							logger.info("Incorrect error message is displayed ");
							extent.extentLoggerFail(" ", "Incorrect error message is displayed ");
						}
					}
					if (userType.equals("Guest"))
					{
						type(PWALoginPage.objEmailField, "Zee5latest@gmail.com", "Email");
						click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Proceed button");
						waitTime(3000);
						checkElementDisplayed(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");
						type(PWASubscriptionPages.objPasswordField, "User@123", "Password");
						click(PWASubscriptionPages.objProceedButtonInPassword, "Proceed");
						waitTime(3000);
						verifyElementPresent(PWAHamburgerMenuPage.objerrormessage, "Error message");
						String errormessage = getText(PWAHamburgerMenuPage.objerrormessage);
						System.out.println(errormessage);
						logger.info("The error message on the payment page : "+errormessage);
						extent.extentLogger("", "The error message on the payment page  : "+errormessage);
						
						if(errormessage.contentEquals("This is an Auto-renewal (recurring) plan. Use any Credit Card or a Debit Card from HDFC bank, ICICI, Axis, Kotak, Citi, Canara, SCB, Deutsche, Corporation Bank. Don't have these Cards"))
						{
							logger.info("The correct error message is displayed , Expected behaviour");
							extent.extentLogger(" ", "The correct error message is displayed , Expected behaviour");
						} else {
							logger.info("Incorrect error message is displayed ");
							extent.extentLoggerFail(" ", "Incorrect error message is displayed ");
						}
					}
		
		extent.HeaderChildNode("Footer Display Language validatiuon (PWA2-4320)");
		Kannadalanguageselection();
		waitTime(3000);
		scrollToBottomOfPageWEB();
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section ");
		
		//verifyElementPresent(PWAShowsPage.objWatchLatestCTA, "Watch Latest CTA button");
		String clubtext =getText(PWAHamburgerMenuPage.objfooter);
		System.out.println(clubtext);
		if (clubtext.contains("ZEE5 Originals")) {
			extent.extentLoggerFail("IncorrectText", "InCorrect text displayed: " +clubtext );
			logger.info("InCorrect text displayed: " + clubtext);
		} else {
			extent.extentLogger("correctText",
					"correct text displayed: " + clubtext);
			logger.error("correct text displayed: " + clubtext);
		}
		
		waitTime(5000);
		EnglishLanguageselection();
		waitTime(5000);
	}
	public void Hindilanguageselection() throws Exception
	{
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objHindiWEB, " Hindi option");
		String a = getText(PWAHomePage.objHindiWEB);
		extent.extentLogger("", "selected display language : " + a);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
	}
	
	public void Kannadalanguageselection() throws Exception
	{
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objKannadaWEB, "Kannada option");
		String a = getText(PWAHomePage.objKannadaWEB);
		extent.extentLogger("", "selected display language : " + a);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		waitTime(3000);
	}
	
	public void EnglishLanguageselection() throws Exception
	
	{
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		
		verifyElementPresentAndClick(PWAHomePage.objEnglishWEB, "English option");
	
		String b = getText(PWAHomePage.objEnglishWEB);
		extent.extentLogger("", "selected display language : " + b);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
	}
	
	@SuppressWarnings("unused")
	public void upnextrail(String userType) throws Exception
	{
		String totalDuration = "", currentDuration = "", currentUrl = "", contentURL = "", midRollUrl = "",postRollUrl = "";
		contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID fetched from URL: " + contentID);
		logger.info("Content ID fetched from URL: " + contentID);
		Response respContent=null;
		for(int i=0;i<10;i++) {
			respContent = ResponseInstance.getContentDetails(contentID, "content");
			//System.out.println(resp.getBody().asString());
			if (!respContent.getBody().asString().contains("\"error_code\":401")) {
				waitTime(1000);
				break;
			}
			else waitTime(1000);
		}
		//System.out.println(respContent.getBody().asString());
		mandatoryRegistrationPopUp(userType);
		String durationAPI="";
		try {
			durationAPI = respContent.jsonPath().get("duration").toString().trim();
		}catch(Exception e) {}
		durationAPI="1208";
		extent.extentLogger("", "Total Duration in seconds from API: " + durationAPI);
		logger.info("Total Duration in seconds from API: " + durationAPI);
		int durationfullInt = Integer.parseInt(durationAPI);
		durationfullInt=durationfullInt-5;
		String durationfull = String.valueOf(durationfullInt);
		postRollUrl = contentURL + "?t=" + durationfull;
		getWebDriver().get(postRollUrl);
		mandatoryRegistrationPopUp(userType);
		currentUrl = getWebDriver().getCurrentUrl();	
		extent.extentLogger("", "Current URL: " + currentUrl);
		String upnextTrayCardTitle="";
		for(int i=0;i<50;i++) {
			try {
				upnextTrayCardTitle= getElementPropertyToString("innerText",PWAPlayerPage.objPlayerUpnextTrayCardTitle,"");
				logger.info("Up Next Rail on player is displayed");
				extent.extentLogger("", "Up Next Rail on player is displayed");
				logger.info("First Card Title fetched from Up Next Rail : "+upnextTrayCardTitle);
				extent.extentLogger("", "First Card Title fetched from Up Next Rail : "+upnextTrayCardTitle);
				upnextTrayCardTitle=upnextTrayCardTitle.replace("'", "");
				break;
			}
			catch(Exception e) {}
		}	
		mandatoryRegistrationPopUp(userType);
		// Verify the Upnext content is auto playing
		getResponseUpNextRail.getResponse1();
		String episodeName = getText(PWAPlayerPage.objContentName);
		String APIData = getResponseUpNextRail.getMediaContentName();
		logger.info("Up Next First Card Title returned by API : "+APIData);
		extent.extentLogger("", "Up Next First Card Title returned by API : "+APIData);
		APIData=APIData.replace("'", "");
		if (APIData.contains(upnextTrayCardTitle)) {
			softAssert.assertEquals(APIData, upnextTrayCardTitle);
			extent.extentLoggerPass("Upnext Rail", "Card displayed in Upnext rail matches with API");
			logger.info("Card displayed in Upnext rail matches with API");
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				waitForPlayerAdToComplete("Video");
				mandatoryRegistrationPopUp(userType);
				//waitForPlayerAdToComplete("Video");
			}
			else
				waitTime(10000);
			try {
				String contentPlayed=getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
						"Content Title").toString();
				extent.extentLogger("Upnext Rail", "Up Next Content played in UI :"+contentPlayed);
				logger.info("Up Next Content played in UI :"+contentPlayed);
				contentPlayed=contentPlayed.replace("'", "");
				if(APIData.contains(contentPlayed)) {
					extent.extentLoggerPass("Upnext Rail", "Upnext content played matches with API");
					logger.info("Upnext content played matches with API");
				}
				else {				
					extent.extentLoggerFail("", "Upnext content played does not match with API");
					logger.error("Upnext content played does not match with API");
				}
			}catch(Exception e) {}
			
		} else {
			softAssert.assertNotEquals(APIData, upnextTrayCardTitle);
			extent.extentLoggerFail("Verify UpNext Rail", "Card displayed in Upnext rail does not match with API");
			logger.error("Card displayed in Upnext rail does not match with API");
		}
		mandatoryRegistrationPopUp(userType);
	}
	
	public void zeeVerifyGetPremiumPopup() throws Exception {
		HeaderChildNode("Verify Subscription Page");

		waitTime(2000);
		//checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title");
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objPackAmount1, "499 Plan in Popup");
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "continue Button");
	}
	
	public void pwaverifychannelheadertext(String userType) throws Exception

	{
		extent.HeaderChildNode("Channels Details page Header <H1> tag text validation (PWA2-7391)");
		navigateToAnyScreenOnWeb("Channels");
		scrollToElement(PWAHamburgerMenuPage.objchannelname("Zee TV"));
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objchannelname("Zee TV"), "Channel name");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objchanneltitle("Zee TV Shows"), "Channel title");
		String channeltitle = getText(PWAHamburgerMenuPage.objchanneltitle("Zee TV Shows"));
		logger.info("The channel title : "+channeltitle);
		extent.extentLogger("", "The channel title : "+channeltitle);
		if(channeltitle.equals("Zee TV Shows"))
		{
			logger.info("H1 tag should be displayed as \"Zee TV Shows\". , Expected behaviour");
			extent.extentLogger(" ", "H1 tag should be displayed as \"Zee TV Shows\". , Expected behaviour");
		} else {
			logger.error("Channels Details page Header displayed as \"Zee TV shows\" instead of \"Zee TV Shows\" ");
			extent.extentLoggerFail(" ", "Channels Details page Header displayed as \"Zee TV shows\" instead of \"Zee TV Shows\"");
		}
		
	}
	
	public void pwaverifyprocedtopayforvijayabank(String userType) throws Exception
	{
		if(userType.equals("NonSubscribeduser"))
		{
			extent.HeaderChildNode("\"vijaya\" Net banking, screen navigates to PayU page instead of Net-Banking page (PWA2-7458)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribed button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinueButton,"Continue button");
			checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
			checkElementDisplayed(PWASubscriptionPages.objAccountInfoDetails, "Account Info Details in Payments Section");
			//checkElementDisplayed(PWAHamburgerMenuPage.objTotalPayable,"Total amount");
			String a = getText(PWAHamburgerMenuPage.objTotalPayable);
			System.out.println(a);
			waitTime(5000);
			waitTime(5000);
			WebElement iframeElement = null;
			if (getPlatform().equalsIgnoreCase("Android")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking,"Net banking");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("Vijaya Bank"),"Payment option");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objproceedtopay,"Procced to pay");
			click(PWAHamburgerMenuPage.objproceedtopay,"Procced to pay");
			waitTime(3000);
			
			if(checkElementDisplayed(PWAHamburgerMenuPage.objpayupage, "Pay U page"))
			{
				logger.info("\"Vijaya Bank\" Net banking navigates to PayU page instead of respective net-Banking page.");
				extent.extentLoggerFail("", "\"Vijaya Bank\" Net banking navigates to PayU page instead of respective net-Banking page.");
			}
			else 
			{
				logger.info("User should be navigated to the \"Vijaya Bank\" Net banking page or \"vijaya bank\" option should be removed from net-banking section payments page.,expected behaviour");
				extent.extentLoggerPass("", "User should be navigated to the \"Vijaya Bank\" Net banking page or \"vijaya bank\" option should be removed from net-banking section payments page.,expected behaviour");
			}
			Back(1);
			verifyElementPresent(PWAHomePage.objZeeLogo, "Zee logo");
			click(PWAHomePage.objZeeLogo, "Zee logo");
		}
	}
	
	public void pwaverifyzeezestHDchanneldetailpage(String userType) throws Exception
	{
		extent.HeaderChildNode("when user click on \"Zee Zest HD\" from Channel landing page (PWA2-7422)");
		navigateToAnyScreenOnWeb("Channels");
		scrollToElement(PWAHamburgerMenuPage.objchannelname("Zee Zest HD"));
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objchannelname("Zee Zest HD"), "Channel name");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objchanneltitle("Zee Zest HD Shows"), "Channel title");
		if(verifyElementPresent(PWAHamburgerMenuPage.objchanneltitle("Zee Zest HD Shows"), "Channel title"))
		{
			logger.info("\"Zee Zest HD \" channel details page should be displayed properly, expected behaviour");
			extent.extentLoggerPass("", "\"Zee Zest HD \" channel details page should be displayed properly, expected behaviour");
		}
		else 
		{
			logger.info("\"Oops! No information Available\" error page displayed when user click on  \"Zee Zest HD\" from Channel landing page");
			extent.extentLoggerPass("","\"Oops! No information Available\" error page displayed when user click on  \"Zee Zest HD\" from Channel landing page");
		}
		
	}
	
	public void pwaverifycontentfrommywatchlist(String userType, String tabName) throws Exception
	{
		if(userType.equals("Guest"))
		{
			extent.HeaderChildNode("content playing from \"my watchlist\" validation (PWA2-7421)");
			click(PWAHomePage.objZeelogo1, "zee logo");
			navigateToAnyScreenOnWeb("Club");
			verifyElementPresent(PWAHamburgerMenuPage.objClubcontentcard, "Club content card");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objClubcontentcard, "Club content card");
			
			if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
				click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
			}
			partialScroll();
			if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
				logger.info("Watchlist button is displayed in movie consumption page");
				extent.extentLogger("Watchlist", "Watchlist button is displayed in movie consumption page");
				click(PWAPlayerPage.watchListBtn, "Watchlist");
				checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
						"When guest user tries to click on watchlist login popup");
				click(PWAPlayerPage.watchListLoginButton, "Login button");
				
					verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
					type(PWALoginPage.objEmailField, NonSubUsername, "Email Field");
					waitTime(3000);
					verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
					type(PWALoginPage.objPasswordField, NonSubPassword, "Password field");

					waitTime(5000);
					click(PWALoginPage.objWebLoginButton, "Login Button");
					waitTime(5000);
					if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
						click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
					}
					click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
					if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
						click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
					}
					waitTime(3000);
					click(PWAAddToWatchListPage.objEpisodeTab, "Episode tab");	
					verifyElementPresent(PWAHamburgerMenuPage.objcontentcardinmywatchlist, "content card in my watchlist");
					click(PWAHamburgerMenuPage.objcontentcardinmywatchlist, "content card in my watchlist");
					waitTime(3000);
					if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
						logger.info("Screen should redirect to particular contents consumption screen, expected behaviour");
						extent.extentLogger("Consumption Page", "Screen should redirect to particular contents consumption screen, expected behaviour");
					} else {
						logger.info("Screen is redirected to page not found and\"404! not found\"info message is displayed on the screen.");
						extent.extentLoggerFail("Consumption Page", "Screen is redirected to page not found and\"404! not found\"info message is displayed on the screen.");
					}
			}
		}
		
	}
	
	public void pwamandatoryregpopupforzeeoriginalcontent(String userType) throws Exception
	{
		if(userType.equals("Guest"))
		{
			extent.HeaderChildNode("Mandatory Registration popup displayed for the Specific Non-Elligible Zee5Original Content \"Dev DD2\" (PWA2-7419)");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, "Dev DD2", "Search Field");
			waitTime(3000);
			click(PWASearchPage.objfirstdata, "searched content");
			waitTime(3000);
			mandatoryRegistrationPopUp(userType);
			verifyElementPresent(PWAHamburgerMenuPage.objPlayBtn, "play button ");
			click(PWAHamburgerMenuPage.objPlayBtn, "play button ");
			waitTime(3000);
			if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp, "Complete profile Popup") == true) 
			{
				
				logger.info("Mandatory Registration popup displayed for the Specific Non-Eligible Zee5Original Content \"Dev DD2\".");
				extent.extentLoggerFail("Consumption Page", "Mandatory Registration popup displayed for the Specific Non-Eligible Zee5Original Content \"Dev DD2\".");
			} else {
				logger.info("Mandatory Registration popup should not be displayed for Non eligible Zee5Originals show Episode, expected behaviour.");
				extent.extentLoggerPass("Consumption Page", "Mandatory Registration popup should not be displayed for Non eligible Zee5Originals show Episode , expected behaviour");
			}
		}
	}
	
	public void pwaverifyallchannelsscreen(String userType) throws Exception
	{
		extent.HeaderChildNode("Screen redirected to 'live-news ' landing page validation  (PWA2-7386)");
		navigateToAnyScreenOnWeb("News");
		//scrollToBottomOfPageWEB();
		ScrollToTheElement(PWAHomePage.objtrayname("All Channels"));
		waitTime(3000);
		click(PWAPremiumPage.objViewAllBtn, "View All Button");
		waitTime(5000);
	if (checkElementDisplayed(PWAHamburgerMenuPage.objchanneltitle("TV Channels"), "Channel title")) {
			logger.info("Screen should redirect to 'live-news 'collection page , expected behaviour");
			extent.extentLoggerPass("View All", "Screen should redirect to 'live-news 'collection page, expected behaviour");
		} else {
			logger.error("Screen is redirected to Tv-channel landing page. ");
			extent.extentLoggerFail("", "Screen is redirected to Tv-channel landing page.");
		}
		
	}
	
	public void pwaverifythecontentplaybackinvedioscarousel(String userType) throws Exception
	{
		if(userType.equals("SubscribedUser"))
		{
			extent.HeaderChildNode("\" Tazaa-Shakeela\" from the carousel on  Videos Landing page  validation  (PWA2-7385)");
			navigateToAnyScreenOnWeb("Videos");
			waitForElement(PWAPremiumPage.objHerocarouselPlayBtn("Taaza - Shakeela | Prakriti Kakar | Veer Samarth | Saheb Khan | Richa Chadha"), 20,"Play button on carousel");
			JSClick(PWAPremiumPage.objHerocarouselPlayBtn("Taaza - Shakeela | Prakriti Kakar | Veer Samarth | Saheb Khan | Richa Chadha"), "Play button on carousel");
			waitTime(5000);
			JSClick(PWAPlayerPage.settingsBtn, "Setting icon");
			// Click on Quality
			
			if (checkElementDisplayed(PWAPlayerPage.qualityBtn, "Quality option")) {
				logger.info("content should able to play , expected behaviour");
				extent.extentLogger("Consumption Page", "content should able to play, expected behaviour");
			} else {
				logger.info(" Infinite Loader is observed on the consumption page ");
				extent.extentLoggerFail("Consumption Page", " Infinite Loader is observed on the consumption page ");
			}
		}
	}
	
	public void pwaverifyzeeoriginalscontentshouldnotdisplayintvshows(String userType) throws Exception
	{
		extent.HeaderChildNode("Zee-original contents is displayed in Tv-shows collection page.(PWA2-7383)");
		navigateToAnyScreenOnWeb("Channels");
		scrollToElement(PWAHamburgerMenuPage.objchannelname("Zee TV"));
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objchannelname("Zee TV"), "Channel name");
		waitTime(3000);
		//scrollToTheElementWEB(PWAHamburgerMenuPage.objcluborpremiumcontentcard);
		if(verifyElementPresent(PWAHamburgerMenuPage.objclubcard, "Club card"))
		{
			logger.info("Zee-original contents is displayed in between off-air shows.");
			extent.extentLoggerFail("Consumption Page", "Zee-original contents is displayed in between off-air shows.");
		} else {
			logger.info("  Zee original contents should not be displayed in Tv-shows collection page , expected behaviour");
			extent.extentLoggerPass("Consumption Page", " Zee original contents should not be displayed in Tv-shows collection page , expected behaviour ");
		}
		
		
	}
	public void pwaverifyzeeTVshowstextvalidation(String userType) throws Exception
	{
		extent.HeaderChildNode("\"Zee Tv-shows \"text validation based on the display language (PWA2-7372)");
		navigateToAnyScreenOnWeb("Channels");
		scrollToElement(PWAHamburgerMenuPage.objchannelname("Zee TV"));
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objchannelname("Zee TV"), "Channel name");
		waitTime(3000);
		Kannadalanguageselection();
		verifyElementPresent(PWAHamburgerMenuPage.objchanneltitle("Zee TV Shows"), "Channel title");
		String channeltitle = getText(PWAHamburgerMenuPage.objchanneltitle("Zee TV Shows"));
		if(channeltitle.equals("Zee TV Shows"))
		{
			logger.info("Header text \"zee tv shows\" is not translated based on the selected display language." +channeltitle);
			extent.extentLoggerFail("Consumption Page", "Header text \"zee tv shows\" is not translated based on the selected display language." +channeltitle);
		} else {
			logger.info("Header text \"zee tv shows \"should be translated based on the selected display language. , expected behaviour" +channeltitle);
			extent.extentLoggerPass("Consumption Page", " Header text \"zee tv shows \"should be translated based on the selected display language. , expected behaviour " +channeltitle);
		}
		
		//verifyElementPresent(PWAHamburgerMenuPage.objchanneltitle("Zee TV Shows"), "Channel title");
		String breadcrumb = getText(PWAHamburgerMenuPage.objthreebreadcrumb);
		if(breadcrumb.equals("Zee TV"))
		{
			logger.info("Header text \"zee tv \" is not translated based on the selected display language." +breadcrumb);
			extent.extentLoggerFail("Consumption Page", "Header text \"zee tv shows\" is not translated based on the selected display language." +breadcrumb);
		} else {
			logger.info("Header text \"zee tv  \"should be translated based on the selected display language. , expected behaviour" +breadcrumb);
			extent.extentLoggerPass("Consumption Page", " Header text \"zee tv shows \"should be translated based on the selected display language. , expected behaviour " +breadcrumb);
		}
		
		EnglishLanguageselection();
		
	}
	
	public void pwaverifythesubscriptionpage(String userType) throws Exception
	{
		if(userType.equals("Guest"))
		{
			extent.HeaderChildNode("\"Oops no information | Go Home\" message is displayed on the subscription page when the user clicks on \"Subscribe\" CTA in Header for the first time  (PWA2-7369)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribed button");
			waitTime(2000);
			
			if(verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title"))
			{
				logger.info(" The subscription page should be displayed properly, expected behaviour");
				extent.extentLoggerPass("Consumption Page", "The subscription page should be displayed properly, expected behaviour");
			} else {
				logger.info("\"Oops no information | Go Home\" message is displayed on the subscription page");
				extent.extentLoggerFail("Consumption Page", " \"Oops no information | Go Home\" message is displayed on the subscription page");
			}
		}
		
	}
	
	public void pwacontentspecificvalidation(String userType) throws Exception
	{
		extent.HeaderChildNode("\"Family Food Fight Australian Season 2\" content validation (PWA2-7365)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Family Food Fight Australian Season 2 ", "Search Field");
		waitTime(3000);
		click(PWASearchPage.objfirstdata, "search content");
		if(checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player"))
		{
			logger.info(" User should be navigated to the respective show details screen, expected behaviour");
			extent.extentLoggerPass("Consumption Page", "User should be navigated to the respective show details screen , expected behaviour");
		} else {
			logger.info("\"Oops no information | Go Home\" message is displayed on the subscription page");
			extent.extentLoggerFail("Consumption Page", " \"Oops no information | Go Home\" message is displayed on the subscription page");
		}
		
	}
	
	public void pwaverifyEpisodecolelctionpage(String userType) throws Exception
	{
		extent.HeaderChildNode(" \"Jash Kotha Tui, Kisher Eto Taara? Season 2\" content validation (PWA2-6717)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Jash Kotha Tui, Kisher Eto Taara? Season 2 ", "Search Field");
		waitTime(3000);
		click(PWASearchPage.objfirstdata, "search content");
		waitTime(3000);
		scrollToElement(PWAPremiumPage.objViewAllBtn);
		waitTime(3000);
		click(PWAPremiumPage.objViewAllBtn, "View All Button");
		
		if(checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page"))
		{
			logger.info("User should be navigated to the Season Episode Colelction Page,  expected behaviour");
			extent.extentLoggerPass("Consumption Page", " User should be navigated to the Season Episode Colelction Page, expected behaviour");
		} else {
			logger.info("404 Not Found screen displayed when user click on \"View All\" CTA on Season 1 Rail on the Specific Show \"Jash Kotha Tui, Kisher Eto Taara? Season 2\"");
			extent.extentLoggerFail("Consumption Page", " 404 Not Found screen displayed when user click on \"View All\" CTA on Season 1 Rail on the Specific Show \"Jash Kotha Tui, Kisher Eto Taara? Season 2\"");
		}
		
	}
	
	
	public void pwaverifyHowitworksdisplayed(String userType) throws Exception
	{
		extent.HeaderChildNode("How it works verification (PWA2-6777)");
		if(userType.equalsIgnoreCase("Guest"))
		{
			navigateToAnyScreenOnWeb("ZEEPLEX");
		}
	if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser"))
	{
	verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
	}
	 verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent,"Zee plex content");
	 ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
		click(PWAHamburgerMenuPage.objTrailer, "Trailer");
		 waitTime(5000);
		 partialScroll();
		 partialScroll();
		 partialScroll();
		 waitTime(3000);
		 if(verifyElementPresent(PWAHamburgerMenuPage.objhowitworks, "How it works ?"))
			{
				logger.info("\"How it works?\" CTA should be displayed below the \"ZEEPLEX brings Blockbuster Movies in the comfort of your home\"Text in zee plex landing page, expected behaviour");
				extent.extentLoggerPass(" ", "\"How it works?\" CTA should be displayed below the \"ZEEPLEX brings Blockbuster Movies in the comfort of your home\"Text in zee plex landing page, expected behaviour");
			} else {
				logger.info("\"How it works?\" CTA fails to display.");
				extent.extentLoggerFail(" ", " \"How it works?\" CTA fails to display. ");
			} 
	}


public void pwaverifythemetatag(String userType) throws Exception
	{
		extent.HeaderChildNode("\"Zee TV APAC\" Channel metadata displayed (PWA2-7402)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, " KumKum Bhagya ", "Search Field");
		waitTime(3000);
		click(PWASearchPage.objfirstdata, "search content");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objmetadataoncard, "content matadata type");
		String metadata = getText(PWAHamburgerMenuPage.objmetadataoncard);
		System.out.println(metadata);
		scrollToElement(PWAShowsPage.objFirstContentInTray);
		verifyElementPresent(PWAShowsPage.objFirstContentInTray, "First content in tray");
		click(PWAShowsPage.objFirstContentInTray, "First content in tray");
		waitTime(3000);
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objmetadatainconsumption, "Metadata in consumption ");
		String a = getText(PWAHamburgerMenuPage.objmetadatainconsumption);
		if(a.contentEquals("Zee Telugu"))
		{
			logger.info("\"Zee Telugu\" metadata tag should not be displayed on the show details page., expected behaviour");
			extent.extentLoggerPass(" ", " \"Zee Telugu\" metadata tag should not be displayed on the show details page., expected behaviour");
		} else {
			logger.info("\"Zee Telugu\" metadata tag should not be displayed on the show details page.");
			extent.extentLoggerFail(" ", "\"Zee Telugu\" metadata tag should not be displayed on the show details page. ");
		} 
		
		
	}
	
	public void pwazeekannadacontentvalidation(String userType) throws Exception
	{
		extent.HeaderChildNode("Zee Kannada Channel metadata displayed (PWA2-7382)");
		navigateToAnyScreenOnWeb("Channels");
		waitTime(3000);
		scrollToElement(PWAHamburgerMenuPage.objchannelname("Zee Kannada"));
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objchannelname("Zee Kannada"), "Channel name");
		if(checkElementDisplayed(PWAHamburgerMenuPage.objcontentcardthroughtext("Drama Juniors Season 3"), "Content card"))
		{
			scrollToElement(PWAHamburgerMenuPage.objcontentcardthroughtext("Drama Juniors Season 3"));
			click(PWAHamburgerMenuPage.objcontentcardthroughtext("Drama Juniors Season 3"), "Content card");
			verifyElementPresent(PWAHamburgerMenuPage.objmetadataoncard, "content matadata type");
			String metadata = getText(PWAHamburgerMenuPage.objmetadataoncard);
			
			if(metadata.contentEquals("Zee Telugu"))
			{
				logger.info("Only Kannada or specific channel related language content should be displayed in respective channel details page., expected behaviour");
				extent.extentLoggerPass(" ", " Only Kannada or specific channel related language content should be displayed in respective channel details page., expected behaviour");
			} else {
				logger.info("\"Drama Juniors Season 3\" a tamil show is displayed in \"Zee Kannada\" channel.");
				extent.extentLoggerFail(" ", "\"Drama Juniors Season 3\" a tamil show is displayed in \"Zee Kannada\" channel.");
			} 
			
		}
	}

	public void pwaverifytheplaybackinconsumptionpage(String userType) throws Exception
	{
		extent.HeaderChildNode("\"Kumkum bhagya 19 Feb\" consumption screen validation (PWA2-7382)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Killer abducts Pragya from the hospital - Kumkum Bhagya ", "Search Field");
		waitTime(3000);
		click(PWASearchPage.objfirstdata, "search content");
		waitTime(3000);
		
		//verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
		mandatoryRegistrationPopUp(userType);
		JSClick(PWAPlayerPage.pauseBtn, "Pause button");
		if(verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button"))
		{
			logger.info("Content should be played without any interruption., expected behaviour");
			extent.extentLoggerPass(" ", "Content should be played without any interruption., expected behaviour");
		} else {
			logger.info("Blank Screen is displayed for Kumkum bhagya 19 Feb episode.");
			extent.extentLoggerFail(" ", "Blank Screen is displayed for Kumkum bhagya 19 Feb episode.");
		} 
	}
	public void accountinfopage() throws Exception
	{
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
		waitTime(3000);
		waitTime(3000);
		waitTime(3000);
		type(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com", "Email Id");

		hideKeyboard();
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
				"Proceed Button in Account Info Page Highlighted");
		waitTime(3000);
		// Password Popup
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled Proceed Button");
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		waitTime(3000);
		type(PWASubscriptionPages.objPasswordFieldHidden, "igs@12345", "Password Field");

		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabled, "Enabled Proceed Button");
		waitTime(3000);

	}
	
	
	public void pwapaymentpagevalidation(String userType) throws Exception
	{
		extent.HeaderChildNode("error message is displayed on the Payment page validation (PWA2-7656)");
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
		waitTime(5000);
		if (userType.equals("Guest"))
		{
			accountinfopage();
		}
		WebElement iframeElement = null;
		if (getPlatform().equalsIgnoreCase("Android")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
			Thread.sleep(5000);
			Thread.sleep(5000);
			Thread.sleep(5000);
			getWebDriver().switchTo().frame(iframeElement);
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
			Thread.sleep(5000);
			Thread.sleep(5000);
			Thread.sleep(5000);
			getWebDriver().switchTo().frame(iframeElement);
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking,"Net banking");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("UPI"),"Payment option");
		waitTime(3000);
		checkElementDisplayed(PWAHamburgerMenuPage.objenterupiid,"Enter upi Details");
		click(PWAHamburgerMenuPage.objenterupiid,"Enter upi Details");
		type(PWAHamburgerMenuPage.objenterupiid, "866@upi", "Email Field");
		verifyElementPresent(PWAHamburgerMenuPage.objupiproceedtopay,"Procced to pay");
		click(PWAHamburgerMenuPage.objupiproceedtopay,"Procced to pay");
		waitTime(10000);
		if(checkElementDisplayed(PWAHamburgerMenuPage.objsomethingmess, "Something went wrong message "))
		{
			logger.info("\"Something went Wrong. Please Retry the Payment\" message is display");
			extent.extentLoggerFail(" ", "\"Something went Wrong. Please Retry the Payment\" message is display");
		} else {
			logger.info("\"Something went Wrong. Please Retry the Payment\" message should not display, expected behaviour");
			extent.extentLoggerPass(" ", "\"Something went Wrong. Please Retry the Payment\" message should not display, expected behaviour");
	
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		
		if (userType.equals("Guest"))
		{
			logout();
		}
		}
	}
	
	
	public void pwaDRMmessageforpremiumcontent(String userType) throws Exception
	{
		extent.HeaderChildNode("DRM message is displayed on the Player (PWA2-7516) and (PWA2-7518)");
		navigateToAnyScreenOnWeb("Movies");
		click(PWAHamburgerMenuPage.objpremiumcard, "Premium card");
		waitTime(50000);
		if(checkElementDisplayed(PWAHamburgerMenuPage.objdrmmessageonplayer,"DRM message"))
		{
			logger.info("DRM message displayed on player screen post playing premium contents");
			extent.extentLoggerFail(" ", "DRM message displayed on player screen post playing premium contents");
		} else {
			logger.info("Premium content should be played properly on the Safari and Chrome browsers, expected behaviour");
			extent.extentLoggerPass(" ", "Premium content should be played properly on the Safari and Chrome browsers, expected behaviour");
	
		}
		
	}
	
	
	public void pwaverifycrownicon(String userType , String tabName) throws Exception
	{
		extent.HeaderChildNode("Error message is displayed on the Player (PWA2-7816)");
		navigateToAnyScreenOnWeb(tabName);
		Tamillanguageselection();
		if(verifyElementPresent(PWAHamburgerMenuPage.objcrownicon, "Crown icon"))
		{

			logger.info("Crown symbol should be displayed on Get Premium CTA on carousel when display language is change to Tamil., expected behaviour");
			extent.extentLoggerPass(" ", "Crown symbol should be displayed on Get Premium CTA on carousel when display language is change to Tamil., expected behaviour");
		} else {
			logger.info("Crown icon is not displaying on Get Premium CTA on carousel when display language is changed to Tamil.");
			extent.extentLoggerFail(" ", "Crown icon is not displaying on Get Premium CTA on carousel when display language is changed to Tamil.");
 
		}
		EnglishLanguageselection();
	}
	

public void pwaverifygetpremiuminlinetext(String userType , String tabName) throws Exception
	{
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
			extent.HeaderChildNode(" Get premium inline text validation (PWA2-7688)");
			navigateToAnyScreenOnWeb("Movies");
			verifyElementPresent(PWAHamburgerMenuPage.objcluborpremiumcontentcard, "Premium card");
			click(PWAHamburgerMenuPage.objcluborpremiumcontentcard, "Premium card");
			waitForElement(PWAPlayerPage.objSubscribeNowLink, 20, "Subscription link");
			String text = getText(PWAHamburgerMenuPage.objsubscriptionlinkmessage);
			System.out.println(text);
			extent.extentLogger("", "Subscription text : " + text);
			if(text.contentEquals("To Watch this Premium Content"))
			{
				
				logger.info(" \"To Watch this Premium Content\" text should be displayed., expected behaviour");
				extent.extentLoggerPass(" ", " \"To Watch this Premium Content\" text should be displayed,  expected behaviour");
			} else 
			{
				logger.info("\"You Need Premium Membership to watch this video\" text displayed");
				extent.extentLoggerFail(" ", "\"You Need Premium Membership to watch this video\" text displayed");
	 
			}
				
		}
		
	}
	
	public void pwaverifypackdiscountamt(String userType , String tabName) throws Exception
	{
		if (userType.equals("NonSubscribedUser"))
			{
				logout();
				extent.HeaderChildNode("Pack discount amount validation in my subscription page (PWA2-7800)");
				
				verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, "25off@mailnesia.com", "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, "123456", "Password field");
				waitTime(5000);
				click(PWALoginPage.objWebLoginButton, "Login Button");
				waitTime(3000);
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
				verifyElementPresent(PWAHamburgerMenuPage.objpackdiscountamtinmysubscriptionpage, "Pack discount");
				String packdiscountamt=getText(PWAHamburgerMenuPage.objpackdiscountamtinmysubscriptionpage);
				System.out.println(packdiscountamt);
				extent.extentLogger("", "Pack discount text : " + packdiscountamt);
				if(packdiscountamt.contentEquals("749"))
				{
					
					logger.info("Plan Price INR749 should be displayed for 25% off annual pack user., expected behaviour");
					extent.extentLoggerPass(" ", "Plan Price INR749 should be displayed for 25% off annual pack user. ,  expected behaviour");
				} else 
				{
					logger.info("INR 499 Price displayed on the My subscription and Explore Premium Page for 25% off annual pack user(INR749) ");
					extent.extentLoggerFail(" ", "INR 499 Price displayed on the My subscription and Explore Premium Page for 25% off annual pack user(INR749) ");
		 
				}
				verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
				logout();
				String Username = getParameterFromXML("NonsubscribedUserName");
				String Password = getParameterFromXML("NonsubscribedPassword");
				
				verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, Username, "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, Password, "Password field");
				waitTime(5000);
				click(PWALoginPage.objWebLoginButton, "Login Button");
				waitTime(3000);
				
			}
	}
	
	
	public void pwaverifyOTPscreen(String uaerType) throws Exception
	{
		if (userType.equals("Guest"))
		{
			extent.HeaderChildNode("\"Verify OTP\" CTA in OTP verification screen validation (PWA2-7795)");
			
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			verifyElementPresentAndClick(PWASubscriptionPages.objEmailIDTextField, "Email ID Text Field");
			waitTime(3000);
			type(PWASubscriptionPages.objEmailIDTextField, "0000000000", "Mobile number");
			verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
					"Proceed Button in Account Info Page Highlighted");
			waitTime(60000);
			String verifybtn=getText(PWAHamburgerMenuPage.objverifybtninaccountinfopage);
			System.out.println(verifybtn);
			extent.extentLogger("", "verify text in account info page : " + verifybtn);
			if(verifybtn.contentEquals("Verify"))
			{
				logger.info("\"Verify\" CTA is displayed instead of \"Verify OTP\" CTA in OTP verification screen.");
				extent.extentLoggerFail(" ", "\"Verify\" CTA is displayed instead of \"Verify OTP\" CTA in OTP verification screen.");
			} else 
			{
				logger.info("\"Verify OTP\" CTA should be displayed in \"OTP verification\" screen., expected behaviour ");
				extent.extentLoggerPass(" ", "\"Verify OTP\" CTA should be displayed in \\\"OTP verification\\\" screen., expected behaviour ");
	 
				
			}
			
		}
		
	}
	
	public void pwaverifypaynowoptioninpaymentpage(String userType) throws Exception
	{
		if (userType.equals("NonSubscribedUser"))
		{
			extent.HeaderChildNode("\"Proceed to pay \"CTA is displayed instead of \"Pay now\"  CTA validation (PWA2-7793)");
			
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);

			waitTime(5000);
			WebElement iframeElement = null;
			if (getPlatform().equalsIgnoreCase("Android")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking,"Net banking");
			waitTime(6000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("Airtel Payments Bank"),"Payment option");
			verifyElementPresent(PWAHamburgerMenuPage.objproceedtopay,"Procced to pay");
			String proceedtopay=getText(PWAHamburgerMenuPage.objproceedtopay);
			System.out.println(proceedtopay);
			extent.extentLogger("", " proceed to pay text : " + proceedtopay);
			if(proceedtopay.contentEquals("Proceed to pay"))
			{
				logger.info("\"Proceed to pay \"CTA is displayed instead of \"Pay now\" CTA .");
				extent.extentLoggerFail(" ", "\"Proceed to pay \"CTA is displayed instead of \"Pay now\" CTA . ");
			} else 
			{
				logger.info("\"Pay now\" CTA should be displayed. , expected behaviour ");
				extent.extentLoggerPass(" ", "\"Pay now\" CTA should be displayed., expected behaviour ");
	 
				
			}
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		}
		
		
	}
	
	public void pwaverifyloginthroughsubscriptionpage(String userType) throws Exception
	{

		if (userType.equals("Guest"))
		{
			extent.HeaderChildNode("Subscription page validation when user login through the subscription page(PWA2-7687)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objloginbtninsubscriptionpage, "Login button");
			waitTime(5000);
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
			
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, Username, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, Password, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			if(verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title"))
			{
				logger.info("The user should be navigated back to the subscription page., expected behaviour");
				extent.extentLoggerPass(" ", "The user should be navigated back to the subscription page.,  expected behaviour");
			} else 
			{
				logger.info("\"Error\" page is displayed when the user tries to login ");
				extent.extentLoggerFail(" ", "\"Error\" page is displayed when the user tries to login");
	 
			}
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
			Back(1);
			logout();
		}
			
	}
	
	public void pwaverifygetpremiumctabelowplayer(String userType) throws Exception
	{
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
			extent.HeaderChildNode(" Get premium CTA validation below the player for premium content (PWA2-7694)");
			navigateToAnyScreenOnWeb("Movies");
			verifyElementPresent(PWAHamburgerMenuPage.objcluborpremiumcontentcard, "Premium card");
			click(PWAHamburgerMenuPage.objcluborpremiumcontentcard, "Premium card");
			waitForElementAndClick(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, 30,
					"Get Premium Link below the Player");
			String getpremiumtext = getText(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen);
			System.out.println(getpremiumtext);
			extent.extentLogger("", "Subscription text : " + getpremiumtext);
			if(getpremiumtext.contentEquals("Get Premium"))
			{
				
				logger.info(" \"Get Premium\" CTA should be displayed on below the player., expected behaviour");
				extent.extentLoggerPass(" ", " \"Get Premium\" CTA should be displayed on below the player. ,  expected behaviour");
			} else 
			{
				logger.info("\"Subscribe\" CTA displayed instead of \"Get Premium\" on the Below player strip for Premium Content playback.");
				extent.extentLoggerFail(" ", "\"Subscribe\" CTA displayed instead of \"Get Premium\" on the Below player strip for Premium Content playback.");
	 
			}
				
		}
	}
	
	public void pwaverifyexplorepremiumctainsubscriptionpage(String userType) throws Exception
	{
		if (userType.equals("Guest"))
		{
			extent.HeaderChildNode(" \"Explore Premium\" CTA validation on the Subscription Page. (PWA2-7704) (PWA2-7710)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objloginbtninsubscriptionpage, "Login button");
			waitTime(5000);
			//verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "shivarajmc26@gmail.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			if(verifyElementPresent(PWAHamburgerMenuPage.objExplorePremium,"Explore premium"))
			{
				logger.info(" \"Explore Premium\" CTA should be displayed on the Subscription Page., expected behaviour");
				extent.extentLoggerPass(" ", "\"Explore Premium\" CTA should be displayed on the Subscription Page. ,  expected behaviour");
			} else 
			{
				logger.info("Pack Upgrade page is displayed.");
				extent.extentLoggerFail(" ", "Pack Upgrade page is displayed.");
	 
			}
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		}
	
	}
	
	
	public void pwaToWatchthisPremiumContenttextverify(String userType) throws Exception
	{
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
			extent.HeaderChildNode(" Before TV Episode , Zee5Originals Premium 2nd Episode entitlement - Player Inline Text sentence validation (PWA2-7781)");
			navigateToAnyScreenOnWeb("TV Shows");
			scrollToElement(PWAHomePage.objFirstContentCardOfTray("Before"));
			if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"),
					"First Content Card Of Before TV Tray"))
			{
				click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
				waitForElement(PWASubscriptionPages.objGetPremiumPopupTitle, 40, "Get Premium Popup Title");
				String text = getText(PWAHamburgerMenuPage.objsubscriptionlinkmessage);
				System.out.println(text);
				extent.extentLogger("", "Subscription text : " + text);
				if(text.contentEquals("To Watch this Premium Content"))
				{
					
					logger.info(" \"To Watch this Premium Content\" text should be displayed., expected behaviour");
					extent.extentLoggerPass(" ", " \"To Watch this Premium Content\" text should be displayed,  expected behaviour");
				} else 
				{
					logger.info("\"You Need Premium Membership to watch this video\" text displayed");
					extent.extentLoggerFail(" ", "\"You Need Premium Membership to watch this video\" text displayed");
		 
				}
			}
//			navigateToAnyScreenOnWeb("Web Series");
//			swipeTillTrayAndClickFirstAsset(userType, 5 , "Top ZEE5 Web Series", "Top ZEE5 Web Series", "Web Series");
//			waitTime(5000);
//			JSClick(PWAShowsPage.objSecondAssetImageFirstRail, "Second card under Tray");
			
		}
	}
	
	public void pwaverifylanguagesettingspopup(String userType) throws Exception
	{
		extent.HeaderChildNode(" Language setting pop-up validation in Consumption screen (PWA2-7778)");
		navigateToAnyScreenOnWeb("Movies");
		JSClick(PWAHamburgerMenuPage.objFirstcontentCard, "First Card");
		waitTime(5000);
		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		waitTime(2000);
		if(verifyElementPresent(PWAHamburgerMenuPage.objContentLanguageBtn, "Content Languages"))
		{
			logger.info("Language Setting pop-up should be displayed, expected behaviour");
			extent.extentLoggerPass(" ", " Language Setting pop-up should be displayed ,  expected behaviour");
		} else 
		{
			logger.info("Language Setting pop-up is not displayed in Consumption screen.");
			extent.extentLoggerFail(" ", "Language Setting pop-up is not displayed in Consumption screen.");
 
		}
	}
	
	
	
	
	public void pwaHaveacodeinputfieldvalidation(String userType) throws Exception
	{
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
			extent.HeaderChildNode("\"Have a code?\" input field fails to display again when user clicks on \"Change\" CTA (PWA2-7782) (PWA2-7698");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "'Have A Code?' field");
			waitTime(3000);
			if (platform.equalsIgnoreCase("Android")) {
				type(PWASubscriptionPages.objHaveACode, "ZEE5SBI20" + "\n", "'Have A Code?' field");
			} else if (platform.equalsIgnoreCase("Web")) {
				type(PWASubscriptionPages.objHaveACodetoenter, "ZEE5SBI20", "'Have A Code?' field");
			}

			// driver.findElement(PWASubscriptionPages.objHaveACode).sendKeys("ZEE5PTM20");
			// hideKeyboard();
			waitTime(5000);
			click(PWASubscriptionPages.objApplyBtn, "Apply Button");
			
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objchangebtn, "change Button");
			if(verifyElementPresent(PWASubscriptionPages.objHaveACode, "'Have A Code?' field"))
			{
				logger.info("It responds to the \"Have a code?\" link again.");
				extent.extentLoggerFail(" ", "It responds to the \"Have a code?\" link again.");
			} else 
			{
				logger.info("It should open a promo code field again with a clear cell., expected behaviour");
				extent.extentLoggerPass(" ", " It should open a promo code field again with a clear cell. ,  expected behaviour");
		
			}
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
	}
	
	
	public void pwavalidatediscountprice(String userType) throws Exception
	{
		if(userType.equals("Guest"))
		{
			extent.HeaderChildNode("Discount Calculted price on the payment gateway validation (PWA2-7692)");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "sprint49Premium@mailnesia.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "ABCD1234", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			checkElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			waitTime(5000);
			click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			//verifyElementPresent(PWASubscriptionPages.objContinueBtn, "Continue button");
			String text = getText(PWASubscriptionPages.objContinueBtn);
			System.out.println(text);
			extent.extentLogger("", " continue text : " + text);
			if(text.contentEquals("Continue "))
			{
				logger.info("\"Continue with INR499 per year\", or \"Continue with INR99 Per month\" CTA should be displayed for Expired user, expected behaviour");
				extent.extentLoggerPass(" ", "\"Continue with INR499 per year\", or \"Continue with INR99 Per month\" CTA should be displayed for Expired user, expected behaviour");
			} else 
			{
				logger.info("\"Upgrade to Annual/Monthly Plan\" CTA displayed on the Subscription page for Expired users.");
				extent.extentLoggerFail(" ", "\"Upgrade to Annual/Monthly Plan\" CTA displayed on the Subscription page for Expired users.");
			}
		
			if(verifyElementPresent(PWASubscriptionPages.objHaveACode, "'Have A Code?' field"))
			{
				logger.info("\"Have a Code?\" CTA text should be displayed for the Expired users, expected behaviour");
				extent.extentLoggerPass(" ", "\"Have a Code?\" CTA text should be displayed for the Expired users, expected behaviour");
			} else 
			{
				logger.info("\"Have a Code?\" CTA text fails to displayed for the Expired users.");
				extent.extentLoggerFail(" ", "\"Have a Code?\" CTA text fails to displayed for the Expired users.");
			}
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		logout();
		if(userType.equals("Guest"))
		{
			extent.HeaderChildNode(" Discount Calculted price on the payment gateway validation (PWA2-7754)");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "gdmplex@mailnesia.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			checkElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			verifyElementPresent(PWAHamburgerMenuPage.objamtinpaymentpage, "Amount");
			String 	text=getText(PWAHamburgerMenuPage.objamtinpaymentpage);
			System.out.println(text+".00");
			String text1 = "Rs"+text+".00";
			//System.out.println(text);
			extent.extentLogger("", "Amount in payment page : " + text1);
			
			waitTime(5000);
			WebElement iframeElement = null;
			if (getPlatform().equalsIgnoreCase("Android")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking,"Net banking");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("Airtel Payments Bank"),"Payment option");
			waitTime(3000);
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objproceedtopay,"Procced to pay");
			click(PWAHamburgerMenuPage.objproceedtopay,"Procced to pay");
			waitTime(3000);
			waitForElement(PWAHamburgerMenuPage.objtotalamount2,20,"Total amount");
			String totalamt2 = getText(PWAHamburgerMenuPage.objtotalamount2);
			System.out.println(totalamt2);
			extent.extentLogger("", "pack Amount in payment Process page : " + totalamt2);
			waitTime(5000);
			Back(1);
			waitForElement(PWASubscriptionPages.objZEE5Logo,20, "Zee5 Logo");
			if(text1!=(totalamt2))
			{
				logger.info("correct Amount is displayed : " +text1);
				extent.extentLogger("", "correct Amount is displayed : " + text1);
			}
			else 
			{
				logger.info("Incorrect Differential Amount is displayed : " +text1);
				extent.extentLoggerFail("", "Incorrect Differential Amount is displayed :" +text1);
			}
			
			}
		Back(1);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		logout();
	}
	
	public void pwaverifystepnoinAcconuInfopage(String userType) throws Exception
	{
		if(userType.equals("Guest"))
		{
			extent.HeaderChildNode(" stepper 2 and 3 should not display in account info page for password screen(PWA2-7702)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
			verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
			//zeePWASelectedPackDisplayValidation();
			verifyElementPresentAndClick(PWASubscriptionPages.objEmailIDTextField, "Email ID Text Field");
			waitTime(3000);
			type(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com", "Email Id");
			hideKeyboard();
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
					"Proceed Button in Account Info Page Highlighted");
			waitTime(3000);
			// Password Popup
			verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
			waitTime(3000);
			if(checkElementDisplayed(PWAHamburgerMenuPage.objstep2and3, "Step 2 and 3"))
			{
				logger.info("Stepper \"step 2 of 3\" displayed on the Enter Password popup on the account info page.");
				extent.extentLoggerFail(" ", "Stepper \"step 2 of 3\" displayed on the Enter Password popup on the account info page.");
			} else 
			{
				logger.info("Stepper \"step 2 of 3\" should not be displayed on the Enter Password popup on the account info page, expected behaviour");
				extent.extentLoggerPass(" ", "Stepper \"step 2 of 3\" should not be displayed on the Enter Password popup on the account info page,expected behaviour");
			
			}
			
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		
	}

public void pwaverifyHaveacode(String userType) throws Exception
	{
		if(userType.equals("Guest"))
		{
			extent.HeaderChildNode("Have a Code is visible for Upgrade Journey validation (PWA2-7965)");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "sprint49Premium@mailnesia.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "ABCD1234", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			checkElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			waitTime(5000);
			//verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			if(checkElementDisplayed(PWASubscriptionPages.objHaveACode, "'Have A Code?' field"))
			{
				logger.info("\"Have a Code?\" CTA text is displayed for upgrade journey");
				extent.extentLoggerFail(" ", "\"Have a Code?\" CTA text is displayed for upgrade journey");
			} else 
			{
				logger.info("We should NOT see ‘Have a code’ CTA anywhere in Upgrage journey, expected behaviour");
				extent.extentLoggerPass(" ", "We should NOT see ‘Have a code’ CTA anywhere in Upgrage journey, expected behaviour");
			}
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
			logout();
		}
	}
	
	public void pwaHaveagiftcardinputvalidation(String userType) throws Exception
	{
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
			extent.HeaderChildNode("\"Have a Gift Card?\" is accepting 'e' alphabet validation (PWA2-7756)");
			
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
			
			if (userType.equals("Guest"))
			{
				accountinfopage();
			}
			waitTime(5000);
			WebElement iframeElement = null;
			if (getPlatform().equalsIgnoreCase("Android")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			}
			verifyElementPresent(PWAHamburgerMenuPage.objnetbanking,"Net banking");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			type(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "1abcdefghijklmnopqrstuvwxyz1", "card number");
			String cardnumber = findElement(PWAHamburgerMenuPage.objgiftcardnumber).getAttribute("value");
			System.out.println(cardnumber);
			extent.extentLogger("", " cardnumber  : " + cardnumber);
			if(cardnumber.toLowerCase().contains("a") || cardnumber.toLowerCase().contains("b") || cardnumber.toLowerCase().contains("c") 
				|| cardnumber.toLowerCase().contains("d") || cardnumber.toLowerCase().contains("e") || cardnumber.toLowerCase().contains("f") 
				|| cardnumber.toLowerCase().contains("g") || cardnumber.toLowerCase().contains("h") || cardnumber.toLowerCase().contains("i") 
				|| cardnumber.toLowerCase().contains("j") || cardnumber.toLowerCase().contains("k") || cardnumber.toLowerCase().contains("l") 
				|| cardnumber.toLowerCase().contains("v") || cardnumber.toLowerCase().contains("q") || cardnumber.toLowerCase().contains("m") 
				|| cardnumber.toLowerCase().contains("w") || cardnumber.toLowerCase().contains("r") || cardnumber.toLowerCase().contains("n") 
				|| cardnumber.toLowerCase().contains("x") || cardnumber.toLowerCase().contains("s") || cardnumber.toLowerCase().contains("o") 
				|| cardnumber.toLowerCase().contains("y") || cardnumber.toLowerCase().contains("t") || cardnumber.toLowerCase().contains("p") 
				|| cardnumber.toLowerCase().contains("z") || cardnumber.toLowerCase().contains("u"))
				{
						logger.info("The alphabet is accepted and the place holder is overlapped.");
						extent.extentLoggerFail("", "The alphabet is accepted and the place holder is overlapped.");
				}
				else 
				{
						logger.info("\"Have a Gift Card?\" field shouldn't accept alphabets., expected behavior");
						extent.extentLoggerPass(" ", "\"Have a Gift Card?\" field shouldn't accept alphabets., expected behavior");
				}
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");

			if (userType.equals("Guest"))
			{
				logout();
			}
			}	
	}
	
	
	public String addSeparator (String startEpisode, String input) throws Exception {

		int noOfDigits=startEpisode.length();
		String pat="";
		for(int i=0;i<noOfDigits;i++) {
		pat=pat+".";
		}
		String episode="E";
		for(int i=1;i<=noOfDigits;i++) {
		episode=episode+input.charAt(i);
		}
		String REGEX = "E"+pat;
		String REPLACE = " . ";

		Pattern p = Pattern.compile(REGEX);
		Matcher m = p.matcher(input);
		String desc = m.replaceAll(REPLACE);

		return (episode+desc);
		
	}
	
	public void pwaEpisodedropdownrangeandcontentrangevalidation(String userType)throws Exception
	{
		extent.HeaderChildNode("PWA2-7491 : Incorrect Episode Dropdown range displayed with respect to the content rails for the On-Air Show ");
		logger.info("PWA2-7491 : Incorrect Episode Dropdown range displayed with respect to the content rails for the On-Air Show ");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String showcontent = "Gattimela";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, showcontent, "Search edit");
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		waitTime(2000);
		click(PWASearchPage.objSearchedResult(showcontent), "Searched content");
		waitTime(4000);
		partialScroll();
		waitTime(1000);
		partialScroll();
		String episodeDropdown = getElementPropertyToString("innerText",PWAShowsPage.objShowDetailsEpisodeDropdownText,"Episode Dropdown");
		logger.info("Episode dropdown displayed in Consumptions page : "+episodeDropdown);
		extent.extentLogger("", "Episode dropdown displayed in Consumptions page : "+episodeDropdown);
		String startingEpisode=episodeDropdown.split("Episodes")[1].trim().split("-")[0].trim();
		String endingEpisode=episodeDropdown.split("-")[1].trim();
		int startingEpisodeInt=0,endingEpisodeInt=0;
		startingEpisodeInt=Integer.parseInt(startingEpisode);
		System.out.println(startingEpisodeInt);
		endingEpisodeInt=Integer.parseInt(endingEpisode);
		System.out.println(endingEpisodeInt);
		String endingEpisodeInt1 = "E"+endingEpisodeInt;
		System.out.println(endingEpisodeInt1);
		checkElementDisplayed(PWAHamburgerMenuPage.objepisodenumberbelowthecard, "Episode number ");
		String a = getText(PWAHamburgerMenuPage.objepisodenumberbelowthecard);
		if(a.contains(endingEpisodeInt1)) {
		logger.info("Episode larger number is displayed first as expected");
		extent.extentLoggerPass("", "Episode larger number is displayed first as expected");
		}
		else {
		logger.error("Episode larger number is not displayed first");
		extent.extentLoggerFail("", "Episode larger number is not displayed first");
		}
		
		
	}
	
	
	public void pwaheadertextvalidationinsubscriptionpage(String userType) throws Exception
	{
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
			extent.HeaderChildNode("Header Text are not displayed as per the VD validation (PWA2-7819)");
			
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Blockbuster Movies"), "Blockbuster movies");
			waitTime(3000);
			if(verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("4500+ Blockbuster Movies"), "4500+ Blockbuster Movies"))
			{
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("", "Corresponding or related content or description should be displayed, expected behaviour");
			}
			else 
			{
				logger.info("A blank screen is displayed for Blockbuster Movies ");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Blockbuster Movies ");
			
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
			
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Web Series"), "Web Series");
			waitTime(3000);
			if(verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("Unlimlted Web series"), "Unlimlted Web series"))
			{
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("", "Corresponding or related content or description should be displayed, expected behaviour");
			}
			else 
			{
				logger.info("A blank screen is displayed for Unlimlted Web series");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Unlimlted Web series");
			
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
			
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Ad free"), "Ad free");
			waitTime(3000);
			if(verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("Ad-Free Entertainment"), "Ad-Free Entertainment"))
			{
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("", "Corresponding or related content or description should be displayed, expected behaviour");
			}
			else 
			{
				logger.info("A blank screen is displayed for Ad free Entertainment");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Ad free Entertainment");
			
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
			
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Before TV"), "Before TV");
			waitTime(3000);
			if(verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("TV shows 24 Hours Before TV"), "TV shows 24 Hours Before TV"))
			{
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("", "Corresponding or related content or description should be displayed, expected behaviour");
			}
			else 
			{
				logger.info("A blank screen is displayed for TV shows 24 Hours Before TV");
				extent.extentLoggerFail(" ", "A blank screen is displayed for TV shows 24 Hours Before TV");
			
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
			extent.HeaderChildNode("For some of the content languages all the perk slides or benefits slides are blank validation (PWA2-7684)");
			
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Blockbuster Movies"), "Blockbuster movies");
			waitTime(3000);
			if(verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("4500+ Blockbuster Movies"), "4500+ Blockbuster Movies"))
			{
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("", "Corresponding or related content or description should be displayed, expected behaviour");
			}
			else 
			{
				logger.info("A blank screen is displayed for Blockbuster Movies ");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Blockbuster Movies ");
			
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
			
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Web Series"), "Web Series");
			waitTime(3000);
			if(verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("200+ Web series"), "200+ Web series"))
			{
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("", "Corresponding or related content or description should be displayed, expected behaviour");
			}
			else 
			{
				logger.info("A blank screen is displayed for 200+ Web series");
				extent.extentLoggerFail(" ", "A blank screen is displayed for 200+ Web series");
			
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
			
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Ad free"), "Ad free");
			waitTime(3000);
			if(verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("Watch Ad-Free"), "Watch Ad-Free"))
			{
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("", "Corresponding or related content or description should be displayed, expected behaviour");
			}
			else 
			{
				logger.info("A blank screen is displayed for Ad free");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Ad free");
			
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
			
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Before TV"), "Before TV");
			waitTime(3000);
			if(verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("Watch Before TV"), "Watch Before TV"))
			{
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("", "Corresponding or related content or description should be displayed, expected behaviour");
			}
			else 
			{
				logger.info("A blank screen is displayed for Before TV");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Before TV");
			
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
	}
	
	
	public void pwaverifyplanpriceinsubscriptionpage(String userType) throws Exception
	{
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
			Kannadalanguageselection();
		
			extent.HeaderChildNode("\"{{plan_price}}\" text is displayed instead of the pack price validation (PWA2-7693)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
			String planprice = getText(PWASubscriptionPages.objContinueBtn);
			if(planprice.contains("1")||planprice.contains("2")||planprice.contains("3")||planprice.contains("4")
			||planprice.contains("5")||planprice.contains("6")||planprice.contains("7")||planprice.contains("8")
			||planprice.contains("9")||planprice.contains("10"))
			{
				logger.info(" Pack price should be displayed instead of \"plan_price\", expected behaviour");
				extent.extentLoggerPass("", "Pack price should be displayed instead of \"plan_price\" , expected behaviour");
			}
			else 
			{
				logger.info("\"plan_price\" text is displayed instead of the pack price");
				extent.extentLoggerFail(" ", "\"plan_price\" text is displayed instead of the pack price");
			}
			
			EnglishLanguageselection();
		}
	}
	
	public void pwaverifyshowscontentinbeforetv(String userType) throws Exception
	{
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest"))
		{
			extent.HeaderChildNode("Header Text are not displayed as per the VD validation (PWA2-7819)");
			
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Before TV"), "Before TV");
			waitTime(3000);	
			if(checkElementDisplayed(PWAHamburgerMenuPage.objmoviecontentinsubscriptionpage, "movie content"))
			{
				logger.info("TV shows Contents should be listed on the Before TV Benefits drawer, expected behaviour");
				extent.extentLoggerPass("", "TV shows Contents should be listed on the Before TV Benefits drawer, expected behaviour");
			}
			else 
			{
				logger.info("Movie contents listed on the Subscription page Before TV Benefits Drawer.");
				extent.extentLoggerFail(" ", "Movie contents listed on the Subscription page Before TV Benefits Drawer.");
			
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		
	}
	
	public void TasksAndDefectssprint57(String userType) throws Exception 
	{
		pwaverifychannelheadertext(userType);
		pwaverifyprocedtopayforvijayabank(userType);
		pwaverifyzeezestHDchanneldetailpage(userType);
		pwaverifycontentfrommywatchlist(userType, "Premium");
		pwamandatoryregpopupforzeeoriginalcontent(userType);
		pwaverifyallchannelsscreen(userType);
		pwaverifythecontentplaybackinvedioscarousel(userType);
		pwaverifyzeeoriginalscontentshouldnotdisplayintvshows(userType);
		pwaverifyzeeTVshowstextvalidation(userType);
		pwaverifythesubscriptionpage(userType);
		pwacontentspecificvalidation(userType);
		pwaverifyEpisodecolelctionpage(userType);
		pwaverifyHowitworksdisplayed(userType);
		pwaverifythemetatag(userType);
		pwazeekannadacontentvalidation(userType);
		pwaverifytheplaybackinconsumptionpage(userType);
		pwapaymentpagevalidation(userType);
		pwaDRMmessageforpremiumcontent(userType);
		pwaverifycrownicon(userType, "Premium");
		pwaverifygetpremiuminlinetext(userType, "Home");
		pwaverifypackdiscountamt(userType, "Home");
		pwaverifyOTPscreen(userType);
		pwaverifypaynowoptioninpaymentpage(userType);
		pwaverifyloginthroughsubscriptionpage(userType);
		pwaverifygetpremiumctabelowplayer(userType);
		pwaverifyexplorepremiumctainsubscriptionpage(userType);
		pwaToWatchthisPremiumContenttextverify(userType);
		pwaverifylanguagesettingspopup(userType);
		pwaHaveacodeinputfieldvalidation(userType);
		pwavalidatediscountprice(userType);
		pwaverifystepnoinAcconuInfopage(userType);
		pwaverifyHaveacode(userType);
		pwaHaveagiftcardinputvalidation(userType);
		pwaEpisodedropdownrangeandcontentrangevalidation(userType);
		pwaheadertextvalidationinsubscriptionpage(userType);
		pwaverifyplanpriceinsubscriptionpage(userType); 
		pwaverifyshowscontentinbeforetv(userType);
		
	}
	
	public void Tamillanguageselection() throws Exception
	{
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objTamilWEB, "Tamil option");
		String a = getText(PWAHomePage.objTamilWEB);
		extent.extentLogger("", "selected display language : " + a);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		waitTime(3000);
	}
	
	
//========================Sprint 58========================
	public void Sprint58(String userType) throws Exception {
		//PWA2-7598
		PWAVerifyH1Tags(userType);
		//PWA2-7597
		PWAVerifyH1TagsWithText(userType);
		//PWA2-7916
		PWAVerifyDisplayLanguageInPlayerSkip(userType);
		// Satish
		//PWA2-7920
		PWAVerifyPlanTitleInSubscriptionPlanPage(userType);
		//PWA2-7954
		PWAVerifyUpgradeToAnnualPlanInSubscriptionPlanPage(userType);
		//PWA2-7725
		PWAVerifyToastMessageDisplayedInsteadOfInlineErrorMessageOnAccountInfoPage(userType);
		//PWA2-7910
		PWAVerifyAutoRenewedDateIsUpdatedForPreviousOnesInTransactionsPage(userType);
		//PWA2-7925
		PWAVerifyGetPremiumCTADisplayedForSubscribedUserWithParentalPin(userType);
		//PWA2-7767
		PWAVerifyRightClickPasteInEmailIDFieldInAccountsInfoPage(userType);
		//PWA2-7492 - Task
		PWAVerifySEODetailsOfChannelsPage(userType);
		//PWA2-7318 - Task
//		PWAVerifyChangeInHTagsAndMetadataShowcasing(userType);
		
	}
	
	public void PWAVerifyH1Tags(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-7598 : H1 tag in Landing Page Source");
		logger.info("PWA2-7598 : H1 tag in Landing Page Source");
		mandatoryRegistrationPopUp(userType);
		String[] tabs= {"Premium","TV Shows", "Movies", "Web Series", "Kids"};
		String[] expectedTagText = {"ZEE5 Premium","TV Shows", "Movies", "Original Web Series & Movies", "Kids Shows and Movies"};
		for(int i=0;i<tabs.length;i++) {
			extent.extentLogger("", "----------- H1 tag in "+tabs[i]+" Page Source ------------");
			navigateToHome();
			navigateToAnyScreenOnWeb(tabs[i]);
			String urlLink=getWebDriver().getCurrentUrl();
			checkTagWithTextInSource(urlLink,"h1",expectedTagText[i]);
		}		
	}
	
	public void PWAVerifyH1TagsWithText(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-7597 : H1 tag in Zee5Originals Show Trailer and Live TV Channel Playback pages");
		logger.info("PWA2-7597 : H1 tag in Zee5Originals Show Trailer and Live TV Channel Playback pages");
		extent.extentLogger("", "----- Verification of H1 tag in Zee5Originals Show Trailer page ------");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		String keyword="Poison";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
		click(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(4000);
		click(PWAPlayerPage.objWatchPromo, "Watch Promo icon");
		waitTime(2000);
		try{ String title=getElementPropertyToString("innerText",PWAPlayerPage.objContentTitleInPlayerPage,"");
			extent.extentLogger("", "Content title from UI: " + title);
			logger.info("Content title from UI: " + title);
			String urlLink=getWebDriver().getCurrentUrl();
			checkTagWithTextInSource(urlLink,"h1",title);
		}
		catch(Exception e) {
			extent.extentLoggerFail("", "Failed to fetch Content title from UI");
			logger.error("Failed to fetch Content title from UI");
		}
		extent.extentLogger("", "----- Verification of H1 tag in Live TV Channel Playback page ------");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		navigateToAnyScreenOnWeb("Live TV");
		click(PWALandingPages.objFirstAssetInTrayIndex("FREE Channels"), "First card under Free Channels");
		waitTime(5000);
		try{ String title=getElementPropertyToString("innerText",PWAPlayerPage.objContentTitleInPlayerPage,"");
			extent.extentLogger("", "Content title from UI: " + title);
			logger.info("Content title from UI: " + title);
			String urlLink=getWebDriver().getCurrentUrl();
			checkTagWithTextInSource(urlLink,"h1",title);
		}
		catch(Exception e) {
			extent.extentLoggerFail("", "Failed to fetch Content title from UI");
			logger.error("Failed to fetch Content title from UI");
		}
		
	}
		
	@SuppressWarnings({ "unused", "resource" })
	public void checkTagWithTextInSource(String urlLink,String tag,String text) throws Exception {
		boolean foundOpeningTag=false,foundClosingTag=false,foundText=false;
		String path=System.getProperty("user.dir") + "\\webpagesource.txt";
		URL url = new URL(urlLink);
	    try(
	        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
	        BufferedWriter writer = new BufferedWriter(new FileWriter(path));
	    )
	    {
	        String line;
	        while ((line = reader.readLine()) != null) {
	            writer.write(line);
	        }
	    }
	    BufferedReader br = new BufferedReader(new FileReader(path));
	    String line="",doc="",temp="";
	    while ((line = br.readLine()) != null) {
	       doc=doc+line; 
	    }
        if(doc.contains("<"+tag)) {
        	extent.extentLogger("", "Source contains Opening tag for "+tag);
        	logger.info("Source contains Opening tag for "+tag);
        	doc=doc.split("<"+tag)[1];
        	doc="<"+tag+doc;
        	if(doc.contains("</"+tag+">")) {
         		extent.extentLogger("", "Source contains Closing tag for "+tag);
         		logger.info("Source contains Closing tag for "+tag);   
         		doc=doc.split("</"+tag+">")[0];
         		doc=doc+"</"+tag+">";
         		temp=doc.split("<"+tag)[1].split(">")[1].split("</"+tag)[0];
         		logger.info("Text displayed in source : "+temp);
         		extent.extentLogger("", "Text displayed in source : "+temp);
         		logger.info("Expected text between the tags : "+text);
         		extent.extentLogger("", "Expected text between the tags : "+text);
         		temp = replacingSpecialCharsInAString(temp, "&amp;", "&");
         		if(temp.equals(text)) {
        			extent.extentLoggerPass("", "Source contains text between the tags as expected");
             		logger.info("Source contains text between the tags as expected");
        		}
         		else {
         			extent.extentLoggerFail("", "Source contains incorrect text between the tags");
             		logger.error("Source contains incorrect text between the tags");
         		}
        	}
        	else {
        		extent.extentLoggerFail("", "Source does not contain Closing tag for "+tag);
            	logger.error("Source does not contain Closing tag for "+tag); 
        	}
        }
    	else {
    		extent.extentLoggerFail("", "Source does not contain Opening tag for "+tag);
        	logger.error("Source does not contain Opening tag for "+tag); 
    	}     
  
	}
	
	public void PWAVerifyMyTransactionDetails(String userType) throws Exception {
	      
		/*if(userType.equals("SubscribedUser")) {		
			String username="tanisha@a.com";
			String password="igs123";
			Response subResponse=null;
			String subStartDate="";
			SimpleDateFormat requiredFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			java.text.DateFormat actualFormat = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
			subResponse=ResponseInstance.getSubscriptionDetails(username, password);
			int transactions=subResponse.jsonPath().get("$.size()");
			System.out.println(transactions);
			for(int i=0;i<transactions;i++) {
				subStartDate=subResponse.jsonPath().get("subscription_start["+i+"]").toString();
				actualFormat.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
				java.util.Date startdate = actualFormat.parse(subStartDate);
				subStartDate=requiredFormat.format(startdate).toString();
				System.out.println(subStartDate);
				
						
			}/*
			navigateToHome();
			logout();
			loginWithUserEmail(username, password);
			click(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			click(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
			Thread.sleep(3000);
			
			List<WebElement> packs = getWebDriver().findElements(By.xpath("//p[@class='packTitle']"));
			System.out.println("No of Packs : " + packs.size());
			String status = getText(PWAHamburgerMenuPage.objMyTransactionPackStatus);
			logger.info("Pack Status :" + status);
			extent.extentLogger("Pack Status :", "Pack Status :" + status);
			String title = getText(PWAHamburgerMenuPage.objPackTitle);
			logger.info("Pack Title :" + title);
			extent.extentLogger("Pack Title :", "Pack Title :" + title);
			String price = getText(PWAHamburgerMenuPage.objPackPrice);
			logger.info("Pack Price :" + price);
			extent.extentLogger("Pack Price :", "Pack Price :" + price);
			String duration = getText(PWAHamburgerMenuPage.objPackDuration);
			logger.info("Pack Duration :" + duration);
			extent.extentLogger("Pack Duration :", "Pack Duration :" + duration);
			String renewalStatus = getText(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus);
			logger.info("Pack Renewal Status :" + renewalStatus);
			extent.extentLogger("Pack Renewal Status :", "Pack Renewal Status :" + renewalStatus);
			
		}*/
	}
	
	public void PWAVerifyDisplayLanguageInPlayerSkip(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("PWA2-7916 : Skip CTA in required display language");
			logger.info("PWA2-7916 : Skip CTA in required display language");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			String content = "Natasaarvabhowma";
			String language = "Marathi";
			click(PWAHomePage.objLanguage, "Language button");
			click(PWAHomePage.objMarathiWEB, "Marathi Display language");
			click(PWAHamburgerMenuPage.objApply, "Apply button on Display Langauge dropdown");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objApplybutton, "Apply button on Content Language dropdown");
			waitTime(3000);
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, content, "Search field");
			waitTime(5000);
			click(PWASearchPage.objSearchMoviesTab, "Movies tab");
			verifyElementPresentAndClick(PWASearchPage.objFirstSearch, "Search Result");
			waitTime(12000);
			if (checkElementDisplayed(PWAPlayerPage.objSkipButtonInEnglish, "Skip Button in English")) {
				logger.error("Skip button is displayed in English instead of " + language + " Language");
				extent.extentLoggerFail("", "Skip button is displayed in English instead of " + language + " Language");
			} else {
				// write code for skip in required display language
			}
			navigateToHome();
			click(PWAHomePage.objLanguage, "Language button");
			click(PWAHomePage.objEnglishWEB, "English Display language");
			click(PWAHamburgerMenuPage.objApply, "Apply button on Display Langauge dropdown");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objApplybutton, "Apply button on Content Language dropdown");
			waitTime(4000);
			mandatoryRegistrationPopUp(userType);
		}
	}
	
	public void PWAVerifyPlanTitleInSubscriptionPlanPage(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("PWA2-7920 : 'Premium' plan title should be displayed in 'Your Premium ₹99 for 1 Month plan is active' text post changing display language to Telugu/Marathi");
			logger.info("PWA2-7920 : 'Premium' plan title should be displayed in 'Your Premium ₹99 for 1 Month plan is active' text post changing display language to Telugu/Marathi");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			logout();
			loginWithUserEmail("gdmplex@mailnesia.com", "123456");
			selectDisplayLanguage("Telugu");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			waitTime(1000);
			click(PWAHamburgerMenuPage.objMySubscriptionOption, "My Subscription Option");
			waitTime(1000);
			if(verifyElementExist(PWAHamburgerMenuPage.objMySubscriptionPageTitle, "My Subscription Page Title")) {
				logger.info("Navigated to My Subscription page");
				extent.extentLoggerPass("", "Navigated to My Subscription page");
				ScrollToTheElementWEB(PWAHamburgerMenuPage.objBrowseAllPacks);
				click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
				if(verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageDescriptionText, "Browse All Packs Page Description Text")) {
					logger.info("Navigated to plan selection page");
					extent.extentLoggerPass("", "Navigated to plan selection page");
					String descriptionText = getText(PWAHamburgerMenuPage.objBrowseAllPacksPageDescriptionText);
					if(descriptionText.contains("{{plan_title}}")) {
						logger.error("{{plan_title}} is displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
						extent.extentLoggerFail("", "{{plan_title}} is displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
					}else {
						logger.info("{{plan_title}} is not displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
						extent.extentLoggerPass("", "{{plan_title}} is not displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
					}
					if(descriptionText.contains("Premium")) {
						logger.info("Premium is displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
						extent.extentLoggerPass("", "Premium is displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
					}else {
						logger.error("Premium is not displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
						extent.extentLoggerFail("", "Premium is not displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
					}
				}else {
					logger.error("Not navigated to plan selection page");
					extent.extentLoggerFail("", "Not navigated to plan selection page");
				}
			}else {
				logger.error("Not navigated to My Subscription page");
				extent.extentLoggerFail("", "Not navigated to My Subscription page");
			}
			waitTime(2000);
			Back(1);
			waitTime(2000);
			click(PWAHomePage.objRegLangHomeTab, "Home tab");
			selectDisplayLanguage("English");
		}
	}
	
	public void selectDisplayLanguage(String displayLanguage) throws Exception {
		extent.extentLogger("", "Changing Display Language to "+displayLanguage);
		waitTime(5000);
		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objDisplayLang, 2, "Content Languages");
		waitTime(2000);
		click(PWAHamburgerMenuPage.objUnselectedContentLanguage(displayLanguage), displayLanguage+" Language");
		logger.info("Selected Display language "+displayLanguage);
		extent.extentLogger("", "Selected Display language "+displayLanguage);
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(8000);
	}
	
	public void PWAVerifyUpgradeToAnnualPlanInSubscriptionPlanPage(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("PWA2-7954 : \"upgrade to annual plan\" incorrect title is displayed on subscription screen for active 99 pack user");
			logger.info("PWA2-7954 : \"upgrade to annual plan\" incorrect title is displayed on subscription screen for active 99 pack user");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
//			logout();
//			loginWithUserEmail("gdmplex@mailnesia.com", "123456");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			waitTime(1000);
			click(PWAHamburgerMenuPage.objMySubscriptionOption, "My Subscription Option");
			waitTime(1000);
			if(verifyElementExist(PWAHamburgerMenuPage.objMySubscriptionPageTitle, "My Subscription Page Title")) {
				logger.info("Navigated to My Subscription page");
				extent.extentLoggerPass("", "Navigated to My Subscription page");
				ScrollToTheElementWEB(PWAHamburgerMenuPage.objBrowseAllPacks);
				click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
				if(verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText, "Browse All Packs Page Title Text")) {
					logger.info("Navigated to plan selection page");
					extent.extentLoggerPass("", "Navigated to plan selection page");
					String descriptionText = getText(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText);
					if(descriptionText.contains("upgrade to annual plan")) {
						logger.error("\"upgrade to annual plan\" is displayed as the Title text on plan selection page");
						extent.extentLoggerFail("", "\"upgrade to annual plan\" is displayed as the Title text on plan selection page");
					}else {
						logger.info("\"upgrade to annual plan\" is not displayed as the Title text on plan selection page");
						extent.extentLoggerPass("", "\"upgrade to annual plan\" is not displayed as the Title text on plan selection page");
					}
					if(descriptionText.contains("Upgrade now")) {
						logger.info("\"Upgrade now\" is displayed as the Title text on plan selection page");
						extent.extentLoggerPass("", "\"Upgrade now\" is displayed as the Title text on plan selection page");
					}else {
						logger.error("\"Upgrade now\" now is not displayed as the Title text on plan selection page");
						extent.extentLoggerFail("", "\"Upgrade now\" is not displayed as the Title text on plan selection page");
					}
				}else {
					logger.error("Not navigated to plan selection page");
					extent.extentLoggerFail("", "Not navigated to plan selection page");
				}
			}else {
				logger.error("Not navigated to My Subscription page");
				extent.extentLoggerFail("", "Not navigated to My Subscription page");
			}
			waitTime(2000);
			Back(1);
			waitTime(2000);
//			Back(1);
//			waitTime(2000);
			click(PWASubscriptionPages.objZeeLogo, "Zee5 Logo");
//			logout();
		}
	}
	
	
	
	public void PWAVerifyToastMessageDisplayedInsteadOfInlineErrorMessageOnAccountInfoPage(String userType)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7725 : \"Either OTP is not valid or Expired\" toast message displayed instead of inline Error message on Account info page \"Verify OTP\" screen");
			logger.info(
					"PWA2-7725 : \"Either OTP is not valid or Expired\" toast message displayed instead of inline Error message on Account info page \"Verify OTP\" screen");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			waitTime(3000);
			Actions action = new Actions(getWebDriver());
			action.moveToElement(findElement(PWAHomePage.objMastheadCarouselCurrentContent)).build().perform();

			for (int i = 0; i < 5; i++) {
				try {

					JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
					executor.executeScript("arguments[0].click();",
							findElement(PWAHomePage.objGetPremiumGetClubButton));
					logger.info("Clicked on " + "Get Premium CTA On MastHead Carousel");
					extent.extentLogger("clickedElement", "Clicked on " + "Get Premium CTA On MastHead Carousel");
					break;
				} catch (Exception e) {
					Thread.sleep(1000);
					logger.error(e);
				}
			}
			waitTime(2000);
			if(verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText, "Browse All Packs Page Title Text")) {
				logger.info("Navigated to plan selection page");
				extent.extentLoggerPass("", "Navigated to plan selection page");
				click(PWASubscriptionPages.objContinueBtn, "Continue Button");
				waitTime(2000);
				if(verifyElementExist(PWASubscriptionPages.objAccountInfoTitle, "Account Info Title")) {
					logger.info("Navigated to Account Info page");
					extent.extentLoggerPass("", "Navigated to Account Info page");
					type(PWASubscriptionPages.objEmailIDTextField, "9876543211", "Email ID Text Field");
					waitTime(2000);
					click(PWASubscriptionPages.objContinueBtn, "Continue Button");
					waitTime(2000);
					if(verifyElementExist(PWASubscriptionPages.objVerifyOTPTitle, "Verify OTP Title")) {
						logger.info("Navigated to plan selection page");
						extent.extentLoggerPass("", "Navigated to plan selection page");
						type(PWASubscriptionPages.objOTPTextField1, "1", "First OTP Text Field");
						waitTime(2000);
						type(PWASubscriptionPages.objOTPTextField2, "1", "Second OTP Text Field");
						waitTime(2000);
						type(PWASubscriptionPages.objOTPTextField3, "1", "Third OTP Text Field");
						waitTime(2000);
						type(PWASubscriptionPages.objOTPTextField4, "1", "Fourth OTP Text Field");
						waitTime(2000);
						click(PWASubscriptionPages.objVerifyButton, "Verify Button");
						waitTime(2000);
						verifyElementPresent(PWASubscriptionPages.objInvalidOTPErrorMessage, "Invalid OTP Error Message");
					}else {
						logger.error("Not navigated to plan selection page");
						extent.extentLoggerFail("", "Not navigated to plan selection page");
					}
				}else {
					logger.error("Not navigated to Account Info page");
					extent.extentLoggerFail("", "Not navigated to Account Info page");
				}
			}else {
				logger.error("Not navigated to plan selection page");
				extent.extentLoggerFail("", "Not navigated to plan selection page");
			}
			waitTime(2000);
			Back(1);
			waitTime(2000);
			Back(1);
			waitTime(2000);
//			click(PWASubscriptionPages.objZeeLogo, "Zee5 Logo");
		}
	}
	
	
	@SuppressWarnings("unused")
	public void PWAVerifyAutoRenewedDateIsUpdatedForPreviousOnesInTransactionsPage(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"PWA2-7910 : Previously purchased Pack Duration/Date is updated with the latest auto-renewed pack Duration/Date in my transaction page");
			logger.info(
					"PWA2-7910 : Previously purchased Pack Duration/Date is updated with the latest auto-renewed pack Duration/Date in my transaction page");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
//			logout();
//			loginWithUserEmail("gdmplex@mailnesia.com", "123456");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			waitTime(1000);
			click(PWAHamburgerMenuPage.objMyTransactionsOption, "My Transactions Option");
			waitTime(1000);
			if (verifyElementExist(PWAHamburgerMenuPage.objMyTransactionsPageTitle, "My Transactions Page Title")) {
				logger.info("Navigated to My Transactions page");
				extent.extentLoggerPass("", "Navigated to My Transactions page");
				List<WebElement> PlanPurchaseDatesList = getWebDriver()
						.findElements(PWASubscriptionPages.objPlanPurchaseDate);
				ArrayList<String> PlanPurchaseDatesArray = new ArrayList<String>();
				String LatestTransactionDate = findElement(PWASubscriptionPages.objPlanPurchaseDate(1)).getText();
				System.out.println("LatestTransactionDate: " + LatestTransactionDate);
				for (int i = 2; i <= PlanPurchaseDatesList.size(); i++) {
					String date = findElement(PWASubscriptionPages.objPlanPurchaseDate(i)).getText();
					PlanPurchaseDatesArray.add(date);
					System.out.println("array: " + PlanPurchaseDatesArray);
					System.out.println("Value: " + date);
				}
				if (PlanPurchaseDatesArray.contains(LatestTransactionDate)) {
					logger.error("Previously purchased Pack Date is updated with the latest auto-renewed pack Date in my transaction page");
					extent.extentLoggerFail("", "Previously purchased Pack Date is updated with the latest auto-renewed pack Date in my transaction page");
				} else {
					logger.info("Previously purchased Pack Date is not updated with the latest auto-renewed pack Date in my transaction page");
					extent.extentLoggerPass("", "Previously purchased Pack Date is not updated with the latest auto-renewed pack Date in my transaction page");
				}
				
				List<WebElement> PlanPurchaseDurationsList = getWebDriver()
						.findElements(PWASubscriptionPages.objPlanDuration);
				ArrayList<String> PlanPurchaseDurationsArray = new ArrayList<String>();
				String LatestTransactionDuration = findElement(PWASubscriptionPages.objPlanDuration(1)).getText();
				System.out.println("LatestTransactionDuration: " + LatestTransactionDuration);
				for (int i = 2; i <= PlanPurchaseDatesList.size(); i++) {
					String date = findElement(PWASubscriptionPages.objPlanDuration(i)).getText();
					PlanPurchaseDurationsArray.add(date);
					System.out.println("array: " + PlanPurchaseDurationsArray);
					System.out.println("Value: " + date);
				}
				if (PlanPurchaseDurationsArray.contains(LatestTransactionDuration)) {
					logger.error("Previously purchased Pack Duration is updated with the latest auto-renewed pack Duration in my transaction page");
					extent.extentLoggerFail("", "Previously purchased Pack Duration is updated with the latest auto-renewed pack Duration in my transaction page");
				} else {
					logger.info("Previously purchased Pack Duration is not updated with the latest auto-renewed pack Duration in my transaction page");
					extent.extentLoggerPass("", "Previously purchased Pack Duration is not updated with the latest auto-renewed pack Duration in my transaction page");
				}

			} else {
				logger.error("Not navigated to My Transactions page");
				extent.extentLoggerFail("", "Not navigated to My Transactions page");
			}
			waitTime(2000);
			Back(1);
			waitTime(2000);
			Back(1);
			waitTime(2000);
//			click(PWASubscriptionPages.objZeeLogo, "Zee5 Logo");
			logout();

		}
	}
	
	
	public void PWAVerifyGetPremiumCTADisplayedForSubscribedUserWithParentalPin(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7925 : \"Get premium \"CTA is displayed on consumption page for the subscribed users with parental pin logged in via guest checkout");
			logger.info(
					"PWA2-7925 : \"Get premium \"CTA is displayed on consumption page for the subscribed users with parental pin logged in via guest checkout");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			waitTime(3000);
//			loginWithUserEmail("25off@mailnesia.com", "123456");
			Actions action = new Actions(getWebDriver());
			action.moveToElement(findElement(PWAHomePage.objMastheadCarouselCurrentContent)).build().perform();

			for (int i = 0; i < 5; i++) {
				try {

					JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
					executor.executeScript("arguments[0].click();",
							findElement(PWAHomePage.objPlayIconWithGetPremiumCTAOnCarousel));
					logger.info("Clicked on " + "Play Icon with Get Premium CTA On MastHead Carousel");
					extent.extentLogger("clickedElement",
							"Clicked on " + "Play Icon with Get Premium CTA On MastHead Carousel");
					break;
				} catch (Exception e) {
					Thread.sleep(1000);
					logger.error(e);
				}
			}
			waitTime(2000);
			waitForElementAndClick(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, 30,
					"Get Premium Link below the Player");
			waitTime(2000);
			if (verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText,
					"Browse All Packs Page Title Text")) {
				logger.info("Navigated to plan selection page");
				extent.extentLoggerPass("", "Navigated to plan selection page");
				click(PWASubscriptionPages.objContinueBtn, "Continue Button");
				waitTime(2000);
				if (verifyElementExist(PWASubscriptionPages.objAccountInfoTitle, "Account Info Title")) {
					logger.info("Navigated to Account Info page");
					extent.extentLoggerPass("", "Navigated to Account Info page");
					type(PWASubscriptionPages.objEmailIDTextField, "25off@mailnesia.com", "Email ID Text Field");
					waitTime(2000);
					click(PWASubscriptionPages.objContinueBtn, "Continue Button");
					waitTime(3000);
					// Password Popup
					verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
					waitTime(3000);
					verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled Proceed Button");
					waitTime(3000);
					verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
					waitTime(3000);
					type(PWASubscriptionPages.objPasswordFieldHidden, "123456", "Password Field");
					waitTime(3000);
					verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabled, "Enabled Proceed Button");
					waitTime(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field");
					type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
					waitTime(4000);
					if (verifyIsElementDisplayed(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen,
							"Get Premium CTA below the Player")) {
						logger.error("Get Premium CTA below the Player is visible");
						extent.extentLoggerFail("checkElementPresent", "Get Premium CTA below the Player is displayed");
					} else {
						logger.info("Get Premium CTA below the Player is not displayed");
						extent.extentLoggerPass("checkElementPresent",
								"Get Premium CTA below the Player is not displayed");
					}

					if (verifyIsElementDisplayed(PWAPlayerPage.objSubscribeNowLink,
							"In-Line Get Premium CTA On Player Screen")) {
						logger.error("In-Line Get Premium CTA On Player Screen is visible");
						extent.extentLoggerFail("checkElementPresent",
								"In-Line Get Premium CTA On Player Screen is displayed");
					} else {
						logger.info("In-Line Get Premium CTA On Player Screen is not displayed");
						extent.extentLoggerPass("checkElementPresent",
								"In-Line Get Premium CTA On Player Screen is not displayed");
					}
					
					logout();
				}
			}
		}
	}
	
	
	public void PWAVerifyRightClickPasteInEmailIDFieldInAccountsInfoPage(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7767 : \"Email Id or mobile number \"place holder is selected and user is unable to paste the input in \"Email Id or mobile number \"field on account info page");
			logger.info(
					"PWA2-7767 : \"Email Id or mobile number \"place holder is selected and user is unable to paste the input in \"Email Id or mobile number \"field on account info page");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			waitTime(3000);
			Actions action = new Actions(getWebDriver());
			action.moveToElement(findElement(PWAHomePage.objMastheadCarouselCurrentContent)).build().perform();

			for (int i = 0; i < 5; i++) {
				try {

					JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
					executor.executeScript("arguments[0].click();",
							findElement(PWAHomePage.objPlayIconWithGetPremiumCTAOnCarousel));
					logger.info("Clicked on " + "Play Icon with Get Premium CTA On MastHead Carousel");
					extent.extentLogger("clickedElement",
							"Clicked on " + "Play Icon with Get Premium CTA On MastHead Carousel");
					break;
				} catch (Exception e) {
					Thread.sleep(1000);
					logger.error(e);
				}
			}
			waitTime(2000);
			waitForElementAndClick(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, 30,
					"Get Premium Link below the Player");
			waitTime(2000);
			if (verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText,
					"Browse All Packs Page Title Text")) {
				logger.info("Navigated to plan selection page");
				extent.extentLoggerPass("", "Navigated to plan selection page");
				click(PWASubscriptionPages.objContinueBtn, "Continue Button");
				waitTime(2000);
				if (verifyElementExist(PWASubscriptionPages.objAccountInfoTitle, "Account Info Title")) {
					logger.info("Navigated to Account Info page");
					extent.extentLoggerPass("", "Navigated to Account Info page");
					String ctc = "igstesting@emailid.com";
				    StringSelection stringSelection = new StringSelection(ctc);
				    Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
				    clpbrd.setContents(stringSelection, null);
					Actions actions = new Actions(getWebDriver());
					WebElement element = findElement(PWASubscriptionPages.objEmailIDTextField);
					actions.contextClick(element).perform();
					waitTime(2000);
				    Robot robot = new Robot();
				    robot.keyPress(KeyEvent.VK_DOWN);
				    robot.keyRelease(KeyEvent.VK_DOWN);
				    robot.keyPress(KeyEvent.VK_DOWN);
				    robot.keyRelease(KeyEvent.VK_DOWN);
				    robot.keyPress(KeyEvent.VK_ENTER);
				    robot.keyRelease(KeyEvent.VK_ENTER);
				    waitTime(2000);
				    String PastedEmail = element.getAttribute("value");
				    System.out.println("Pasted Email: "+PastedEmail);
				    if(ctc.equals(PastedEmail)) {
				    	logger.info("Right-click and Paste in the Email ID field is successful");
						extent.extentLoggerPass("", "Right-click and Paste in the Email ID field is successful");
				    }else {
				    	logger.error("Failed to Right-click and Paste in the Email ID field");
						extent.extentLoggerFail("", "Failed to Right-click and Paste in the Email ID field");
				    }
					
				}else {
			    	logger.error("Failed to navigate to Account Info page");
					extent.extentLoggerFail("", "Failed to navigate to Account Info page");
			    }
				
			}else {
		    	logger.error("Failed to navigate to plan selection page");
				extent.extentLoggerFail("", "Failed to navigate to plan selection page");
		    }
		}
	}
	
	
	
	public void PWAVerifySEODetailsOfChannelsPage(String userType) throws Exception {
		
		extent.HeaderChildNode("PWA2-7492 : Channel pages - SEO details to be updated.");
		logger.info("PWA2-7492 : Channel pages - SEO details to be updated.");
		extent.extentLogger("", "----- Verifying if the user can navigate to the channel page ------");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objMoreMenuIcon, "More Menu Icon");
		waitTime(5000);
//		verifyElementPresent(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
		click(PWAHomePage.objMoreMenuTabs("Channels"), "Channels Tab");
		if(verifyElementPresent(PWALandingPages.objChannelsLandingPageTitle, "Channels Landing Page Title")) {
			logger.info("Navigate to Channels Landing page");
			extent.extentLoggerPass("", "Navigate to Channels Landing page");
			extent.extentLogger("", "----- Verifying if the user can see the URL, when landed on channel page ------");
			logger.info("----- Verifying if the user can see the URL, when landed on channel page ------");
			String getUrl = getWebDriver().getCurrentUrl();
//			System.out.println("expectedURL: "+getParameterFromXML("url")+"tv-channels");
//			System.out.println("currURL: "+getUrl);
			if(getUrl.equals(getParameterFromXML("url")+"tv-channels")) {
				logger.info("Current URL matches the Channels Landing page URL");
				extent.extentLoggerPass("", "Current URL matches the Channels Landing page URL");
			}else {
				logger.error("Current URL does not match the Channels Landing page URL");
				extent.extentLoggerFail("", "Current URL does not match the Channels Landing page URL");
			}
			
			extent.extentLogger("", "----- Verifying if the user can see the title  when landed on TV Channels landing page ------");
			logger.info("----- Verifying if the user can see the title  when landed on TV Channels landing page ------");
			String ChannelsLandingPageTitle = findElement(PWALandingPages.objChannelsLandingPageTitle).getText();
//			System.out.println(ChannelsLandingPageTitle);
			if(ChannelsLandingPageTitle.equals("List of TV Channels")) {
				logger.info("Title of the Channels Landing Page matches \"List of TV Channels\"");
				extent.extentLoggerPass("", "Title of the Channels Landing Page matches \"List of TV Channels\"");
			}else {
				logger.error("Title of the Channels Landing Page does not match \"List of TV Channels\"");
				extent.extentLoggerFail("", "Title of the Channels Landing Page does not match \"List of TV Channels\"");
			}
			
			extent.extentLogger("", "----- Verifying the H1 tag on the Tv channel List landing page ------");
			logger.info("----- Verifying the H1 tag on the Tv channel List landing page ------");
			checkTagWithTextInSource(getUrl, "h1", "List of TV Channels");
			
			extent.extentLogger("", "----- Verifying the SEO Title on the TV Channel listing page ------");
			logger.info("----- Verifying the SEO Title on the TV Channel listing page ------");
			checkTagWithTextInSource(getUrl, "title", "Watch ZEE TV Channels Online on ZEE5");
			
			extent.extentLogger("", "----- Verifying the SEO description on the TV Channel listing page ------");
			logger.info("----- Verifying the SEO description on the TV Channel listing page ------");
			checkAttributeTextWithTextInSource(getUrl, "name=\"description\" content=\"", "Browse through ZEE5's channel list including ZEE TV, ZEE Marathi, ZEE News, BBC World, CNN and more channels in English, Hindi and other regional languages. Watch your favourite tv channel from ZEE5's channel list");
			
			extent.extentLogger("", "----- Verifying if the user can navigate to the channel Details page from the Channel listing page ------");
			logger.info("----- Verifying if the user can navigate to the channel Details page from the Channel listing page ------");
			String titleOfFirstChannelCard = findElement(PWALandingPages.objFirstChannelCard).getAttribute("title");
			click(PWALandingPages.objFirstChannelCard, "First Channel Card");
			
			String h1TagOfFirstChannelInDetailPage = findElement(By.tagName("h1")).getText();
			if(h1TagOfFirstChannelInDetailPage.contains(titleOfFirstChannelCard)) {
				logger.info("Navigated to the correct channel detail page");
				extent.extentLoggerPass("", "Navigated to the correct channel detail page");
			}else {
				logger.error("Navigated to incorrect channel detail page");
				extent.extentLoggerFail("", "Navigated to incorrect channel detail page");
			}
			
			extent.extentLogger("", "----- Verifying if the user can see the URL,  when landed on channel details page ------");
			logger.info("----- Verifying if the user can see the URL,  when landed on channel details page ------");
			String getDetailPageUrl = getWebDriver().getCurrentUrl();
			String expectedDetailPageUrl = getParameterFromXML("url")+"tv-channels/"+titleOfFirstChannelCard.toLowerCase()+"/0-9-"+titleOfFirstChannelCard.toLowerCase();
//			System.out.println("expectedURL: "+expectedDetailPageUrl);
//			System.out.println("currURL: "+getDetailPageUrl);
			if(getDetailPageUrl.equals(expectedDetailPageUrl)) {
				logger.info("Current URL matches the Channel detail page URL");
				extent.extentLoggerPass("", "Current URL matches the Channel detail page URL");
			}else {
				logger.error("Current URL does not match the Channel detail page URL");
				extent.extentLoggerFail("", "Current URL does not match the Channel detail page URL");
			}
			
			extent.extentLogger("", "----- Verifying if the user can see the title  when landed on TV Channels landing page ------");
			logger.info("----- Verifying if the user can see the title  when landed on TV Channels landing page ------");
			String titleOfFirstChannelInDetailPage = getWebDriver().getTitle();
//			System.out.println(titleOfFirstChannelInDetailPage);
			if(titleOfFirstChannelInDetailPage.equals("Watch "+titleOfFirstChannelCard+" Serials & Shows on ZEE5.")) {
				logger.info("Navigated to the correct channel detail page");
				extent.extentLoggerPass("", "Navigated to the correct channel detail page");
			}else {
				logger.error("Navigated to incorrect channel detail page");
				extent.extentLoggerFail("", "Navigated to incorrect channel detail page");
			}
			
			extent.extentLogger("", "----- Verifying the H1 tag on the Tv channel details page ------");
			logger.info("----- Verifying the H1 tag on the Tv channel details page ------");
			checkTagWithTextInSource(getDetailPageUrl, "h1", "List of "+titleOfFirstChannelCard+" Serials");
			
			extent.extentLogger("", "----- Verifying the SEO Title on the TV Channel details  page ------");
			logger.info("----- Verifying the SEO Title on the TV Channel details  page ------");
			checkTagWithTextInSource(getDetailPageUrl, "title", "Watch "+titleOfFirstChannelCard+" Serials & Shows on ZEE5.");
			
		}else {
			logger.error("Failed to navigate to Channels Landing page");
			extent.extentLoggerFail("", "Failed to navigate to Channels Landing page");
		}		
	}
	
	@SuppressWarnings({ "unused", "resource" })
	public void checkAttributeTextWithTextInSource(String urlLink,String attributeText,String text) throws Exception {
		boolean foundOpeningTag=false,foundClosingTag=false,foundText=false;
		String path=System.getProperty("user.dir") + "\\webpagesource.txt";
		URL url = new URL(urlLink);
	    try(
	        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
	        BufferedWriter writer = new BufferedWriter(new FileWriter(path));
	    )
	    {
	        String line;
	        while ((line = reader.readLine()) != null) {
	            writer.write(line);
	        }
	    }
	    BufferedReader br = new BufferedReader(new FileReader(path));
	    String line="",doc="",temp="";
	    while ((line = br.readLine()) != null) {
	       doc=doc+line; 
	    }
	    
	    if(doc.contains(attributeText)) {
	    	extent.extentLogger("", "Source contains attribute text "+attributeText);
        	logger.info("Source contains attribute text "+attributeText);
        	doc=doc.split(attributeText)[1];
        	temp=doc.split("\"")[0];
//        	doc=attributeText+doc;
        	temp=replacingSpecialCharsInAString(temp, "&#x27;", "'");
        	if(temp.equals(text)) {
    			extent.extentLoggerPass("", "Source contains text in Content as expected");
         		logger.info("Source contains text in Content as expected");
    		}
     		else {
     			extent.extentLoggerFail("", "Source contains incorrect text in Content");
         		logger.error("Source contains incorrect text in Content");
     		}
	    }
	}
	
	public String replacingSpecialCharsInAString(String text, String splitText, String splitTextToBeEntered)throws Exception{
		String[] textArray;
		System.out.println(text);
		textArray = text.split(splitText);
		System.out.println("String Array: "+Arrays.toString(textArray));
		String res = textArray[0];
	    for (int i = 1; i < textArray.length; i++) {
	    	res = res.concat(splitTextToBeEntered);
	        res = res.concat(textArray[i]);
	    }
		System.out.println(res);
		return res;
	}
	
//====================COMBO OFFER=========================
	
	public void ComboOfferPremiumPlex(String userType)throws Exception {
		
	}
	
	public void validateComboScreenOnClickingCTABelowPlayer() throws Exception {
		rentNowOnCarousel("Trailer");
		validateConsumptionScreen();
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
	}
	
	public void validateComboScreenOnClickingCTAInlinePlayer() throws Exception {
		rentNowOnCarousel("Trailer");
		validateConsumptionScreen();
		click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now CTA in-player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
	}
	
	public void playingContentFromwatchListOnClickingCTABelowPlayer() throws Exception {
		if (!userType.equals("Guest")) {
			watchList();
			validateConsumptionScreen();
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
			verifyComboScreen();
			termsOfService();
			privacyPolicy();
		}
	}
	
	public void playingContentFromwatchListOnClickingCTAInlinePlayer() throws Exception {
		if (!userType.equals("Guest")) {
			watchList();
			validateConsumptionScreen();
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now CTA in-player");
			verifyComboScreen();
			termsOfService();
			privacyPolicy();
		}
	}
	
	public void validateComboScreenOnClickingCTAInlinePlayerRentNow() throws Exception {
		rentNowOnCarousel("RentNow");
		rentPopUp();
	}
	
	public void rentNowOnCarousel(String CTAONCarousel) throws Exception {
		HeaderChildNode("1");
		navigateToAnyScreen("Rent");
		waitTime(3000);
		scrollByWEB();
		contentTitle = getText(PWAComboOfferPage.objRentNowTitle);
		if(CTAONCarousel.equalsIgnoreCase("Trailer")) {
			click(PWAComboOfferPage.objTrailer, "Trailer");
		}else if(CTAONCarousel.equalsIgnoreCase("RentForINR")) {
			click(PWAComboOfferPage.objRentForINR, "Rent for INR");
		}else if(CTAONCarousel.equalsIgnoreCase("RentNow")) {
			click(PWAComboOfferPage.objRentNow, "Rent Now");
		}
	}
	
	public void watchList() throws Exception {
		HeaderChildNode("2");
		waitTime(5000);
		JSClick(PWAHomePage.objProfileMenu,"Profile");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHomePage.objMyWatchListIcon, "My Watchlist");
		verifyElementPresentAndClick(PWAComboOfferPage.objWatchListZeeplexTab, "ZEEPLEX Tab");
		verifyElementPresentAndClick(PWAComboOfferPage.objFirstContentTitle, "First content");
	}
	
	public void validateConsumptionScreen() throws Exception {
		HeaderChildNode("3");
		waitTime(60000);
		waitTime(15000);
		verifyElementPresent(PWAComboOfferPage.objwatchFullContentByRentingIt, "watch full content by renting it");
		verifyElementPresent(PWAComboOfferPage.objRentNowInPlayer, "Rent Now CTA in-player");
		verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Combo Offer Widget below the player");
		verifyElementPresent(PWAComboOfferPage.objKnowMore, "Know More CTA below the player");
		
	}
	
	public void verifyComboScreen() throws Exception {
		HeaderChildNode("4");
		scrollDownWEB();
		verifyElementPresent(PWAHamburgerMenuPage.objApply, "Beneficiary Text");
		verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail");
		verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail");
		
		compareText(PWAComboOfferPage.objRentalValidateTxt,"Rental validity 21 Days");
		compareText(PWAComboOfferPage.objWatchTimevalidateTxt,"Watch Time validity 4 hours");
		compareText(PWAComboOfferPage.obj4000blockusterTxt,"4000+ blockbuster movies");
		compareText(PWAComboOfferPage.objzee5OriginalTxt,"ZEE5 Originals and Web Series");
		compareText(PWAComboOfferPage.objWatchshowsTxt,"Watch shows before TV");
		compareText(PWAComboOfferPage.objWatchAdTxt,"Watch Ad Free");
		String SaveAmount = getText(PWAComboOfferPage.objDiscount).replace("Save ₹", "");
		compareText(PWAComboOfferPage.objDiscount,"Save ₹"+SaveAmount);
		compareText(PWAComboOfferPage.objTotalDiscount,"Save ₹"+SaveAmount);
		
		scrollDownWEB();
		if(userType.equals("Guest")) {
			verifyElementPresent(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		}else if(userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAComboOfferPage.objUpgradeBtn, "Upgrade Button");
		}
		
		if(verifyElementDisplayed(PWAComboOfferPage.objOnlyRentMovieCheckBox)) {
			verifyElementPresent(PWAComboOfferPage.objRentMovieBtn, "Rent Movie Button");
		}
	}
	
	public void rentPopUp() throws Exception {
		HeaderChildNode("Rent PopUp");
		verifyElementPresent(PWAComboOfferPage.objRentPopUp, "Rent PopUP");
		
		if(contentTitle.equals(getText(PWAComboOfferPage.objTitle))) {
			logger.info(""+contentTitle+"\" Title of the Content matches");
			extent.extentLoggerPass("",""+contentTitle+"\" Title of the Content matches");
		} else {
			logger.info(""+contentTitle+"\"Title of the Content does not matches");
			extent.extentLoggerFail("", ""+contentTitle+"\"Title of the Content does not matches");
		}
		
		if(verifyElementPresent(PWAComboOfferPage.objReleasetxt,"Released By text")) {
		logger.info("Released By Text :- "+getText(PWAComboOfferPage.objReleasetxt));
		extent.extentLoggerPass("", "Released By Text :- "+getText(PWAComboOfferPage.objReleasetxt));
		}
		verifyElementPresent(PWAComboOfferPage.objrentvalidityCard, "Rent Validity Card");
		compareText(PWAComboOfferPage.objLefftBannerrentvalidationTxt,"Rental Validity");
		String date = getText(PWAComboOfferPage.objLeftBannerDays).replace(" Days", "");
		compareText(PWAComboOfferPage.objLeftBannerDays,date+" Days");
		compareText(PWAComboOfferPage.objLeftBannerDesc,"You have "+date+" days to start watching the movie once rented");
		verifyElementPresent(PWAComboOfferPage.objWatchTimeCard, "Watch Time Card");
		compareText(PWAComboOfferPage.objWatchTimeTxt,"Watch Time");
		compareText(PWAComboOfferPage.objHoursTxt,"4 hours");
		compareText(PWAComboOfferPage.objRightBannerDesc,"You will have 4 hours to finish the movie once started playback");
		
		List<WebElement> ExpirePoint = findElements(PWAComboOfferPage.objExpirePoints);
		compareText(ExpirePoint.get(0),"You can watch the movie multiple times during the 4 hour period");
		compareText(ExpirePoint.get(1),"This is a non-refundable transaction");
		compareText(ExpirePoint.get(2),"This content is only available for rent and not a part of Premium or Club Subscription");
		compareText(ExpirePoint.get(3),"You can play your content on the supported devices");
		compareText(ExpirePoint.get(4),"Learn more about ZEEPLEX");
	}
	
	public void compareText(By Locator,String Text) throws Exception {
		if(getText(Locator).equals(Text)) {
			logger.info("'"+Text+"' text is matched");
			extent.extentLoggerPass("", "'"+Text+"' text is matched");
		} else {
			logger.info("'"+Text+"' text is not matched");
			extent.extentLoggerFail("", "'"+Text+"' text is not matched");
		}
	}
	
	public void compareText(WebElement element,String Text) throws Exception {
		if(element.getText().equals(Text)) {
			logger.info("'"+Text+"' text is matched");
			extent.extentLoggerPass("", "'"+Text+"' text is matched");
		} else {
			logger.info("'"+Text+"' text is not matched");
			extent.extentLoggerFail("", "'"+Text+"' text is not matched");
		}
	}
	
	
	public void termsOfService() throws Exception {
		HeaderChildNode("5");
		scrollDownWEB();
		click(PWAComboOfferPage.objTermsOfService,"Terms of Service");
		switchToWindow(2);
		if(verifyElementPresent(PWAComboOfferPage.objTermsOfServiceTitle, "Terms of Service")) {
			logger.info("Navigated to Terms of Service");
			extent.extentLoggerPass("", "Navigated to Terms of Service");
			getWebDriver().close();
			switchToParentWindow();
		}else {
			logger.info("Not Navigated to Terms of Service");
			extent.extentLoggerFail("", "Not Navigated to Terms of Service");
		}
	}
	
	public void privacyPolicy() throws Exception {
		HeaderChildNode("6");
		scrollDownWEB();
		click(PWAComboOfferPage.objPrivacyPolicy,"Privacy Policy");
		switchToWindow(2);
		if(verifyElementPresent(PWAComboOfferPage.objPrivacyPolicyTitle, "Privacy Policy")) {
			logger.info("Navigated to Privacy Policy");
			extent.extentLoggerPass("", "Navigated to Privacy Policy");
			getWebDriver().close();
			switchToParentWindow();
		}else {
			logger.info("Not Navigated to Privacy Policy");
			extent.extentLoggerFail("", "Not Navigated to Privacy Policy");
		}
	}
	
	public void pwainsprint(String userType) throws Exception
	{
		if (userType.equals("NonSubscribneduser")) 
		{
			//5
			extent.HeaderChildNode("Verify that user is getting new subscription page while purchasing TVOD plan");
			navigateToAnyScreenOnWeb("Rent");
			ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
			click(PWAHamburgerMenuPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objRentNow, "Rent Now");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objonlymovierent, "Only movie rent");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentmovie, "rent movie");
			if(checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section"))
			{
				logger.info("User should get new subscription page while purchasing TVOD plan,expected behaviour");
				extent.extentLoggerPass("", "User should get new subscription page while purchasing TVOD plan, expected behaviour");
				Back(1);
			}
			else 
			{
				logger.info("User not getting new subscription page while purchasing TVOD plan");
				extent.extentLoggerFail("", "User not getting  new subscription page while purchasing TVOD plan");
			}
			
			//105
			extent.HeaderChildNode("Verify that user is getting all the payment modes available for TVOD plan purchase");
			checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
			waitTime(5000);
					WebElement iframeElement = null;
					if (getPlatform().equalsIgnoreCase("Android")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					} else if (getPlatform().equalsIgnoreCase("Web")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					}

			verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			verifyElementPresent(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresent(PWAHamburgerMenuPage.objnetbanking,"Net banking");
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee logo");
			
			//16
			extent.HeaderChildNode("Verify that On entering card details of any credit card , Optional payment will be applicable");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			verifyElementPresentAndClick(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,
					"Enter Credit/Debit Card Details");
			type(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,"6587",
					"Enter Credit/Debit Card Details");
			
			if(verifyElementPresent(PWASubscriptionPages.objWallets, "Wallets"))
			{
				logger.info("Optional payment should be applicable if user enters any credit card details,expected behaviour");
				extent.extentLoggerPass("", "Optional payment should be applicable if user enters any credit card details,expected behaviour");
				Back(1);
			}
			else 
			{
				logger.info("Optional payment is not applicable if user enters any credit card details");
				extent.extentLoggerFail("", "Optional payment is not applicable if user enters any credit card details");
			}
			if(verifyElementPresent(PWAHamburgerMenuPage.objnetbanking,"Net banking"))
			{
				logger.info("Optional payment should be applicable if user enters any credit card details,expected behaviour");
				extent.extentLoggerPass("", "Optional payment should be applicable if user enters any credit card details,expected behaviour");
				Back(1);
			}
			else 
			{
				logger.info("Optional payment is not applicable if user enters any credit card details");
				extent.extentLoggerFail("", "Optional payment is not applicable if user enters any credit card details");
			}
			
			
			
			
			//106
			extent.HeaderChildNode("Verify that user is able to purchase the TVOD plan using any available payment mode successfully");
			verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking,"Net banking");
			
			//108
			extent.HeaderChildNode("Verify user is not able to see expired plan detail under Zeeplex rental");
			verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("ZEEPLEX Rentals"), "ZEEPLEX Rentals option");
			
			//12
			extent.HeaderChildNode("Verify that on clicking  continue CTA user will get new screen Add credit card/Debit Card");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
			waitTime(5000);
					//WebElement iframeElement = null;
					if (getPlatform().equalsIgnoreCase("Android")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					} else if (getPlatform().equalsIgnoreCase("Web")) {
						iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
						Thread.sleep(5000);
						Thread.sleep(5000);
						Thread.sleep(5000);
						getWebDriver().switchTo().frame(iframeElement);
					}

					verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
					if(checkElementDisplayed(PWASubscriptionPages.objCardNumber, "Enter Card Number Field"))
					{
						logger.info("On clicking Continue user should get New screen to Add Credit card/Debit Card,expected behaviour");
						extent.extentLoggerPass("", "On clicking Continue user should get New screen to Add Credit card/Debit Card, expected behaviour");
						//Back(1);
					}
					else 
					{
						logger.info("On clicking Continue user didnot navigated to New screen to Add Credit card/Debit Card");
						extent.extentLoggerFail("", "On clicking Continue user didnot navigated to New screen to Add Credit card/Debit Card");
					}
			
		}
			//6
			if(userType.equals("Guest"))
			{
				
				extent.HeaderChildNode("Verify Guest user logged in with non subscribed use but already rented plex");
				verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
				verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
				verifyElementPresentAndClick(PWASubscriptionPages.objEmailIDTextField, "Email ID Text Field");
				waitTime(3000);
				type(PWASubscriptionPages.objEmailIDTextField, "tvod_combo@mailnesia.com", "Email Id");

				hideKeyboard();
				waitTime(3000);
				verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
						"Proceed Button in Account Info Page Highlighted");
				waitTime(3000);
				// Password Popup
				verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
				waitTime(3000);
				verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled Proceed Button");
				waitTime(3000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
				waitTime(3000);
				
			type(PWASubscriptionPages.objPasswordFieldHidden, "123456", "Password Field");

				hideKeyboard();
				waitTime(3000);
				verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabled, "Enabled Proceed Button");
				waitTime(3000);
				if(checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section"))
				{
					logger.info("User should be redircted to Payment page and selected plan price should be displayed,expected behaviour");
					extent.extentLoggerPass("", "User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
					//Back(1);
				}
				else 
				{
					logger.info("User not redircted to Payment page and selected plan price should be displayed");
					extent.extentLoggerFail("", "User not redircted to Payment page and selected plan price should be displayed");
				}
				logout();
				
				
				//9
				extent.HeaderChildNode("Verify that user logged in with migrated premium user with expired Rental is redircetd "
						+ "to payment page on clicking Rent for Rs 299 CTA from Rental pop up");
				verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, "club1212@gmail.com", "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, "123456", "Password field");
				waitTime(5000);
				click(PWALoginPage.objWebLoginButton, "Login Button");
				waitTime(3000);
				navigateToAnyScreenOnWeb("Rent");
				ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
				click(PWAHamburgerMenuPage.objTrailer, "Trailer");
				click(PWAComboOfferPage.objRentNow, "Rent Now");
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objonlymovierent, "Only movie rent");
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentmovie, "rent movie");
				if(checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section"))
				{
					logger.info("User should be redircted to Payment page and selected plan price should be displayed,expected behaviour");
					extent.extentLoggerPass("", "User should be redircted to Payment page and selected plan price should be displayed,expected behaviour");
					Back(1);
				}
				else 
				{
					logger.info("User not redircted to Payment page and selected plan price should be displayed");
					extent.extentLoggerFail("", "User not redircted to Payment page and selected plan price should be displayed");
				}
			}
			
			if(userType.equals("SubscribedUser"))
			{
				//5
				extent.HeaderChildNode("Verify Guest user logged in with subscribed user < 499 with active Radhe "
						+ "and clicks on Upgrade To 499 CTA from Upgrade To 499 pop up");
				navigateToAnyScreenOnWeb("Rent");
				ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
				click(PWAHamburgerMenuPage.objTrailer, "Trailer");
				click(PWAComboOfferPage.objRentNow, "Rent Now");
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentmovie, "upgrade button");
				if(checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section"))
				{
					logger.info("User should be redircted to Payment page and selected plan price should be displayed,expected behaviour");
					extent.extentLoggerPass("", "User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
					Back(1);
				}
				else 
				{
					logger.info("User not redircted to Payment page and selected plan price should be displayed");
					extent.extentLoggerFail("", "User not redircted to Payment page and selected plan price should be displayed");
				}
			}
	}
	
}